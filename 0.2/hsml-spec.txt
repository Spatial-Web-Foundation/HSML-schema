P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3
4

P2874.X™/D1
Draft Standard for Spatial Web
Implementation Specification — HSML
Implementation

5
6
7
8
9
10
11
12
13
14

Developed by the

15
16
17

Copyright © 2024 by The Institute of Electrical and Electronics Engineers, Inc.
Three Park Avenue
New York, New York 10016-5997, USA

18

All rights reserved.

19
20
21
22
23
24
25
26
27
28
29
30
31

This document is an unapproved draft of a proposed IEEE Standard. As such, this document is subject to
change. USE AT YOUR OWN RISK! IEEE copyright statements SHALL NOT BE REMOVED from draft
or approved IEEE standards, or modified in any way. Because this is an unapproved draft, this document
must not be utilized for any conformance/compliance purposes. Permission is hereby granted for officers
from each IEEE Standards Working Group or Committee to reproduce the draft document developed by that
Working Group for purposes of international standardization consideration. IEEE Standards Department must
be informed of the submission for consideration prior to any reproduction for international standardization
consideration (stds-ipr@ieee.org). Prior to adoption of this document, in whole or in part, by another
standards development organization, permission must first be obtained from the IEEE Standards Department
(stds-ipr@ieee.org). When requesting permission, IEEE Standards Department will require a copy of the
standard development organization’s document highlighting the use of IEEE content. Other entities seeking
permission to reproduce this document, in whole or in part, must also obtain permission from the IEEE
Standards Department.

32
33
34

IEEE Standards Department
445 Hoes Lane
Piscataway, NJ 08854, USA

C/AISC - Artificial Intelligence Standards Committee
of the

IEEE Computer Society
Approved

IEEE SA Standards Board

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Abstract:

2
3
4

Keywords: Hyperspace Transaction Protocol, HSTP, Spatial Web, Hyperspace Modelling
Language, HSML, Universal Domain Graph, UDG, Spatial Web Identifier, SWID, W3C
Decentralized Identifier (DID), Verifiable Credentials

The Institute of Electrical and Electronics Engineers, Inc.
3 Park Avenue, New York, NY 10016-5997, USA
Copyright © 2024 by The Institute of Electrical and Electronics Engineers, Inc.
All rights reserved. Published XXX. Printed in the United States of America.
IEEE is a registered trademark in the U.S. Patent & Trademark Office, owned by The Institute of Electrical and Electronics Engineers,
Incorporated.
PDF: ISBN 978-0-XXXX-XXXX-X STDXXXXX
STDXXXXX
Print: ISBN 978-0-XXXX-XXXX-X STDPDXXXXX STDPDXXXXX
IEEE prohibits discrimination, harassment, and bullying.
For more information, visit https://www.ieee.org/about/corporate/governance/p9-26.html.
No part of this publication may be reproduced in any form, in an electronic retrieval system or otherwise, without the prior written
permission of the publisher.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Important Notices and Disclaimers Concerning IEEE Standards Documents

2
3
4
5

IEEE Standards documents are made available for use subject to important notices and legal disclaimers.
These notices and disclaimers, or a reference to this page (https://standards.ieee.org/ipr/disclaimers.html),
appear in all IEEE standards and may be found under the heading “Important Notices and Disclaimers
Concerning IEEE Standards Documents.”

6
7

Notice and Disclaimer of Liability Concerning the Use of IEEE Standards
Documents

8
9
10
11
12
13
14
15
16

IEEE Standards documents are developed within IEEE Societies and subcommittees of IEEE Standards
Association (IEEE SA) Board of Governors. IEEE develops its standards through an accredited consensus
development process, which brings together volunteers representing varied viewpoints and interests to achieve
the final product. IEEE standards are documents developed by volunteers with scientific, academic, and
industry-based expertise in technical working groups. Volunteers involved in technical working groups are
not necessarily members of IEEE or IEEE SA and participate without compensation from IEEE. While IEEE
administers the process and establishes rules to promote fairness in the consensus development process, IEEE
does not independently evaluate, test, or verify the accuracy of any of the information or the soundness of
any judgments contained in its standards.

17
18
19
20
21
22
23

IEEE makes no warranties or representations concerning its standards, and expressly disclaims all warranties,
express or implied, concerning all standards, including but not limited to the warranties of merchantability,
fitness for a particular purpose and non-infringement IEEE Standards documents do not guarantee safety,
security, health, or environmental protection, or compliance with law, or guarantee against interference with
or from other devices or networks. In addition, IEEE does not warrant or represent that the use of the material
contained in its standards is free from patent infringement. IEEE Standards documents are supplied “AS IS”
and “WITH ALL FAULTS.”

24
25
26
27
28

Use of an IEEE standard is wholly voluntary. The existence of an IEEE standard does not imply that there
are no other ways to produce, test, measure, purchase, market, or provide other goods and services related to
the scope of the IEEE standard. Furthermore, the viewpoint expressed at the time a standard is approved and
issued is subject to change brought about through developments in the state of the art and comments received
from users of the standard.

29
30
31
32
33

In publishing and making its standards available, IEEE is not suggesting or rendering professional or other
services for, or on behalf of, any person or entity, nor is IEEE undertaking to perform any duty owed by any
other person or entity to another. Any person utilizing any IEEE Standards document should rely upon their
own independent judgment in the exercise of reasonable care in any given circumstances or, as appropriate,
seek the advice of a competent professional in determining the appropriateness of a given IEEE standard.

34
35
36
37
38
39
40
41

IN NO EVENT SHALL IEEE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO: THE
NEED TO PROCURE SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE PUBLICATION, USE OF, OR RELIANCE
UPON ANY STANDARD, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE AND
REGARDLESS OF WHETHER SUCH DAMAGE WAS FORESEEABLE.

3

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Translations

2
3
4

The IEEE consensus balloting process involves the review of documents in English only. In the event that
an IEEE standard is translated, only the English language version published by IEEE is the approved IEEE
standard.

5

Use by artificial intelligence systems

6
7
8
9
10

In no event shall material in any IEEE Standards documents be used for the purpose of creating, training,
enhancing, developing, maintaining, or contributing to any artificial intelligence systems without the express,
written consent of IEEE SA in advance. “Artificial intelligence” refers to any software, application, or other
system that uses artificial intelligence, machine learning, or similar technologies, to analyze, train, process,
or generate content. Requests for consent can be submitted using the Contact Us form.

11

Official statements

12
13
14
15
16
17
18
19
20

A statement, written or oral, that is not processed in accordance with the IEEE SA Standards Board Operations
Manual is not, and shall not be considered or inferred to be, the official position of IEEE or any of its
committees and shall not be considered to be, or be relied upon as, a formal position of IEEE or IEEE SA. At
lectures, symposia, seminars, or educational courses, an individual presenting information on IEEE standards
shall make it clear that the presenter’s views should be considered the personal views of that individual rather
than the formal position of IEEE, IEEE SA, the Standards Committee, or the Working Group. Statements
made by volunteers may not represent the formal position of their employer(s) or affiliation(s). News releases
about IEEE standards issued by entities other than IEEE SA should be considered the view of the entity
issuing the release rather than the formal position of IEEE or IEEE SA.

21

Comments on standards

22
23
24

Comments for revision of IEEE Standards documents are welcome from any interested party, regardless
of membership affiliation with IEEE or IEEE SA. However, IEEE does not provide interpretations,
consulting information, or advice pertaining to IEEE Standards documents.

25
26
27
28
29
30
31
32
33
34

Suggestions for changes in documents should be in the form of a proposed change of text, together with
appropriate supporting comments. Since IEEE standards represent a consensus of concerned interests, it is
important that any responses to comments and questions also receive the concurrence of a balance of interests.
For this reason, IEEE and the members of its Societies and subcommittees of the IEEE SA Board of Governors
are not able to provide an instant response to comments or questions, except in those cases where the matter
has previously been addressed. For the same reason, IEEE does not respond to interpretation requests. Any
person who would like to participate in evaluating comments or in revisions to an IEEE standard is welcome
to join the relevant IEEE SA working group. You can indicate interest in a working group using the Interests
tab in the Manage Profile & Interests area of the IEEE SA myProject system.1 An IEEE Account is needed
to access the application.

35

Comments on standards should be submitted using the Contact Us form.2

36
37

1
2

Available at: https://development.standards.ieee.org/myproject-web/public/view.html#landing.
Available at: https://standards.ieee.org/about/contact/.

4

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Laws and regulations

2
3
4
5
6

Users of IEEE Standards documents should consult all applicable laws and regulations. Compliance with
the provisions of any IEEE Standards document does not constitute compliance to any applicable regulatory
requirements. Implementers of the standard are responsible for observing or referring to the applicable
regulatory requirements. IEEE does not, by the publication of its standards, intend to urge action that is not
in compliance with applicable laws, and these documents may not be construed as doing so.

7

Data privacy

8
9
10

Users of IEEE Standards documents should evaluate the standards for considerations of data privacy and
data ownership in the context of assessing and using the standards in compliance with applicable laws and
regulations.

11

Copyrights

12
13
14
15
16
17

IEEE draft and approved standards are copyrighted by IEEE under U.S. and international copyright laws.
They are made available by IEEE and are adopted for a wide variety of both public and private uses. These
include both use by reference, in laws and regulations, and use in private self-regulation, standardization,
and the promotion of engineering practices and methods. By making these documents available for use and
adoption by public authorities and private users, neither IEEE nor its licensors waive any rights in copyright
to the documents.

18

Photocopies

19
20
21
22
23
24

Subject to payment of the appropriate licensing fees, IEEE will grant users a limited, non-exclusive license
to photocopy portions of any individual standard for company or organizational internal use or individual,
non-commercial use only. To arrange for payment of licensing fees, please contact Copyright Clearance
Center, Customer Service, 222 Rosewood Drive, Danvers, MA 01923 USA; +1 978 750 8400; https://
www.copyright.com/. Permission to photocopy portions of any individual standard for educational classroom
use can also be obtained through the Copyright Clearance Center.

25

Updating of IEEE Standards documents

26
27
28
29

Users of IEEE Standards documents should be aware that these documents may be superseded at any time
by the issuance of new editions or may be amended from time to time through the issuance of amendments,
corrigenda, or errata. An official IEEE document at any point in time consists of the current edition of the
document together with any amendments, corrigenda, or errata then in effect.

30
31
32
33

Every IEEE standard is subjected to review at least every 10 years. When a document is more than 10 years
old and has not undergone a revision process, it is reasonable to conclude that its contents, although still of
some value, do not wholly reflect the present state of the art. Users are cautioned to check to determine that
they have the latest edition of any IEEE standard.

34
35
36

In order to determine whether a given document is the current edition and whether it has been amended
through the issuance of amendments, corrigenda, or errata, visit IEEE Xplore or contact IEEE.3 For more
information about the IEEE SA or IEEE’s standards development process, visit the IEEE SA Website.

37

3

Available at https://ieeexplore.ieee.org/browse/standards/collection/ieee.

5

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Errata

2
3
4
5

Errata, if any, for all IEEE standards can be accessed on the IEEE SA Website.4 Search for standard number
and year of approval to access the web page of the published standard. Errata links are located under the
Additional Resources Details section. Errata are also available in IEEE Xplore. Users are encouraged to
periodically check for errata.

6

Patents

7

IEEE standards are developed in compliance with the IEEE SA Patent Policy.5

8
9
10
11
12
13
14
15

Attention is called to the possibility that implementation of this standard may require use of subject matter
covered by patent rights. By publication of this standard, no position is taken by the IEEE with respect to the
existence or validity of any patent rights in connection therewith. If a patent holder or patent applicant has
filed a statement of assurance via an Accepted Letter of Assurance, then the statement is listed on the IEEE
SA Website at https://standards.ieee.org/about/sasb/patcom/patents.html. Letters of Assurance may indicate
whether the Submitter is willing or unwilling to grant licenses under patent rights without compensation
or under reasonable rates, with reasonable terms and conditions that are demonstrably free of any unfair
discrimination to applicants desiring to obtain such licenses.

16
17
18
19
20
21
22

Essential Patent Claims may exist for which a Letter of Assurance has not been received. The IEEE
is not responsible for identifying Essential Patent Claims for which a license may be required, for
conducting inquiries into the legal validity or scope of Patents Claims, or determining whether any licensing
terms or conditions provided in connection with submission of a Letter of Assurance, if any, or in any
licensing agreements are reasonable or non-discriminatory. Users of this standard are expressly advised that
determination of the validity of any patent rights, and the risk of infringement of such rights, is entirely their
own responsibility. Further information may be obtained from the IEEE Standards Association.

23

IMPORTANT NOTICE

24
25
26
27
28
29
30
31
32
33
34

Technologies, application of technologies, and recommended procedures in various industries evolve over
time. The IEEE standards development process allows participants to review developments in industries,
technologies, and practices, and to determine what, if any, updates should be made to the IEEE standard.
During this evolution, the technologies and recommendations in IEEE standards may be implemented in ways
not foreseen during the standard’s development. IEEE standards development activities consider research
and information presented to the standards development group in developing any safety recommendations.
Other information about safety practices, changes in technology or technology implementation, or impact
by peripheral systems also may be pertinent to safety considerations during implementation of the standard.
Implementers and users of IEEE Standards documents are responsible for determining and complying with
all appropriate safety, security, environmental, health, data privacy, and interference protection practices and
all applicable laws and regulations.

35
36

4
5

Available at: https://standards.ieee.org/standard/index.html.
Available at: https://standards.ieee.org/about/sasb/patcom/materials.html.

6

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Participants

2

At the time this draft Standard was completed, the Spatial Web Working Group had the following membership:

3
4

<Chair Name>, Chair
<Vice-chair Name>, Vice Chair

5
6
7
8

Participant1
Participant2
Participant3

9
10

The following members of the Standards Association balloting group voted on this Standard. Balloters may
have voted for approval, disapproval, or abstention.

11
12
13
14

Balloter1
Balloter2
Balloter3

15
16

When the IEEE SA Standards Board approved this Standard on <Date Approved>, it had the following
membership:

17
18
19
20

<Name>, Chair
<Name>, Vice Chair
<Name>, Past Chair
<Name>, Secretary

21
22
23
24

SBMember1
SBMember2
SBMember3

Participant4
Participant5
Participant6

Participant7
Participant8
Participant9

Balloter4
Balloter5
Balloter6

Balloter7
Balloter8
Balloter9

SBMember4
SBMember5
SBMember6

SBMember7
SBMember8
SBMember9

7

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Introduction

2
3

This introduction is not part of P2874.X/D1, Draft Standard for Spatial Web Implementation Specification — HSML
Implementation

4
5
6
7

This document specifies the Hyperspace Modeling Language (HSML) Implementation Specification, a core
component of the IEEE P2874 Spatial Web Standard. HSML provides the semantic backbone for representing
entities, domains, activities, channels, tools, and digital twins in a unified framework. It is both humanand machine-readable, designed to ensure semantic precision, governance, and interoperability at web scale.

8
9
10
11

As envisioned in IEEE P2874/D3.3.2, the Spatial Web is a globally interoperable socio-technical fabric
connecting humans, autonomous systems, and the Internet of Things (IoT). Its purpose is to integrate the
digital and physical worlds into a shared semantic fabric where information is contextual, interactions are
secure, and governance is intrinsic. Realizing this vision requires a data model capable of:

12

–

representing complex, compositional systems;

13

–

supporting automated activities and contracts;

14

–

embedding governance and credentialing;

15

–

enabling explainability and compliance across diverse domains.

16
17
18
19
20
21

HSML fulfills this role by defining a normative ontology and modeling language for the Spatial Web.
It specifies how entities are identified, how domains declare spatial structure (via hyperspaces), and
how activities, permissions, and governance rules are semantically represented. HSML does not itself
provide query or transaction mechanisms; these are addressed by complementary specifications such as the
Hyperspace Query Language (HSQL) and the Hyperspace Transaction Protocol (HSTP). Instead, HSML
forms the semantic layer upon which those protocols depend.

22
23
24
25

IMPORTANT:
IEEE P2874/D3.3.2 is an approved draft of a proposed IEEE Standard and remains subject to change.
This HSML Implementation Specification has been developed to meet the Implementation Specification
requirements defined within the IEEE P2874 Draft Standard.

26

Background and Motivation

27
28
29
30
31

The Spatial Web is built on an integrated framework of protocol, architecture, and governance, embodied
in the Hyperspace Transaction Protocol (HSTP) and the Hyperspace Modeling Language (HSML). Together
these provide the foundation for a globally interoperable system of systems, defining how entities are
modeled, how transactions are conducted, and how governance is embedded at every layer. IEEE P2874
unifies these elements into a reference model for Spatial Web components, systems, and services.

32
33
34
35
36
37
38

At the core of this foundation is the concept of HYPERSPACE. Formally, a hyperspace is a set of points
where, for every ordered pair, there may exist a set of paths between them, plus an identity path for each
point. This abstraction generalizes the notion of “space” beyond geography: points may represent entities,
and paths may represent relationships, adjacencies, or transformations. Hyperspace enables the Spatial Web
to merge the physical and virtual into a shared semantic fabric that transcends national and geographic
boundaries. Entities that are physically distant may still be tightly coupled in other dimensions (e.g., logical,
organizational, or contextual), allowing new forms of interaction, coordination, and governance.

39
40

Complementing HYPERSPACE is the concept of DOMAIN, defined as a “sphere of knowledge, influence,
or activity.” Domains provide the semantic scaffolding of the Spatial Web: they anchor identifiable entities,

8

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3

declare the hyperspaces they inhabit, and establish rules of interaction (see Figure 1). Through shared and
linkable domain architectures, HSML ensures that entities and their interrelationships can be consistently
described, discovered, and governed across contexts.

4

Figure 1—Hyperspace and Domain in the Spatial Web

5

The development of the Spatial Web is driven by converging technological and societal forces, including:

6

–

The increasingly graph-like nature of global data.

7

–

The opportunity for automation and autonomic activities enabled by context-aware AI.

8

–

The need for composable and governable systems spanning organizations and jurisdictions.

9

–

The requirement for secure, verifiable transactions.

10
11

–

The rise of machine learning, neural computation, and edge intelligence, demanding semantic
integration.

12

–

The imperative for explainable AI and robotic governance to ensure trust and accountability.

13

–

The global proliferation of the IoT and sensor meshes, requiring scalable, standards-based models.

14
15
16
17
18

Ultimately, the Spatial Web is conceived as a socio-technical system of systems. Its realization must address
not only technical challenges of modeling, computation, and communication, but also the social, cultural,
ethical, and legal dimensions of technology use. IEEE P2874 is therefore designed as a socio-technical
standard, balancing technical infrastructure with governance frameworks to ensure a secure, interoperable,
and human-centered digital-physical reality.

19

Relationship to IEEE P2874 (Spatial Web Foundation)

20
21
22
23

This HSML Implementation Specification is directly derived from and builds upon the IEEE P2874/D3.3.2
Draft Standard for Spatial Web Protocol, Architecture and Governance, dated March 2025. Material from the
Spatial Web Foundation’s “Spatial Web Protocol, Architecture and Governance,” Version D3.3, copyright ©
2025 Spatial Web Foundation, was used with permission as the base for this standard.

24
25
26
27

As a reference model, the IEEE P2874 standard establishes the set of required modules and sub-modules
for Spatial Web-compliant implementations, along with their minimum functions and associated information
models. It defines requirements for a set of Implementation Specifications, such as this HSML document, and
identifies existing technologies and standards to be integrated into these implementations.

28

Goals and Benefits of HSML

29
30
31

The overarching purpose of the IEEE P2874 standard, and by extension this HSML Implementation
Specification, is to provide a holistic and coherent technical framework for implementing a collaborative,
interactive Spatial Web and shared world system. HSML is designed as a human- and machine-readable

9

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

modeling language and semantic data ontology schema that describes objects, relations, actions, activities,
and their permissions.

3

Specifically, HSML aims to achieve the following key goals:

4
5
6

–

Spatially Defined Digital Content Fulfillment: Enable a functional layer stack capable of fulfilling
spatially defined real-world and virtual requests for digital content while respecting governance
authorities and self-sovereign identity.

7
8

–

Comprehensive Data Ontology: Define a data ontology for describing objects, relationships, and
activities, which is foundational for consistent data interpretation.

9
10

–

Verifiable Credentialing: Specify a verifiable credentialing and certification method for permissioning
create, retrieve, update, and delete access to devices, locations, users, and data.

11
12
13

–

Automated Contracting: Support a machine- and human-readable contracting language that
enables expression and automated execution of legal, financial, and physical commitments, tied to
activities and governed by explicit norms and policies.

14
15

–

Shared Understanding: Facilitate semantic interoperability between humans and AIs by ensuring
that contextual meaning, intent, and activity outcomes are represented in a common HSML framework.

16
17

–

Explainable AI:: Advance AI transparency and accountability by enabling explicit modeling of
decision-making processes, conditions, and credentials required for activities.

18
19

–

Universal Interoperability: Drive interoperability of models, data, and activities to enable crossdomain collaboration across organizations, networks, and geopolitical boundaries.

20
21
22

–

Compliance and Governance: Provide the semantic hooks for ensuring compliance with local,
regional, national, and international regulatory, ethical, and cultural norms—while maintaining
auditability through credential checks and policy evaluation.

23
24
25

–

Secure Identity and Authentication: Ensure that identity, privacy, authentication, and
transparency are embedded by design, contributing to robust verification of critical activities, agents,
and data flows.

26
27
28

Together, these goals ensure that HSML delivers not just a data model, but a governable, interoperable, and
trustworthy foundation for the Spatial Web—capable of unifying physical, digital, and agentic domains into
a shared semantic fabric.

10

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Contents

2
3
4
5
6
7

1. Overview..................................................................................................................................................................... 19
1.1. HSML Modeling Paradigm............................................................................................................................. 19
1.2. Design Principles for HSML Implementation............................................................................................. 20
1.3. Core Model and Modules................................................................................................................................ 21
1.4. Extension Mechanisms..................................................................................................................................... 22
1.5. Word usage......................................................................................................................................................... 23

8

2. Normative references................................................................................................................................................ 23

9

4. Abstract........................................................................................................................................................................ 24

10
11
12

5. Terms............................................................................................................................................................................ 25
5.1. Definitions.......................................................................................................................................................... 25
5.2. Acronyms and abbreviations...........................................................................................................................27

13
14
15
16
17
18
19

6. Conventions and Notation....................................................................................................................................... 27
6.1. URI and IRI Conventions............................................................................................................................... 27
6.1.1. HSML Normative Namespaces..............................................................................................................27
6.1.2. External Referenced Namespaces.......................................................................................................... 28
6.2. RDF/Turtle Syntax Conventions.................................................................................................................... 28
6.3. JSON-LD Syntax Conventions....................................................................................................................... 29
6.4. SHACL Shape Syntax and Annotations....................................................................................................... 30

20
21
22

7. The HSML Modeling Paradigm: Holons, Semantics, and Extensions............................................................ 30
7.1. The Imperative for Semantics and the Semantic Web Stack.................................................................... 31
7.2. Limitations of Existing Standards in Accommodating Holonic Graphs Out of the Box...................... 31

23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38

8. HSML Core Module................................................................................................................................................. 34
8.1. Architectural Principles and Design Rationale............................................................................................ 34
8.1.1. The Universal Foundation: core:Entity................................................................................................ 34
8.1.2. Decentralized Identity: The Spatial Web Identifier (SWID).............................................................34
8.1.3. Contextual Scaffolding: core:Domain................................................................................................... 35
8.1.4. Minimal Ontological Commitment and Pragmatic Reuse.................................................................36
8.2. Normative Classes.............................................................................................................................................36
8.2.1. Class: core:Entity...................................................................................................................................... 36
8.2.2. Class: core:Domain.................................................................................................................................. 39
8.2.3. Class: core:Concept.................................................................................................................................. 41
8.2.4. Class: core:Thing...................................................................................................................................... 42
8.2.5. Class: core:SpatialFeature....................................................................................................................... 42
8.2.6. Class: core:Role........................................................................................................................................ 43
8.2.7. Class: core:Participation.......................................................................................................................... 45
8.2.8. Class: core:Condition............................................................................................................................... 47
8.2.9. Class: core:SHACLCondition................................................................................................................ 47

39
40
41
42
43

9. HSML Activity Module........................................................................................................................................... 49
9.1. Architectural Principles and Design Rationale............................................................................................ 49
9.1.1. The Schema/Instance Pattern: Enabling Scalable Governance........................................................ 49
9.1.2. The Parameter/Binding Pattern: Achieving Contextual Reusability............................................... 49
9.1.3. The Composite Model: First-Class Workflows................................................................................... 50

11

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19

9.1.4. The Generic Condition Model: Future-Proofing Logic..................................................................... 50
9.1.5. Domain-Specific Governance of Referenced Schemas..................................................................... 50
9.2. Modeling of Composite Activities.................................................................................................................51
9.2.1. The Composite Pattern: ActivityStep and DataLink.......................................................................... 51
9.2.2. Control Flow Constructs......................................................................................................................... 51
9.2.3. Interface Wiring and Data Flow Management.................................................................................... 51
9.3. Execution and Traceability Model................................................................................................................. 52
9.3.1. Instantiation of Composite Activities................................................................................................... 52
9.3.2. Normative Requirements for Traceability Links................................................................................ 52
9.4. Normative Classes.............................................................................................................................................52
9.4.1. Summary of Normative Classes............................................................................................................ 53
9.4.2. Class: act:Activity..................................................................................................................................... 53
9.4.3. Class: act:ActivitySchema....................................................................................................................... 57
9.4.4. Class: act:AtomicActivitySchema......................................................................................................... 60
9.4.5. Class: act:CompositeActivitySchema................................................................................................... 60
9.4.6. Class: act:ActivityStep............................................................................................................................. 63
9.4.7. Class: act:DataLink.................................................................................................................................. 66
9.4.8. Class: act:Variable.................................................................................................................................... 69
9.4.9. Class: act:VariableBinding...................................................................................................................... 72

20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38

10. HSML Governance Module.................................................................................................................................. 74
10.1. Architectural Principles and Design Rationale......................................................................................... 74
10.1.1. The Norm/Policy Separation: Atomic Rules vs Governance Bundles.......................................... 74
10.1.2. Credentials and Credential Profiles.....................................................................................................74
10.1.3. Deontic Modality and Executable Conditions.................................................................................. 74
10.1.4. Time-Bound Governance...................................................................................................................... 74
10.1.5. Contracts as the Universal Trigger......................................................................................................75
10.1.6. Trust Substrate and Evidence............................................................................................................... 75
10.1.7. Evaluation Flow...................................................................................................................................... 75
10.1.8. Interoperability and Extensibility........................................................................................................ 75
10.1.9. Security and Privacy.............................................................................................................................. 75
10.2. Normative Classes.......................................................................................................................................... 76
10.2.1. Summary of Governance Module Classes......................................................................................... 76
10.2.2. Class: gov:Contract................................................................................................................................ 76
10.2.3. Class: gov:Credential............................................................................................................................. 79
10.2.4. Class: gov:CredentialProfile................................................................................................................. 81
10.2.5. Class: gov:DeonticModality................................................................................................................. 85
10.2.6. Class: gov:Norm..................................................................................................................................... 86
10.2.7. Class: gov:Policy.................................................................................................................................... 87

39
40
41
42
43
44
45
46
47
48
49

11. HSML Agent Module............................................................................................................................................. 93
11.1. Architectural Principles and Design Rationale.......................................................................................... 93
11.1.1. The Goal-Directed Actor Pattern: Defining Purpose....................................................................... 93
11.1.2. The Capability Model: Separating Potential from Action.............................................................. 94
11.1.3. The Specialization Pattern: Tailoring Agents and Goals................................................................. 94
11.2. Normative Classes.......................................................................................................................................... 95
11.2.1. Summary of Normative Classes.......................................................................................................... 95
11.2.2. Class: agt:Agent...................................................................................................................................... 95
11.2.3. Class: agt:Person..................................................................................................................................... 97
11.2.4. Class: hsml:Organization....................................................................................................................... 99
11.2.5. Class: agt:Goal........................................................................................................................................ 99

50
51

12. HSML Communication Module.........................................................................................................................100
12.1. Architectural Principles and Design Rationale....................................................................................... 101

12

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3
4
5
6
7
8
9
10
11

12.1.1. Channels as Ephemeral Interaction Contexts.................................................................................. 101
12.1.2. Messages as Optional Semantic Projections................................................................................... 101
12.1.3. Separation of Concerns: HSTP vs HSML....................................................................................... 101
12.1.4. Activity-Linked Communication....................................................................................................... 102
12.1.5. Governance Delegation....................................................................................................................... 102
12.1.6. Interoperability and Extensibility...................................................................................................... 102
12.1.7. Summary................................................................................................................................................ 102
12.2. Normative Classes........................................................................................................................................ 102
12.2.1. Summary of Communication Module Classes............................................................................... 103
12.2.2. Class: comm:Channel.......................................................................................................................... 103
12.2.3. Class: comm:Message......................................................................................................................... 106

12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30

13. HSML Hyperspace Module: Normative Specification.................................................................................. 111
13.1. Introduction.................................................................................................................................................... 111
13.1.1. Navigation by Mapping...................................................................................................................... 112
13.1.2. Design Decision: Paths with Literal Elements (Generalized)...................................................... 112
13.1.3. Separation of Domain and Hyperspace............................................................................................ 113
13.1.4. Universal Operations........................................................................................................................... 113
13.1.5. Modularity and Namespaces.............................................................................................................. 114
13.1.6. Hyperspace of Hyperspaces............................................................................................................... 114
13.1.7. Time as an Extension.......................................................................................................................... 114
13.1.8. Identity and Governance..................................................................................................................... 115
13.1.9. Validation Through Profiles............................................................................................................... 115
13.2. Normative Classes........................................................................................................................................ 115
13.2.1. Summary of Hyperspace Module Classes....................................................................................... 115
13.2.2. Class: hspace:Hyperspace................................................................................................................... 115
13.2.3. Element-Class Properties.................................................................................................................... 118
13.2.4. Path-Class Properties........................................................................................................................... 119
13.2.5. Class: hspace:Path................................................................................................................................ 122
13.2.6. Class: hspace:Operation...................................................................................................................... 125
13.2.7. Class: hspace:HyperspaceOfHyperspace......................................................................................... 129

31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48

14. HSML TopologicalSpace SubModule...............................................................................................................131
14.1. Introduction.................................................................................................................................................... 131
14.2. Architecture and Design Rationale........................................................................................................... 131
14.2.1. Core Principle....................................................................................................................................... 131
14.2.2. Subclassing Strategy............................................................................................................................ 131
14.2.3. Elements and Paths.............................................................................................................................. 131
14.2.4. Neighborhoods and Open Sets.......................................................................................................... 132
14.2.5. Regions and Boundaries..................................................................................................................... 132
14.2.6. Generic Operations...............................................................................................................................132
14.2.7. Separation of Concerns....................................................................................................................... 132
14.2.8. Examples of Spaces............................................................................................................................. 133
14.3. Metric Space Submodule............................................................................................................................ 133
14.3.1. Normative Classes................................................................................................................................ 134
14.3.2. Class: metric:MetricSpace.................................................................................................................. 134
14.3.3. Class: metric:Metric............................................................................................................................. 136
14.3.4. Class: metric:Measure (Optional)......................................................................................................143
14.3.5. Class: metric:Aggregator.................................................................................................................... 146
14.3.6. Class: metric:Polarity...........................................................................................................................148

49
50

15. HSML VectorSpace SubModule........................................................................................................................ 149
15.1. Introduction.................................................................................................................................................... 149

13

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3
4
5

16. HSML Extensions and Profiles.......................................................................................................................... 150
16.1. Subclass from the Core Model.................................................................................................................. 150
16.2. Maximize Reuse of Existing Ontologies..................................................................................................150
16.3. Enforce Governance and Data Quality with SHACL............................................................................ 150
16.4. Package Extensions as Profiles.................................................................................................................. 151

6

Annex A (normative) Compliance........................................................................................................................... 152

7

Annex B (normative) System Requirements.......................................................................................................... 153

8

Annex C (informative) Bibliography....................................................................................................................... 154

9

Annex D (informative) SWF Authors..................................................................................................................... 155

10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48

List of tables
Table 1—HSML Normative Namespaces .......................................................................................28
Table 2—External Referenced Namespaces ................................................................................... 28
Table 3—Summary of Core Module Classes ................................................................................. 36
Table 4—Class Definition for core:Entity ...................................................................................... 37
Table 5—Properties Summary for core:Entity ................................................................................37
Table 6—Property Definition: rdf:type ........................................................................................... 37
Table 7—Property Definition: core:swid ........................................................................................ 38
Table 8—Property Definition: schema:name .................................................................................. 38
Table 9—Property Definition: schema:description ......................................................................... 38
Table 10—Class Definition for core:Domain ................................................................................. 39
Table 11—Properties Summary for core:Domain ...........................................................................39
Table 12—Property Definition: core:hasSpace ...............................................................................40
Table 13—Property Definition: core:managedBy ...........................................................................40
Table 14—Property Definition: rdfh:partOf ................................................................................... 41
Table 15—Class Definition for core:Concept .................................................................................41
Table 16—Class Definition for core:Thing .................................................................................... 42
Table 17—Class Definition for core:SpatialFeature ....................................................................... 43
Table 18—Properties Summary for core:SpatialFeature .................................................................43
Table 19—Class Definition for core:Role ...................................................................................... 43
Table 20—Properties Summary for core:Role ................................................................................44
Table 21—Property Definition: rdf:type ......................................................................................... 44
Table 22—Property Definition: schema:name ................................................................................ 44
Table 23—Property Definition: schema:description ....................................................................... 44
Table 24—Class Definition for core:Participation ..........................................................................45
Table 25—Properties Summary for core:Participation ................................................................... 45
Table 26—Property Definition: core:hasParticipant ....................................................................... 46
Table 27—Property Definition: core:hasRole .................................................................................46
Table 28—Property Definition: schema:startTime ..........................................................................46
Table 29—Property Definition: schema:endTime ...........................................................................47
Table 30—Class Definition for core:Condition .............................................................................. 47
Table 31—Class Definition for core:SHACLCondition ................................................................. 48
Table 32—Properties Summary for core:SHACLCondition ...........................................................48
Table 33—Property Definition: core:hasShape ...............................................................................48
Table 34—Summary of HSML Activity Module Classes .............................................................. 53
Table 35—Class Definition for act:Activity ................................................................................... 54
Table 36—Properties Summary for act:Activity .............................................................................54
Table 37—Property Definition: act:activitySchema ....................................................................... 54
Table 38—Property Definition: act:performedBy ...........................................................................55

14

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54

Table 39—Property Definition: act:status .......................................................................................55
Table 40—Property Definition: act:hasBinding ..............................................................................55
Table 41—Property Definition: schema:startTime ..........................................................................56
Table 42—Property Definition: schema:endTime ...........................................................................56
Table 43—Property Definition: dct:isPartOf .................................................................................. 56
Table 44—Property Definition: act:realizedStep ............................................................................ 57
Table 45—Class Definition for ....................................................................................................... 58
Table 46—Properties Summary for ................................................................................................ 58
Table 47—Property Definition: act:hasInput .................................................................................. 58
Table 48—Property Definition: act:hasOutput ................................................................................59
Table 49—Property Definition: act:hasPrecondition ...................................................................... 59
Table 50—Property Definition: act:hasEffect ................................................................................. 59
Table 51—Class Definition for act:AtomicActivitySchema ...........................................................60
Table 52—Class Definition for act:CompositeActivitySchema ......................................................61
Table 53—Properties Summary for act:CompositeActivitySchema ............................................... 61
Table 54—Property Definition: act:hasStep ................................................................................... 61
Table 55—Property Definition: act:hasDataLink ............................................................................62
Table 56—Property Definition: act:hasOrderedSteps ..................................................................... 62
Table 57—Property Definition: act:hasChoice ............................................................................... 62
Table 58—Property Definition: act:hasUnorderedSteps ................................................................. 63
Table 59—Class Definition for act:ActivityStep ............................................................................ 63
Table 60—Properties Summary for act:ActivityStep ......................................................................64
Table 61—Property Definition: act:usesSchema ............................................................................ 64
Table 62—Property Definition: schema:name ................................................................................ 64
Table 63—Property Definition: schema:description ....................................................................... 65
Table 64—Property Definition: act:hasCondition ...........................................................................65
Table 65—Property Definition: schema:identifier .......................................................................... 65
Table 66—Class Definition for act:DataLink ................................................................................. 66
Table 67—Properties Summary for act:DataLink ...........................................................................67
Table 68—Property Definition: schema:name ................................................................................ 67
Table 69—Property Definition: schema:description ....................................................................... 67
Table 70—Property Definition: act:sourceStep .............................................................................. 68
Table 71—Property Definition: act:targetStep ................................................................................68
Table 72—Property Definition: act:sourceVariable ........................................................................ 68
Table 73—Property Definition: act:targetVariable ..........................................................................69
Table 74—Class Definition for act:Variable ................................................................................... 69
Table 75—Properties Summary for act:Variable ............................................................................ 70
Table 76—Property Definition: schema:identifier .......................................................................... 70
Table 77—Property Definition: schema:name ................................................................................ 70
Table 78—Property Definition: schema:description ....................................................................... 71
Table 79—Property Definition: act:expects .................................................................................... 71
Table 80—Property Definition: core:hasCondition .........................................................................72
Table 81—Class Definition for act:VariableBinding ...................................................................... 72
Table 82—Properties Summary for act:VariableBinding ................................................................73
Table 83—Property Definition: act:variable ................................................................................... 73
Table 84—Property Definition: rdf:value ....................................................................................... 73
Table 85—Summary of Classes Used in the HSML Governance Module ..................................... 76
Table 86—Class Definition for gov:Contract ................................................................................. 77
Table 87—Properties Summary for gov:Contract ...........................................................................77
Table 88—Property Definition: gov:isRequestedBy .......................................................................77
Table 89—Property Definition: gov:isAcceptedBy ........................................................................ 78
Table 90—Property Definition: gov:isFulfilledBy ..........................................................................78
Table 91—Property Definition: gov:contractFor ............................................................................ 78
Table 92—Property Definition: gov:contractStatus ........................................................................ 78

15

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54

Table 93—Property Definition: gov:hasParticipation ..................................................................... 79
Table 94—Class Definition for ....................................................................................................... 80
Table 95 ........................................................................................................................................... 80
Table 96—Property Definition: .......................................................................................................80
Table 97—Class Definition for gov:CredentialProfile ....................................................................81
Table 98—Properties Summary for gov:CredentialProfile ............................................................. 81
Table 99—Property Definition: gov:profileOfCredentialType ....................................................... 82
Table 100—Property Definition: gov:credentialShape ................................................................... 82
Table 101—Property Definition: core:hasCondition .......................................................................83
Table 102—Property Definition: gov:acceptableIssuer .................................................................. 83
Table 103—Property Definition: gov:trustFramework ................................................................... 83
Table 104—Property Definition: gov:statusPolicy ......................................................................... 83
Table 105—Property Definition: gov:issuedWithin ........................................................................84
Table 106—Property Definition: gov:requiresSubjectBinding ....................................................... 84
Table 107—Property Definition: gov:proofSuite ............................................................................84
Table 108—Property Definition: gov:profileVersion ......................................................................85
Table 109—Class Definition for gov:DeonticModality ..................................................................85
Table 110—Enumeration Values of gov:DeonticModality ............................................................. 86
Table 111—Class Definition for ..................................................................................................... 86
Table 112—Properties Summary for ...............................................................................................87
Table 113—Property Definition: gov:modality ...............................................................................87
Table 114—Class Definition for gov:Policy ...................................................................................88
Table 115—Properties Summary for gov:Policy ............................................................................ 88
Table 116—Property Definition: schema:description ..................................................................... 89
Table 117—Property Definition: schema:creator ............................................................................89
Table 118—Property Definition: schema:validFrom ...................................................................... 89
Table 119—Property Definition: schema:validThrough ................................................................. 90
Table 120—Property Definition: gov:appliesToActivitySchema ....................................................90
Table 121—Property Definition: gov:appliesToDomain ................................................................ 90
Table 122—Property Definition: gov:appliesToActorClass ............................................................90
Table 123—Property Definition: gov:hasNorm .............................................................................. 91
Table 124—Property Definition: core:hasCondition .......................................................................91
Table 125—Property Definition: gov:hasCredentialRequirement .................................................. 91
Table 126—Property Definition: gov:precedence ...........................................................................92
Table 127—Property Definition: gov:policyStatus ......................................................................... 92
Table 128—Property Definition: schema:version ........................................................................... 92
Table 129—Property Definition: schema:spatialCoverage ............................................................. 93
Table 130—Property Definition: gov:relatedPolicy ........................................................................93
Table 131—Summary of HSML Agent Module Classes ............................................................... 95
Table 132—Class Definition for agt:Agent .................................................................................... 95
Table 133—Properties Summary for agt:Agent ..............................................................................96
Table 134—Property Definition: agt:hasGoal .................................................................................96
Table 135—Property Definition: agt:canPerform ........................................................................... 96
Table 136—Class Definition for agt:Person ................................................................................... 97
Table 137—Properties Summary for agt:Person .............................................................................97
Table 138—Property Definition: schema:givenName .................................................................... 98
Table 139—Property Definition: schema:familyName ...................................................................98
Table 140—Property Definition: schema:email ..............................................................................98
Table 141—Class Definition for hsml:Organization .......................................................................99
Table 142—Class Definition for agt:Goal ...................................................................................... 99
Table 143—Property Definition: schema:description ................................................................... 100
Table 144—Property Definition: agt:hasSubGoal .........................................................................100
Table 145—Summary of HSML Communication Module Classes ..............................................103
Table 146—Class Definition for comm:Channel ..........................................................................103

16

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54

Table 147—Properties Summary for comm:Channel ................................................................... 104
Table 148—Property Definition: core:hasParticipant ................................................................... 104
Table 149—Property Definition: comm:forActivity ..................................................................... 104
Table 150—Property Definition: comm:hasSubChannel .............................................................. 105
Table 151—Property Definition: comm:subChannelOf ................................................................105
Table 152—Class Definition for comm:Message ......................................................................... 106
Table 153—Properties Summary for comm:Message .................................................................. 107
Table 154—Property Definition: comm:inChannel ...................................................................... 107
Table 155—Property Definition: comm:aboutActivity .................................................................108
Table 156—Property Definition: comm:sender ............................................................................ 108
Table 157—Property Definition: comm:recipient .........................................................................108
Table 158—Property Definition: comm:mediaType ..................................................................... 108
Table 159—Property Definition: comm:contentSchema .............................................................. 109
Table 160—Property Definition: comm:content ........................................................................... 109
Table 161—Property Definition: comm:contentHash ...................................................................109
Table 162—Property Definition: comm:sequenceNumber ........................................................... 110
Table 163—Property Definition: comm:correlatesWith ............................................................... 110
Table 164—Property Definition: prov:generatedAtTime ..............................................................110
Table 165—Property Definition: prov:wasAttributedTo ...............................................................111
Table 166—Summary of Hyperspace Module Classes .................................................................115
Table 167—Class Definition for hspace:Hyperspace ................................................................... 116
Table 168—Properties Summary for hspace:Hyperspace .............................................................116
Table 169—Property Definition: ...................................................................................................116
Table 170—Property Definition: hspace:hasElementType ........................................................... 117
Table 171—Property Definition: hspace:hasArrowType .............................................................. 117
Table 172—Property Definition: hspace:hasPathType ..................................................................117
Table 173—Property Definition: hspace:arrowProperty ...............................................................118
Table 174—Property Definition: hspace:hasOperation .................................................................118
Table 175—Properties Summary for Element-Class .................................................................... 118
Table 176—Property Definition: hspace:elementValue ................................................................ 118
Table 177—Properties Summary for Path-Class .......................................................................... 119
Table 178—Property Definition: hspace:startsAt ......................................................................... 119
Table 179—Property Definition: hspace:endsAt .......................................................................... 120
Table 180—Property Definition: hspace:pathStep ........................................................................120
Table 181—Property Definition: hspace:onPath ...........................................................................120
Table 182—Property Definition: hspace:startsAtValue ................................................................ 120
Table 183—Property Definition: hspace:endsAtValue ................................................................. 121
Table 184—Property Definition: hspace:stepList ......................................................................... 121
Table 185—Property Definition: hspace:pathValue ......................................................................121
Table 186—Class Definition for hspace:Path ............................................................................... 122
Table 187—Property Definitions for hspace:Path ........................................................................ 122
Table 188—Property Definition: hspace:startsAt ......................................................................... 122
Table 189—Property Definition: hspace:endsAt .......................................................................... 123
Table 190—Property Definition: hspace:pathStep ........................................................................123
Table 191—Property Definition: hspace:onPath ...........................................................................123
Table 192—Property Definition: hspace:startsAtValue ................................................................ 124
Table 193—Property Definition: hspace:endsAtValue ................................................................. 124
Table 194—Property Definition: hspace:stepList ......................................................................... 124
Table 195—Property Definition: hspace:pathValue ......................................................................124
Table 196—Class Definition for hspace:Operation ...................................................................... 125
Table 197—Property Definitions for hspace:Operation ................................................................125
Table 198—Property Definition: rdf:type ..................................................................................... 126
Table 199—Property Definition: hspace:usesArrowProperty ....................................................... 126
Table 200—Property Definition: hspace:usesArrowClass ............................................................ 126

17

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50

Table 201—Property Definition: hspace:usesAnnotationProperty ................................................127
Table 202—Property Definition: hspace:returnsPathClass ........................................................... 127
Table 203—Property Definition: hspace:returnsValueType ..........................................................127
Table 204—Property Definition: hspace:parameterShape ............................................................ 128
Table 205—Property Definition: hspace:implementation ............................................................. 128
Table 206—Class Definition for hspace:HyperspaceOfHyperspace .............................................129
Table 207—Class Summary for Metric Module ...........................................................................134
Table 208—Class Definition for metric:MetricSpace ...................................................................134
Table 209—Properties Summary for metric:MetricSpace ............................................................ 135
Table 210—Property Definition: metric:hasMetric .......................................................................135
Table 211—Property Definition: metric:defaultMetric ................................................................. 135
Table 212—Property Definition: metric:weightProperty .............................................................. 135
Table 213—Class Definition for metric:Metric ............................................................................ 137
Table 214—Properties Summary for metric:Metric ......................................................................138
Table 215—Property Definition: metric:kind ............................................................................... 139
Table 216—Property Definition: metric:polarity .......................................................................... 139
Table 217—Property Definition: metric:onType ...........................................................................139
Table 218—Property Definition: metric:operandProperty ............................................................ 140
Table 219—Property Definition: metric:valueType ...................................................................... 140
Table 220—Property Definition: metric:unit ................................................................................ 140
Table 221—Property Definition: metric:scaleKind .......................................................................140
Table 222—Property Definition: metric:rangeMin ....................................................................... 141
Table 223—Property Definition: metric:rangeMax ...................................................................... 141
Table 224—Property Definition: metric:function ......................................................................... 141
Table 225—Property Definition: metric:functionVersion ............................................................. 141
Table 226—Property Definition: metric:aggregator ..................................................................... 141
Table 227—Property Definition: metric:edgeWeightProperty ...................................................... 142
Table 228—Property Definition: metric:monotoneTransform ...................................................... 142
Table 229—Property Definition: metric:symmetric ......................................................................142
Table 230—Property Definition: metric:identityOfIndiscernibles ................................................ 142
Table 231—Property Definition: metric:triangleInequality .......................................................... 143
Table 232—Property Definition: metric:nonNegative .................................................................. 143
Table 233—Class Definition for metric:Measure ......................................................................... 144
Table 234—Properties Summary for metric:Measure ...................................................................144
Table 235—Property Definition: metric:usingMetric ................................................................... 145
Table 236—Property Definition: metric:from ...............................................................................145
Table 237—Property Definition: metric:to ................................................................................... 145
Table 238—Property Definition: metric:value ..............................................................................146
Table 239—Property Definition: metric:unit ................................................................................ 146
Table 240—Property Definition: metric:confidence ..................................................................... 146
Table 241—Class Definition for metric:Aggregator .....................................................................146
Table 242—Property Summary for metric:Aggregator .................................................................147
Table 243—Property Definition: metric:op .................................................................................. 147
Table 244—Property Definition: metric:identity .......................................................................... 147
Table 245—Property Definition: metric:commutative ..................................................................147
Table 246—Property Definition: metric:parameter .......................................................................148
Table 247—Class Definition for metric:Polarity .......................................................................... 148
Table 248—Instances for metric:Polarity ..................................................................................... 149
Table 249—Instance Definition: metric:Distance ......................................................................... 149
Table 250—Instance Definition: metric:Similarity ....................................................................... 149

51
52
53

List of figures
Figure 1—Hyperspace and Domain in the Spatial Web ................................................................... 9
Figure 2—HSML Core Model and Modules with Hyperspace Submodules ..................................22

18

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

1. Overview

2
3
4
5
6

This document provides a high-level overview of the Hyperspace Modeling Language (HSML) specification.
HSML is the semantic foundation of the Spatial Web, enabling consistent representation of entities,
domains, activities, spaces, and governance across distributed systems. It describes the modeling paradigm,
guiding principles, modular structure, and formal extension mechanisms needed to support diverse domains
while ensuring interoperability and compliance with IEEE P2874.

7

1.1. HSML Modeling Paradigm

8
9

The Spatial Web is founded on eight interdependent dimensions that, together, distinguish it from the
conventional Semantic Web. HSML integrates these dimensions into a coherent modeling paradigm.

10
11
12
13
14

–

Entities: The fundamental units of description in the Spatial Web. Every entity is globally identifiable
by a Spatial Web Identifier (SWID) that conforms to W3C Decentralized Identifier (DID) syntax.
Unlike Linked Data URIs, which depend on centralized DNS resolution, SWIDs are cryptographically
verifiable, self-sovereign, and portable across networks. This guarantees persistence of reference and
enables interoperable interactions across distributed systems.

15
16
17
18
19
20

–

Domains: A specialized kind of entity that functions as a holon — a self-contained whole that is also part
of larger systems. A domain defines a “sphere of knowledge, influence, or activity” in which governance
rules apply. Examples include agents, persons, organizations, places, and things. Domains carry identity,
enforce norms, and govern activities within their scope. Domains naturally form holarchies, where they
can be linked through ad hoc memberships, component-of relations, or aggregation into more complex
structures.

21
22
23
24
25

–

Hyperspace: The structural layer that defines how entities in a domain relate spatially or structurally.
Hyperspaces generalize the notion of “space” beyond geography, encompassing topological, metric,
vector, cellular, or graph-based structures. A domain may be bound to one or more hyperspaces,
which define adjacency, connectivity, and distance among its entities. This allows HSML to uniformly
represent physical, logical, and abstract spatial structures.

26
27
28
29
30

–

Semantics: Every element and relationship in HSML has a well-defined, machine-readable meaning. By
adopting RDF, OWL, and SHACL, HSML ensures that data is not just syntactically structured but also
contextually understood. This enables reasoning, validation, and interoperability across heterogeneous
systems. Semantics provide the interpretive layer that makes entities discoverable, explainable, and
governable.

31
32
33
34
35

–

Distributed Graph Structure: The Spatial Web is organized as a distributed semantic hypergraph.
Entities and domains form the nodes, and their relationships form semantically typed edges (e.g.,
isLocatedAt, isOwnedBy, performsActivity). This distributed graph spans multiple domains and
infrastructures, enabling global interconnection without centralized control. The hypergraph model
supports complex, multi-dimensional queries and compositional reasoning across contexts.

36
37
38
39
40
41

–

Identity and Trust: Trust is not an external service but intrinsic to the model. Every entity’s
SWID is a DID, which anchors it in a decentralized identity framework. Verifiable Credentials
(VCs) provide attestations about entities or domains, while Zero-Knowledge Proofs (ZKPs) allow
selective disclosure of credentials for privacy-preserving validation. This creates a built-in trust layer,
ensuring authentication, authorization, and provenance are verifiable across domains without reliance
on centralized authorities.

42
43
44

–

Activities: Activities are first-class entities that capture dynamic processes and state changes. They
can be defined abstractly as schemas (with pre- and post-conditions) or realized as specific instances
with execution states. Activities link agents, tools, and things, providing the means by which goals

19

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

are pursued and domains interact. Modeling activities explicitly makes the Spatial Web executable,
supporting workflows, coordination, and monitoring.

3
4
5
6
7

–

8

1.2. Design Principles for HSML Implementation

9
10
11

The implementation of HSML is guided by design principles that ensure the specification is robust, adaptable,
and widely reusable. These principles extend the modeling paradigm into practical rules for ontology
engineering and system interoperability.

12
13
14

–

Composability: HSML models are built from smaller, reusable units. Domains, activities, and
hyperspaces are defined as modular components that can be assembled into larger systems. This allows
complex applications to be constructed dynamically from standardized parts without redundancy.

15
16
17

–

Interoperability: HSML provides a shared semantic layer that ensures systems developed by different
organizations can interact without ambiguity. Interoperability extends beyond syntax to include identity,
provenance, and trust by binding every entity to a SWID/DID.

18
19
20

–

Leverage Existing Standards: HSML reuses existing standards wherever possible (RDF, OWL,
SHACL, W3C DID/VC, GeoSPARQL, WoT, SAREF). By aligning with mature specifications, HSML
avoids reinvention, accelerates adoption, and maintains compatibility with broader ecosystems.

21
22
23
24

–

Extensibility: HSML anticipates evolving needs. Formal mechanisms such as profiles, custom
schemas, and module extensions allow new data types, relationships, and governance models to be
introduced without breaking backward compatibility. This ensures adaptability across industries and
use cases.

25
26
27
28
29

–

Modularity and Minimal Ontological Commitment: HSML is structured into independent
modules, each addressing a specific functional concern (e.g., Agents, Activities, Hyperspaces,
Channels, Governance). Each module makes only the minimal ontological commitments necessary for
interoperability, avoiding prescriptive domain-specific assumptions. This maximizes flexibility, lowers
barriers to adoption, and supports plug-and-play reusability.

30
31
32

–

Governance by Design: Governance is intrinsic to the model, not an external layer. Domains can
declare rules, norms, contracts, and policies as part of their identity and scope. This ensures compliance,
accountability, and fairness are enforceable at the semantic level.

33
34
35
36

–

Decentralized Trust by Design: Trust is anchored in decentralized identifiers (DIDs), verifiable
credentials (VCs), and zero-knowledge proofs (ZKPs). This creates a built-in trust fabric where identity,
authentication, and authorization are portable and verifiable across domains, without reliance on
centralized authorities.

37
38
39

–

Holonic Organization: Domains act as holons, enabling both autonomy and integration. Holarchies
allow domains to be nested or linked in multiple ways — through membership, composition, or
aggregation — ensuring scalability and resilience in distributed environments.

40
41
42

–

Separation of Concerns: HSML distinguishes clearly between entities (what exists), hyperspaces
(how things relate), activities (what happens), and governance (how things are regulated). This
modularity ensures each dimension can evolve independently while remaining semantically aligned.

Governance: The Spatial Web is not only technical but also social and ethical. Governance encompasses
the rules, norms, contracts, and policies that domains declare and enforce. Governance by design ensures
that interactions are not merely possible but accountable, lawful, and ethical. HSML provides formal
hooks for embedding governance into domains, so that compliance, trust, and fairness are enforced
natively rather than retrofitted.

20

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3

–

Validation and Assurance: HSML employs SHACL shapes and OWL constraints to enforce structural
and semantic consistency. Validation is a first-class concern, guaranteeing that data exchanged across
domains is coherent, trustworthy, and policy-compliant.

4
5
6
7

–

Explainability and Reasoning: HSML ensures that all relationships are explicit and machineinterpretable, enabling semantic reasoning and explainable AI. Agents and systems can not only act
but also justify their actions against declared norms, goals, and rules, supporting transparency and
accountability.

8

1.3. Core Model and Modules

9
10
11
12

To manage complexity and support broad adoption, the HSML specification is organized into a Core
Model and a set of modular extensions. This modular design ensures maximum reusability with minimal
ontological commitment, allowing implementers to adopt only the components relevant to their application
while maintaining interoperability across the Spatial Web.

13
14

–

Core Model: The Core Model defines the most fundamental and universal constructs of HSML. It
establishes:

15
16

–

Entity – the universal superclass for all things in the Spatial Web, each identified by a Spatial
Web Identifier (SWID/DID).

17
18

–

Domain – a specialized kind of entity functioning as a holon, encapsulating identity, governance,
and scope.

19
20
21

–

Foundational relationships – common properties for identity, membership, composition, and
linkage across entities and domains. The Core Model is the semantic foundation upon which all
other modules are built.

22
23
24

–

Modules: Building on the Core Model, HSML defines a set of modules that introduce specialized
constructs for particular functional areas. Each module adds only the minimum commitments necessary
to support its scope, ensuring extensibility and reuse:

25
26

–

Agent Module – defines persons, organizations, and autonomous systems as domains with agency,
goals, and capabilities.

27
28

–

Activity Module – defines structured processes, schemas, instances, and execution lifecycles that
domains can perform.

29
30
31

–

Hyperspace Module – defines the spatial and structural contexts where entities relate. – The
Hyperspace Module is itself composed of submodules for different space types: Topological
Space, Metric Space, Vector Space, Cellular Space, Graph Space, and Datatype Space.

32
33
34
35
36
37

–

Communication Module – defines Channels as the semantic construct for communication
and coordination. – A Channel is a stream of HSML entities bound to a specific Activity,
enabling message exchange, data flow, and coordination among participants. – Channels are
transient: unlike Domains, they do not carry persistent holonic identity but exist in relation to an
Activity context. – The module provides constructs for sub-channels, membership, and message
traceability, aligning with HSTP message envelopes for interoperable communication.

38
39

–

Governance Module – defines credentials, contracts, norms, and policies that domains declare
and enforce.

40
41
42

This modular architecture enables plug-and-play deployment: implementers can select the subset of modules
required for their application, while remaining compatible with the broader HSML ecosystem and the IEEE
P2874 Spatial Web standard (see Figure 2).

21

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Figure 2—HSML Core Model and Modules with Hyperspace Submodules

2

1.4. Extension Mechanisms

3
4
5

Recognizing that no single specification can anticipate all future needs, HSML provides formal mechanisms
for extension. These ensure that the language can evolve and adapt to new technologies, industries, and
governance requirements without breaking compatibility with the Core Model.

6
7
8

–

Profiles: A profile is a curated collection of HSML modules, constraints, and optional extensions
tailored for a particular application or industry. Profiles act as vertical specializations while remaining
grounded in the common HSML core.

9
10

–

Example: A Smart Mobility Profile may combine the Agent, Activity, and Hyperspace modules
with a custom Transportation schema to support autonomous vehicle networks.

11
12
13
14

–

Example: A Digital Health Profile may combine the Governance module with domainspecific ontologies for medical credentials, ensuring trust and compliance. Profiles promote
interoperability by establishing shared constraints within a sector, while still ensuring crossdomain compatibility through the HSML foundation.

15
16

–

Custom Schemas: For more granular or domain-specific needs, developers may define custom schemas
by reusing Semantic Web standards:

17

–

OWL 2 for declaring new types of entities, domains, properties, and relationships.

18

–

SHACL for defining constraints, validation rules, and profiles that data instances must satisfy.

19
20
21

–

RDF-star and SHACL rules for expressing richer link types (e.g., weighted, temporal, or
probabilistic edges). These schemas can be registered, published, and shared across domains,
allowing the Spatial Web ontology to grow organically while preserving coherence.

22
23
24

–

Hyperspace Extensions: The Hyperspace Module is intentionally open-ended. In addition to its current
submodules (Topological, Metric, Vector, Cellular, Graph, and Datatype Spaces), P2874 anticipates
other space types that can be added as extensions. Examples include:

25
26

–

Probabilistic Spaces – where paths carry uncertainty or probability weights, supporting stochastic
modeling.

27
28

–

State-Machine Spaces – where points represent states and paths represent transitions, aligning
with process or workflow modeling.

29
30

–

Observation/Data-Cube Spaces – treating multi-dimensional data (e.g., sensor arrays, statistical
cubes) as hyperspaces.

31
32
33

–

Quantum or Hilbert Spaces – supporting future quantum computation or simulation domains.
New types can be introduced simply by declaring subclasses of hsml:Hyperspace, ensuring
extensibility without changes to the Core Model.

22

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3
4

–

Governance Extensions: Governance models vary across cultures and industries. HSML allows the
definition of new contract forms, policy languages, and credential profiles. For example, a financial
domain might introduce a RegulatoryComplianceProfile requiring specific verifiable credentials,
while a social domain might define an EthicsProfile for AI agent behavior.

5
6
7
8

–

Modularity and Minimal Commitment: All extensions follow the principle of minimal ontological
commitment. Modules and schemas introduce only the constructs strictly necessary for their scope,
ensuring that extensions remain lightweight, reusable, and composable. This preserves interoperability
across domains and minimizes barriers to adoption.

9
10

This extension framework ensures that HSML can evolve alongside the Spatial Web: supporting innovation
while maintaining stability, trust, and semantic coherence.

11

1.5. Word usage

12
13

The word shall indicates mandatory requirements strictly to be followed in order to conform to the standard
and from which no deviation is permitted (shall equals is required to).6 7

14
15
16

The word should indicates that among several possibilities one is recommended as particularly suitable,
without mentioning or excluding others; or that a certain course of action is preferred but not necessarily
required (should equals is recommended that).

17
18

The word may is used to indicate a course of action permissible within the limits of the standard (may equals
is permitted to).

19
20

The word can is used for statements of possibility and capability, whether material, physical, or causal (can
equals is able to).

21

2. Normative references

22

There are no normative references in this document.

23
24
25

The following referenced documents are indispensable for the application of this specification. For dated
references, only the edition cited applies. For undated references, the latest edition of the referenced document
applies.

26

Draft Standard for Spatial Web Protocol, Architecture, and Governance.

27

[W3C did-core], Decentralized Identifiers (DIDs) v1.0

28

[W3C json-ld11], A JSON-based Serialization for Linked Data

29

JSON-LD 1.1: A JSON-based Serialization for Linked Data, W3C Recommendation.

30

RDF 1.1 Concepts and Abstract Syntax, W3C Recommendation.

31

RDF 1.2 Concepts and Abstract Syntax, W3C Working Draft.

32

RDF 1.2 Turtle, W3C Working Draft.

33

RDF 1.2 Semantics, W3C Working Draft.

34

RDF-star and SPARQL-star, W3C Candidate Recommendation.

35

OWL 2 Web Ontology Language: Document Overview, W3C Recommendation.

36
37
38

The use of the word must is deprecated and cannot be used when stating mandatory requirements; must is used only to describe
unavoidable situations.
7
The use of will is deprecated and cannot be used when stating mandatory requirements; will is only used in statements of fact.
6

23

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Shapes Constraint Language (SHACL), W3C Recommendation.

2

OGC GeoSPARQL – A Geographic Query Language for RDF Data, OGC Standard.

3

Verifiable Credentials Data Model v2.0, W3C Recommendation, May 15 2025.

4

Verifiable Credential Data Integrity 1.0, W3C Recommendation, May 15 2025.

5

Controlled Identifiers v1.0, W3C Recommendation, May 15 2025.

6

Bitstring Status List v1.0, W3C Recommendation, May 15 2025.

7

Securing Verifiable Credentials using JOSE and COSE, W3C Recommendation, May 15 2025.

8

OWL-Time Ontology, W3C Recommendation.

9

Schema.org Core Vocabulary, Schema.org Community Standard.

12

Draft Standard for Spatial Web
Implementation Specification — HSML
Implementation

13

4. Abstract

14
15
16
17
18

The Hyperspace Modeling Language (HSML) Implementation Specification, a core compliance target of
IEEE P2874™ Standard for Spatial Web Protocol, Architecture, and Governance, defines a humanand machine-readable semantic modeling language and ontology for the Spatial Web. It establishes a
shared vocabulary for Entities, Domains, Agents, Activities, Credentials, Channels, Hyperspaces, and
Governance, providing a unifying framework for modeling structure, behavior, and trust.

19
20
21
22

HSML supports multiple spatial structures through the Hyperspace Module, including topological, metric,
vector, cellular, graph, and datatype spaces. These are expressed using well-defined constructs such as
points, paths, subspaces, tensor products, and functors, ensuring flexible yet precise representation of spatial
and relational contexts.

23
24
25
26
27

The specification leverages W3C Semantic Web standards (RDF 1.1/1.2, RDF-star, OWL 2, SHACL,
JSON-LD 1.1) to declare formal axioms, constraints, and validation shapes across heterogeneous
implementations. It also introduces the Hyperspace Semantic Query Language (HSQL), a query and
validation language aligned with SPARQL 1.2 and extended for hyperspace constructs, enabling advanced
reasoning over topological, metric, and vector relationships.

28
29
30

Every entity is identified by a Spatial Web Identifier (SWID) conformant with W3C DID Core, embedding
DID-compliant documents and referenceable endpoints to provide decentralized identity, provenance, and
discoverability.

10
11

24

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3
4

HSML aligns with the Hyperspatial Transaction Protocol (HSTP) for message encapsulation and activity
routing, and with the Universal Domain Graph (UDG) architecture for distributed discovery, linkage,
and state management. Together, these enable interoperable, semantically consistent interactions among
autonomous agents, digital twins, IoT devices, and distributed services.

5
6
7
8

As an Implementation Specification, HSML fulfills the compliance requirements of Annex A of IEEE P2874,
providing the foundation for cross-domain semantic interoperability, verifiable credential exchange,
governed contract execution, explainable AI, and secure, zero-trust operations within the global Spatial
Web ecosystem.

9

5. Terms

10

5.1. Definitions

11
12

Only the most HSML-specific terms, or terms fundamental to the core semantic structure and payload content,
are defined here.

13
14
15
16
17
18

Activity

A temporally-extended process defined by a set of changes an hsml:Agent can
effect. An Activity Schema provides a template with conditions, parameters, and
variables. An Activity (instance) is the execution of such a schema. Activities
are central to entity-to-entity execution and state change and may be composed
of other Activities. In HSML, Activity Schemas are expressed in RDF/OWL/
SHACL for validation and reasoning.

19
20
21

Agent

An hsml:Entity that senses and responds to its environment, maintains a model of
that environment, and performs Activities to achieve goals. Agents communicate
using Spatial Web protocols.

22
23
24
25

Channel

A Spatial Web entity (hsml:Channel) that groups a stream of HSML entities
related to an Activity in a specific context that does not itself warrant a Domain or
hierarchy. Channels support ad-hoc coordination, limited-scope data exchange,
and contextual search.

26
27
28
29

Contract

Represents contractual agreements governing transactions. A Contract typically
specifies obligations, rights, and conditions for the performance of an HSML
Activity. Contracts can be linked to negotiation or execution phases across
multiple Domains.

30
31
32

Credential

Represents verifiable claims about an Entity. HSML adopts the W3C Verifiable
Credentials model for authentication, authorization, and trust verification.
Credentials are used to validate access to protected entities, activities, or domains.

33
34
35
36
37

Domain

A central element of the Spatial Web representing any Entity with a persistent
identity. Domains are identified by Spatial Web Identifiers (SWIDs). Domains
provide a conceptual area to describe reality, declare hyperspaces, and establish
rules of interaction. Relationships between Domains are managed in the
Universal Domain Graph (UDG).

38
39
40

Domain Authority A governing authority responsible for the lifecycle and trust model of a Domain,
including resolution of its SWID Document and validation of credentials
associated with the Domain.

41
42

Entity

The base class for all Spatial Web entities (hsml:Entity). Entities with persistent
identity are modeled as Domains. All Entities must have an associated SWID.

25

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

Holon

A recursive unit of organization within the Spatial Web that is simultaneously a
whole and a part.

3
4
5
6

Hyperspace

A generalized concept of space, fundamental to the Spatial Web. HSML
defines abstract classes for specialized hyperspaces (e.g., TopologicalSpace,
MetricSpace, VectorSpace, CellularSpace) that specify relationships among
elements of a Domain.

7
8
9
10
11
12
13
14

MetricSpace

A specialization of Hyperspace (metric:MetricSpace) where relationships
between elements are determined by a defined metric (distance or similarity
function). A MetricSpace declares one or more metrics (e.g., Euclidean distance,
cosine similarity) that quantify how “close” or “similar” its elements are.
MetricSpaces support quantitative operations such as nearest-neighbor search,
clustering, threshold filtering, and path cost evaluation. They separate structural
representation (the Hyperspace itself) from the semantics of measurement
(metrics), enabling consistent and portable evaluation across implementations.

15
16
17
18

Policy

A set of constraints or rules governing the behavior of Entities, Domains,
and Activities. Defined in IEEE P2874 §6.6.7, Policies specify permissions,
prohibitions, or obligations, expressed declaratively (e.g., SHACL, OWL,
SPARQL).

19
20
21
22

Norm

A socially or organizationally defined expectation governing behavior within a
Domain or Activity. Defined in IEEE P2874, Norms complement Policies by
specifying conventions, standards, or best practices that guide interactions among
Entities.

23
24
25

SWID

Spatial Web Identifier. A unique identifier for a Domain. SWIDs conform to
the W3C Decentralized Identifier (DID) Core specification. Each SWID resolves
to a SWID Document describing endpoints, credentials, and governance.

26
27
28

Time

Represents temporal aspects within the Spatial Web. Time can be attached to
Entities, Activities, or Hyperspaces, and is aligned with OWL-Time for temporal
reasoning.

29
30
31
32
33
34
35
36
37

TopologicalSpace

A specialization of Hyperspace (topo:TopologicalSpace) where relationships
are defined by adjacency, neighborhoods, and continuity, independent of
numeric distance. TopologicalSpaces describe how elements are connected (e.g.,
graph structures, cellular complexes, networks) and which subsets are considered
“open.” They enable reasoning about connectivity, boundaries, regions, and
continuity, making them suitable for domains such as graphs, GIS geometries,
cellular automata, and process flows. HSML allows both standard classes
(e.g., Region, Boundary) and custom topology definitions by extending the
TopologicalSpace model.

38
39
40

UDG (Universal
Domain Graph)

A distributed metagraph containing relationships between all known Domains
and Entities in the Spatial Web. The UDG provides routing, discovery, and
contextual metadata.

41
42

UDG Context

Metadata about a Domain’s position in the UDG, including its SWID, known
neighbor SWIDs, and spatial or routing hints.

43
44
45

NOTE—In HSML, only the semantic entities (Activity, Domain, Agent, Channel, Contract, Credential,
Hyperspace, SWID, UDG, etc.) are normative. This section is under development and will be expanded in future
drafts.8

46

8

Notes to text, tables, and figures are for information only and do not contain requirements needed to implement the standard.

26

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

5.2. Acronyms and abbreviations

2

DID

Decentralized Identifier (referenced in SWID definition)

3

HSML

Hyperspace Modeling Language

4

HSTP

Hyperspace Transaction Protocol

5

HTTP

Hypertext Transfer Protocol

6

IETF

Internet Engineering Task Force

7

JSON-LD

JSON for Linking Data

8

OWL

Web Ontology Language

9

PDR

Preliminary Design Review (spec development phase)

10

RFC

Request for Comments

11

SHACL

Shapes Constraint Language

12

SPARQL

SPARQL Protocol and RDF Query Language

13

SWF

Spatial Web Foundation

14

SWID

Spatial Web Identifier

15

UDG

Universal Domain Graph

16

VC

Verifiable Credential

17

W3C

World Wide Web Consortium

18

6. Conventions and Notation

19

6.1. URI and IRI Conventions

20
21

This specification uses IRIs for identifying HSML modules, classes, and properties. All HSML terms are
defined under a single base namespace:

22

https://www.spatialwebfoundation.org/ns/hsml

23

Figure 3

24
25
26
27

HSML is modular: each module (Activity, Agent, Domain, Hyperspace, Policy, etc.) defines its own subnamespace under this base. This hierarchy ensures that all HSML identifiers are globally unique, discoverable,
and traceable to the Spatial Web Foundation. Submodules of Hyperspace (e.g., Metric, Topological, Vector,
Cellular) extend hspace: with their own namespaces.

28

6.1.1. HSML Normative Namespaces

29

All HSML modules share the common base namespace:

30

https://www.spatialwebfoundation.org/ns/hsml

31

Figure 4
27

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

Each module extends this base by declaring its own sub-namespace. Hyperspace modules form a hierarchy:
hyperspace is the root, and its specializations (metric, topo, vector, cell,…) extend from it.

3

Table 1—HSML Normative Namespaces

4
5
6
7
8
9
10
11
12
13
14

Prefix

Namespace IRI

Module

core
agent
act
gov
comm
hspace
metric
topo
vector
cell

https://www.spatialwebfoundation.org/ns/hsml/core#
https://www.spatialwebfoundation.org/ns/hsml/agent#
https://www.spatialwebfoundation.org/ns/hsml/activity#
https://www.spatialwebfoundation.org/ns/hsml/gov#
https://www.spatialwebfoundation.org/ns/hsml/comm#
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/topo#
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/vector#
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/cell#

HSML Core
Agent Module
Activity Module
Governance Module
Communication Module
Hyperspace Core
MetricSpace Submodule
TopologicalSpace Submodule
VectorSpace Submodule
CellularSpace Submodule

15

6.1.2. External Referenced Namespaces

16

Table 2—External Referenced Namespaces

17
18
19
20
21
22
23
24
25
26
27
28
29
30

Prefix

Namespace IRI

Source

dct
foaf
gsp
org
prov
rdf
rdfs
schema
sh
skos
owl
xsd
vc

http://purl.org/dc/terms/
http://xmlns.com/foaf/0.1/
http://www.opengis.net/ont/geosparql#
http://www.w3.org/ns/org#
http://www.w3.org/ns/prov#
http://www.w3.org/1999/02/22-rdf-syntax-ns#
http://www.w3.org/2000/01/rdf-schema#
http://schema.org/
http://www.w3.org/ns/shacl#
http://www.w3.org/2004/02/skos/core#
http://www.w3.org/2002/07/owl#
http://www.w3.org/2001/XMLSchema#
https://www.w3.org/2018/credentials#

[DCTERMS]
[FOAF]
[GeoSPARQL]
[VOCAB-ORG]
[PROV]
[RDF-SYNTAX-GRAMMAR]
[RDF-SCHEMA]
[schema-org]
[SHACL]
[SKOS-REFERENCE]
[OWL2]
[XMLSCHEMA11-2]
[VC-DATA-MODEL]

31

6.2. RDF/Turtle Syntax Conventions

32

RDF examples in this specification use Turtle syntax [TURTLE]. The following conventions apply:

33
34

–

All examples assume the namespace prefixes defined in [HSML_Normative_Namespaces] and
[External_Referenced_Namespaces].

35
36

–

If a prefix is used in an example but not explicitly declared, it SHALL be interpreted as belonging to
one of those normative tables.

37

–

Example fragments are illustrative and non-normative unless explicitly marked as normative.

38

–

Literals use standard xsd: datatypes (e.g., xsd:string, xsd:integer, xsd:dateTime).

39

–

Persistent identifiers (e.g., SWIDs) are preferred over blank nodes.

28

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

–

2

Example:

3
4
5
6

did:swd:smarthome123:activity:1 a activity:Activity ;
core:swid "did:swd:smarthome123:activity:1" ;
act:activitySchema :TurnOnLight ;
act:hasStatus "running"^^xsd:string .

Compact IRIs (CURIEs) are used when a prefix is declared.

Figure 5

7

8

6.3. JSON-LD Syntax Conventions

9

HSML entities, activities, and governance artifacts shall be serializable into JSON-LD [JSON-LD11].

10
11

For the sake of simplicity and consistency, HSML defines a single canonical JSON-LD context that covers
all modules:

12

https://www.spatialwebfoundation.org/ns/hsml/context.jsonld

Figure 6

13
14

This context performs the following functions:

15
16

–

Provides prefix mappings for all HSML modules (core, agent, activity, gov, comm, hspace, metric, topo,
vector, cell).

17
18

–

Maps each HSML class IRI and property IRI to a simplified JSON key, corresponding to the “JSON
name” column defined in the normative tables of this specification.

19
20

–

Enables JSON developers to work with compact, human-readable field names while ensuring full
semantic traceability to IRIs.

21

–

Profiles and extensions MAY extend the canonical context with additional mappings.

22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39

{
"@context": {
"core": "https://www.spatialwebfoundation.org/ns/hsml/core#",
"act": "https://www.spatialwebfoundation.org/ns/hsml/activity#",
"agent": "https://www.spatialwebfoundation.org/ns/hsml/agent#",
"schema": "http://schema.org/",
"dct": "http://purl.org/dc/terms/",
"type": "@type",
"swid": "core:swid",
"name": "schema:name",
"description": "schema:description"
"Activity": "act:Activity",
"Ongoing": "act:Ongoing",
"activitySchema": "act:activitySchema",
"hasStatus": "act:hasStatus"
....
}
}

Figure 7—Example mapping excerpt (informative)

40
41

{

29

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3
4
5
6
7
8
9
10
11

"@context": "https://www.spatialwebfoundation.org/ns/hsml/context.
jsonld",
"id": "did:swid:smarthome123:activity:1",
"@id": "did:swid:smarthome123:activity:1",
"@type": "Activity",
"swid": "did:swd:smarthome123:activity:1",
"activitySchema": "did:swd:smarthome123:schemas:TurnOnLight",
"hasStatus": "Ongoing",
"name": "Turn on light",
"description": "Switches on the living room light"
}

Figure 8—Example instance

12

13

6.4. SHACL Shape Syntax and Annotations

14

Validation in HSML is expressed using SHACL shapes [SHACL]. The following conventions apply:

15

–

Shapes are defined in Turtle syntax with the sh: namespace.

16
17

–

If prefixes appear in a SHACL example without being explicitly declared, they SHALL be interpreted
using the mappings in [HSML_Normative_Namespaces] or [External_Referenced_Namespaces].

18

–

NodeShapes target specific HSML classes (e.g., activity:Activity).

19

–

Property shapes specify expected predicates, datatypes, or cardinality constraints.

20
21

–

HSML-specific annotations (e.g., hsml:parameter, hsml:precondition) may extend SHACL for Activity
schemas.

22

–

Shapes may serve as Activity payload templates, validating inputs and outputs.

23

Example:

24
25
26
27
28
29
30
31
32

:TurnOnLightShape a sh:NodeShape ;
sh:targetClass act:Activity ;
sh:property [
sh:path act:hasStatus ;
sh:datatype xsd:string ;
sh:in (act:Planned, act:Ongoing, act:Completed`, act:Failed) ;
sh:minCount 1 ;
sh:maxCount 1 ;
] .

33

Figure 9

34

7. The HSML Modeling Paradigm: Holons, Semantics, and Extensions

35
36
37
38
39

The Hyperspace Modeling Language (HSML) is meticulously designed around a set of core entities, with a
pivotal emphasis on the “Domain” as a holonic entity, capable of containing and being contained within other
Domains, forming a holonic graph. This inherent design choice is crucial for representing the intricate and
interconnected real-world and virtual systems that comprise the Spatial Web. Within this framework, every
entity inherently exists within a Domain.

30

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

The central question then becomes: what modeling language formalisms are necessary to achieve this complex
representation, particularly given the holonic nature of Domains?

3

7.1. The Imperative for Semantics and the Semantic Web Stack

4
5
6
7
8
9
10
11

A strong semantic foundation is indispensable for HSML due to the inherent complexity and interoperability
requirements of the Spatial Web. The Spatial Web aims to create interoperable, semantically compatible
connections between network-connected hardware and software. Digital content in the Spatial Web is
designed to be respectful of governance authorities and self-sovereign identity. This necessitates a shared
understanding of meaning and context, not just between humans, but also between humans and Artificial
Intelligence (AI) systems. Semantics allow for AI systems to have explainability, by explicitly modeling their
decision-making processes, and for interoperability of models and data across organizations, networks, and
borders.

12
13
14
15

The Semantic Web stack, utilizing technologies like Resource Description Framework (RDF), Web Ontology
Language (OWL), SPARQL Protocol and RDF Query Language (SPARQL), and Shapes Constraint Language
(SHACL), is the preferred modeling language formalism for HSML over a purely Labeled Property Graph
(LPG) approach. The Semantic Web stack natively supports:

16
17
18
19

–

Ontologies (OWL): OWL provides a rich set of constructs to define classes, properties, and complex
relationships, enabling rigorous semantic modeling. This goes beyond simple key-value pairs, allowing
for the expression of transitivity, symmetry, inversions, and other logical inferences crucial for reasoning
about interconnected Domains and their behaviors.

20
21
22

–

Linked Data (RDF): RDF allows for the creation of a “web of data” where entities are identified by
URIs and described through triples. This inherently distributed nature aligns with the Spatial Web’s
decentralized vision and the Universal Domain Graph (UDG) as a distributed hypergraph.

23
24
25

–

Querying Capabilities (SPARQL): SPARQL enables complex queries over distributed RDF data,
allowing for sophisticated retrieval of information across interconnected Domains based on their
semantic relationships, not just their direct links.

26
27
28

–

Validation and Constraints (SHACL): SHACL provides a mechanism to define structural constraints
on RDF graphs. This is critical for ensuring data quality, consistency, and adherence to the defined
ontology, thereby enforcing the rules and relationships necessary for a coherent holonic graph structure.

29
30
31
32
33
34
35

While LPGs are excellent for representing graph structures, their primary strength lies in their flexible
schema and efficient traversal of direct relationships. However, they typically lack the inherent semantic
expressiveness and formal reasoning capabilities that OWL provides, which are critical for defining nuanced
relationships (like mereology for nested domains) and enforcing complex constraints needed for a governed
Spatial Web. The document emphasizes the need for a shared, linkable knowledge domain architecture and
a common language to describe interrelationships, which is precisely what the Semantic Web stack offers
through its formal semantics and established standards for knowledge representation.

36
37

7.2. Limitations of Existing Standards in Accommodating Holonic Graphs Out of
the Box

38
39
40
41
42

While the RDF model provides a flexible foundation for representing interconnected data as a graph of
triples, certain aspects of its core design present challenges when attempting to natively accommodate holonic
structures “out of the box.” The concept of a holon, being both a whole and a part simultaneously, and
possessing internal properties and governance while also participating in larger wholes, requires more nuanced
modeling than basic triples can directly offer.

31

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3

Here’s what’s missing in the foundational RDF model to fully accommodate holons, and how extensions like
RDF-star, Named Graphs, and the concept of “ad-hoc relations” (as hinted at in RDF-H) attempt to address
these gaps:

4
5
6
7
8
9
10
11
12

–

Lack of Native Holonic Representation: Many graph databases and modeling languages, including
traditional property graphs, primarily focus on explicit, pairwise relationships between nodes. While
nesting can be simulated through parent-child relationships, they often lack built-in mechanisms to
enforce the inherent properties of holons, where the whole is more than the sum of its parts, and parts
maintain a degree of autonomy within the whole. The concept of a “Domain” as a self-contained entity
that also participates as a part of a larger Domain, while retaining its own internal governance, is not a
first-class citizen in many existing models. The document describes Domains as able to contain other
Spatial Web Domains and that they are “partially or entirely within other Spatial Web Domains; fully
or semi-nested and connected geophysical locations or logical structures”.

13
14
15
16

–

Limited Semantic Expressiveness for Complex Relationships: In a pure RDF model, a relationship
(a predicate in a triple) is a simple link. It’s difficult to attach metadata or properties to the relationship
itself. For a holonic structure, the relationship between a “parent” holon and its “child” holon isn’t just
a simple hasPart link. This hasPart relationship might have properties like:

17

–

startDate (when the child became a part of the parent)

18

–

authority (which Domain Authority sanctioned this part-whole relationship)

19

–

typeOfContainment (e.g., physical, conceptual, administrative)

20

–

permissionGranted (specific permissions granted to the child within the parent’s context)

21
22
23
24
25
26

Standard RDF reification (using rdf:Statement, rdf:subject, rdf:predicate, rdf:object) is verbose and can
complicate querying. While some standards allow for typed relationships, they may not offer the rich
ontological constructs found in OWL to define the nature of these relationships (e.g., mereological relations
like hasPart or isContainedIn with their implied transitivity) or to reason over them abstractly. The document
explicitly mentions drawing on ideas from mereology (the theory of parthood relations) and order theory,
which are better supported by formal ontologies than by typical graph database schemas.

27
28
29
30

–

Bounded Contexts and Graph Partitioning: A core aspect of holons is that they represent “bounded
contexts” where internal rules and properties might apply differently than externally. While RDF allows
for arbitrary connections, it doesn’t inherently provide a mechanism to delineate distinct “sub-graphs”
that represent the internal state or perspective of a holon. This makes it challenging to:

31
32

–

Manage Scope and Identity within a Holon: How do you say that a particular triple applies only
within the context of a specific CityDomain holon, and not globally?

33
34
35

–

Enforce Internal Governance: If a BuildingDomain is a holon within a CityDomain, its internal
operations might have specific rules. RDF alone doesn’t provide direct support for these encapsulated
rule sets.

36
37
38
39
40
41

–

Focus on Specific Domains, Not Universal Interoperability: Many existing standards are highly
optimized for specific domains (e.g., geographic information systems, IoT device models). While they
provide excellent local solutions, they often struggle to achieve universal interoperability and semantic
compatibility across vastly different domains, especially when considering non-physical dimensions or
abstract concepts. The Spatial Web’s requirement for a “universal domain graph” and its extension of
“geography to hyperspace” highlights this gap.

42
43
44
45
46
47

–

Governance and Identity Models Not Inherently Integrated: Existing graph standards often separate
the data model from governance, identity, and access control mechanisms. The Spatial Web, however,
integrates concepts like Domain Authorities, verifiable credentials, and self-sovereign identity directly
into its core design, influencing how entities interact and how data is accessed and managed within
Domains. This deep integration of governance, especially polycentric governance, with the data model
is not an out-of-the-box feature of many current graph standards.

32

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3
4

–

5

How Extensions and Concepts Address These Gaps:

6
7

–

RDF-star (RDF*): RDF-star directly addresses the limitation of expressing properties about statements.
It introduces a concise syntax to assert triples *about* other triples (nested triples).

8
9
10
11
12

–

For Holons: This is invaluable for modeling holonic relationships. Instead of cumbersome reification,
one could directly state [_CityA_hsml_hasPart__BuildingB] hsml:startDate "2023-01-01"^^xsd:date .
This allows the precise capture of metadata (like creation date, governing authority, or specific
permissions) directly on the part-whole relationship between holonic Domains. It makes the model of
a holon’s internal composition much richer and more governable.

13
14

–

Named Graphs: Named Graphs extend RDF by allowing a collection of triples to be identified by a
URI (its “name” or context). This effectively partitions the RDF graph into distinct sub-graphs.

15
16
17

–

For Holons: Named Graphs are crucial for representing the “bounded contexts” of holons. Each holon
(e.g., a BuildingDomain or OrganizationDomain) could be associated with its own Named Graph. This
allows for:

18
19

–

Scoped Assertions: Triples asserted within a building’s Named Graph would pertain specifically to that
building’s internal state, personnel, or operations, without polluting the global graph.

20
21

–

Contextual Queries: Queries can be made against specific Named Graphs, enabling retrieval of
information relevant to a particular holon’s internal context.

22
23

–

Access Control: Access permissions could be managed at the Named Graph level, dictating who can
read or write triples within a specific holon’s representation, aligning with Domain Authority concepts.

24
25
26
27
28
29
30
31

–

“Ad-Hoc Relations” (drawing from RDF-H principles): In the dynamic and decentralized
environment of a holonic graph like the Spatial Web, not all relationships between entities or domains
are permanent, universally defined, or strictly dictated by a pre-existing, rigid schema. This is where the
concept of “ad-hoc relations” becomes particularly relevant. These relations are emergent, contextual,
and flexible, arising dynamically from the interactions or needs of specific entities or agents. For
instance, a temporary collaboration between two geographically distant research ConceptDomain`s
might lead to a unique "collaboratesOnProjectX" link that isn’t part of the standard `hsml:isRelatedTo
hierarchy. Holons’ autonomy and interdependence necessitate these:

32
33
34

–

Internal Self-Organization: A ProjectDomain (a holon) might dynamically create temporary
“taskDependency” relations between its internal Activity entities for a specific project phase, which are
only relevant within that ProjectDomain.

35
36
37

–

Inter-Holon Collaboration: When two distinct OrganizationDomain holons form a joint venture, they
might establish temporary jointlyManagesResource relations that exist only for the duration of that
venture.

38
39
40
41
42

–

Domain Authority Assertions: A DomainAuthority (itself a holonic Agent) might assert an
administrativeLink between two otherwise unconnected sub-domains under its governance for a
specific, temporary administrative purpose, such as a localized energy distribution optimization project
within a larger UrbanDigitalTwinDomain. This link isn’t a fundamental, ontological isChildOf relation,
but an operational one.

43

To handle “Ad-Hoc Relations” within HSML’s Semantic Web Stack:

44
45

–

Dynamic and Adaptive Relationships: The Spatial Web acknowledges that relationships can be
dynamic and adaptive. While graph databases can update relationships, the formalisms to reason about
changes in relationships or to model adaptive systems at an ontological level are more aligned with
advanced semantic web capabilities.

Dynamic Predicate Creation and Registration: New predicates (URIs for relations) could be
generated and “registered” on the fly, perhaps within a specific Domain’s context or by a Domain

33

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

Authority. This implies a lightweight mechanism for declaring the intent or scope of these new
predicates.

3
4
5
6

–

Higher-Order Logic/Reasoning (OWL & SHACL): Even if specific ad-hoc predicates are dynamic,
OWL can define broader patterns or categories for these relations (e.g., an owl:Class called hsml:
TemporaryAdministrativeLink). SHACL can then constrain the properties of these ad-hoc relations,
ensuring data quality and consistency even for emergent links.

7
8
9
10
11

–

Provenance of Relationships (RDF-star): Using RDF-star, the assertion of an “ad-hoc relation”
itself can be treated as a statement with its own metadata. This allows the Spatial Web to precisely
record who asserted this temporary relation, when, why, and for how long it is considered valid. This
provenance is critical for auditability and maintaining trust in a decentralized, dynamic environment
where relationships aren’t always static.

12
13
14
15
16

In essence, while existing graph technologies provide foundational capabilities, the unique blend of holonic
structures, multi-dimensional hyperspaces, and integrated governance within the Spatial Web necessitates a
more semantically rich and extensible modeling language formalism. The Semantic Web stack provides the
necessary expressiveness and extensibility to fully realize the vision of a truly holonic and interconnected
Spatial Web.

17

8. HSML Core Module

18

8.1. Architectural Principles and Design Rationale

19
20
21
22

This clause describes the key architectural principles that underpin the Hyperspace Modelling Language
(HSML) Core Module. This module provides the foundational concepts upon which all other HSML modules
are built. Understanding this rationale is not required for conformance but is highly recommended for a robust
and correct implementation, as it clarifies the intent behind the normative rules specified in subsequent clauses.

23

8.1.1. The Universal Foundation: core:Entity

24
25
26
27
28
29
30

The cornerstone of the HSML ontology is the core:Entity class, which serves as the universal root for
every object, agent, and concept within the Spatial Web. This abstract class embodies the principle that
everything which “is perceived, known, or inferred to exist” can be represented and managed within a single,
coherent framework. By establishing core:Entity as the ultimate superclass, the standard ensures that all
HSML-compliant software can uniformly ingest, validate, and manipulate heterogeneous constructs. This
polymorphic foundation is the key to the semantic interoperability and extensibility mandated by the IEEE
P2874 standard.

31

8.1.2. Decentralized Identity: The Spatial Web Identifier (SWID)

32
33
34

A core principle of the Spatial Web is that every core:Entity SHALL be uniquely identified by a Spatial Web
Identifier (SWID). This is enforced via the core:swid property. The modeling of this identifier is a critical
design choice.

35
36
37

The core:swid property SHALL contain a W3C Decentralized Identifier (DID) conformant URI. This value
is modeled as a literal of type xsd:anyURI, not as a link to another resource. This ensures the SWID is a
verifiable attribute of the entity.

38
39

More importantly, this design establishes a fundamental separation of concerns between the identifier for an
entity and the identifier for its description.

34

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3

core:swid (The “Thing”): This property identifies the entity itself—the person, device, or concept—
independent of any single representation or network location. It is the stable, location-agnostic anchor for
identity.

4
5

Subject IRI (The “Document”): This is the URI of the data record (e.g., an HTTP URL) that describes the
entity. An entity can have many different descriptions at different locations, each with its own subject IRI.

6
7

This distinction, which aligns with the “Cool URIs for the Semantic Web” best practice, provides several
key advantages:

8
9
10

Data Federation: A single conceptual entity, identified by one core:swid, can have multiple representations
across the web—a record in a corporate database, a profile on a social network, a state entry in a distributed
ledger. The shared SWID makes it possible to link and integrate this federated data.

11
12
13

Resilience & Flexibility: The entity’s identity persists even if specific descriptions change or become
unavailable. The core:swid provides a permanent identifier that can be resolved to discover current, valid
representations of the entity.

14
15
16

Interoperability: It allows any existing web resource (e.g., from DBPedia or a corporate dataset) to be
integrated into the Spatial Web non-invasively. By simply adding the core:swid attribute, the resource becomes
part of the Spatial Web without altering its original, native identity.

17
18

In summary, modeling the SWID as a literal-valued property provides a robust, flexible, and architecturally
sound foundation essential for building a distributed, interoperable, and resilient Spatial Web.

19

8.1.3. Contextual Scaffolding: core:Domain

20
21
22
23

The Spatial Web is not a flat collection of entities; it is a structured network of contexts. The core:Domain class
provides the formal mechanism for this structure, and its placement in the Core Module is essential. While
other modules define specific types of entities, the Core Module must provide the universal scaffolding for
all entities. core:Domain is this scaffold, providing the foundational “where” for every “what” (core:Entity).

24
25
26
27
28

Domains are conceptualized as holons—a term coined by Arthur Koestler to describe an entity that is
simultaneously a whole in and of itself, as well as a part of a larger whole. A holon is a semi-autonomous,
self-reliant unit that can handle local contingencies, yet it is also integrated into and subject to the context
of a larger system. For example, a cell is a whole, but it is also a part of an organ; the organ is a whole, but
also part of an organism.

29
30
31
32

This nested structure of Domains (as holons) forms a holarchy—a hierarchy of holons. Unlike a traditional
hierarchy based on top-down command, a holarchy emphasizes composition and interdependence. The
relationship between levels is best described as “made up of” or “making up” the next level, where the whole
exists only as an integration of its semi-independent parts.

33

This holonic model is critically important for modeling the Spatial Web for several reasons:

34
35

–

Reflects Real-World Complexity: It allows for the creation of complex, multi-level systems that mirror
natural and social structures, from biological organisms to human organizations.

36
37
38

–

Enables Polycentric Governance: It provides a robust framework for distributed governance. Each
Domain, as a holon, can maintain its own autonomy and internal rules while being an interdependent part
of a larger containing Domain. This allows for policies and logic to be scoped at the appropriate level.

39
40
41

–

Promotes Scalability and Resilience: The semi-autonomous nature of holons means they can manage
local operations and disturbances without constant instruction from higher levels, creating a more
resilient and scalable system.

42
43

By modeling Domains as holons within a holarchy, HSML provides a powerful and flexible framework for
organizing the vast, interconnected, and multi-layered contexts of the Spatial Web.

35

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

8.1.4. Minimal Ontological Commitment and Pragmatic Reuse

2
3
4
5
6

To ensure maximum flexibility and interoperability, the Core Module adheres to a principle of
minimal ontological commitment for its foundational classes. Classes like core:Thing, core:Concept, and
core:SpatialFeature are defined with only the most essential properties, establishing them as base types
without imposing a heavy, prescriptive structure. This minimalist approach allows them to serve as robust
extension points for more detailed, domain-specific standards.

7
8
9
10
11

This is complemented by the pragmatic reuse of established vocabularies. For example, core:SpatialFeature
leverages GeoSPARQL for its geometric representations (geosparql:hasGeometry), ensuring out-of-the-box
compatibility with a mature ecosystem of geospatial tools and data. Similarly, common metadata properties
are drawn from Dublin Core (dct:) and Schema.org (schema:). This strategy lowers the barrier to adoption
and enhances the integration of HSML data into the broader web of data.

12

8.2. Normative Classes

13
14
15

This clause provides the normative definitions for all class concepts within the HSML Activity Module.
Each class is detailed in a table that specifies its URI, description, JSON-LD context name, usage notes, and
relationship to other classes.

16

The namespace prefix core: refers to https://www.spatialwebfoundation.org/ns/hsml/core#.

17

Table 3—Summary of Core Module Classes

18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34

Class

Description

core:Entity
core:Domain

The abstract root class for all objects, agents, and concepts in the Spatial Web.
A foundational entity that represents a sphere of knowledge, influence, or activity,
forming the contextual scaffolding of the Spatial Web.
A type of Domain representing a location-bound or geometry-bearing element, linking
semantics to geospatial structure.
A type of Domain representing a bounded, passive item without agency that can be
acted upon or sensed.
A type of Domain representing an abstract idea or category used for classification and
knowledge organization.
An abstract class representing a logical condition that can be evaluated to be true or
false.
A concrete condition that uses a SHACL shape for validation logic.
A reusable entity that explicitly models the involvement of another entity in a specific
role within a given context.
Represents the function or position of an entity within a core:Participation, typically
defined in a controlled vocabulary.

35

8.2.1. Class: core:Entity

36
37

The class core:Entity realizes the base concept ENTITY in IEEE P2874 Section 6.6.2, defined as “that which
is perceived, known, or inferred to exist, has existed, or is anticipated to exist”.

38
39
40

As the root of the Spatial Web ontology, core:Entity provides the universal, abstract foundation upon which
all other HSML classes are built. It establishes the mandatory requirements for universal identification and
class declaration, ensuring that every object in the ecosystem is uniquely addressable and explicitly typed.

41

Key Requirements

core:SpatialFeature
core:Thing
core:Concept
core:Condition
core:SHACLCondition
core:Participation
core:Role

36

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

–

Identity: Every core:Entity SHALL possess a Spatial Web Identifier (core:swid) conformant with W3C
DID Core syntax.

3

–

Typing: Every instance SHALL declare its specific, concrete class via the rdf:type property.

4
5

–

Extensibility: The core:Entity model is designed to be subclassed to create more specialized types. It
SHALL NOT be instantiated directly.

6
7

These requirements ensure that all HSML constructs share a common, machine-readable foundation, enabling
polymorphic processing, universal identification, and semantic interoperability.

8

8.2.1.1. Class Definition

9
10
11
12
13
14
15
16
17
18
19

Table 4—Class Definition for core:Entity
RDF Class

core:Entity

Is Abstract
Definition

Yes
An ENTITY is “that which is perceived, known, or inferred to exist, has existed, or is
anticipated to exist.”
owl:Thing
core:Entity is an abstract class and SHALL NOT be instantiated directly. Only its
concrete subclasses should be instantiated.
As the root of the Spatial Web ontology, core:Entity provides a uniform, extensible
foundation for all HSML constructs, enabling universal identification and semantic
interoperability.

Subclass Of
Usage Note
Rationale

20

Table 5—Properties Summary for core:Entity

21
22
23
24
25
26
27
28
29
30

Predicate

JSON-LD
name

Description

Range

Cardinality
Requirement
Level

rdf:type

@type

rdfs:Class

1..*

Mandatory

core:swid

swid

xsd:anyURI

1..1

Mandatory

schema:name

name

xsd:string

0..1

Recommended

schema:
description

description

Declares the specific class of the
resource.
The Spatial Web Identifier for the
entity.
A short, human-readable name for
the entity.
A detailed explanation of the
entity’s purpose.

xsd:string

0..1

Optional

31

8.2.1.2. Properties

32

This section provides the detailed normative definitions for the properties of the core:Entity class.

33

8.2.1.2.1. Property: type

34
35
36
37
38
39
40

Table 6—Property Definition: rdf:type
Property
IRI
JSON name
Requirement Level
Cardinality
Domain

rdf:type
http://www.w.org/1999/02/22-rdf-syntax-ns#type
@type
Mandatory
1..*
core:Entity

37

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 6—Property Definition: rdf:type (continued)

2
3
4
5
6

Range
Definition
Usage Note

7

8.2.1.2.2. Property: swid

rdfs:Class
Declares the specific class (or classes) of which this resource is an instance.
Every entity SHALL have at least one rdf:type that specifies a concrete (nonabstract) subclass of core:Entity. Multiple types may be present, for example,
to include inferred classes.

8

Table 7—Property Definition: core:swid

9
10
11
12
13
14
15
16
17
18
19

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

20

8.2.1.2.3. Property: name

core:swid
https://www.spatialwebfoundation.org/ns/hsml/core#swid
swid
Mandatory
1..1
core:Entity
xsd:anyURI
A globally unique Spatial Web Identifier conformant with W3C DID Core
syntax.
This property provides the stable, universal identifier for the entity across all
contexts and networks.

Usage Note

21

Table 8—Property Definition: schema:name

22
23
24
25
26
27
28
29
30
31

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

32

8.2.1.2.4. Property: description

33
34
35
36
37
38
39
40
41

schema:name
https://schema.org/name
name
Recommended
0..1
core:Entity
xsd:string
A short, human-readable name for the entity.
Recommended for all entities to improve usability in user interfaces, logs, and
administrative tools. Reuses the widely adopted property from Schema.org.

Table 9—Property Definition: schema:description
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

schema:description
https://schema.org/description
description
Optional
0..1
core:Entity
xsd:string
A detailed explanation of the entity’s purpose or nature.

38

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 9—Property Definition: schema:description (continued)

2
3

Usage Note

4

8.2.2. Class: core:Domain

5
6
7

The class core:Domain realizes the DOMAIN concept, defined in the Spatial Web ontology as an ENTITY
with identity through time endowed with rights and credentials. It represents a sphere of knowledge, influence,
or ACTIVITY.

8
9
10
11
12
13

As a foundational element, core:Domain provides the structure for all entities that have a persistent identity as
their defining essence. It serves as a distinct container for people, places, things, and concepts, allowing reality
to be described from multiple perspectives and through correlated hierarchies. Domains are hierarchical in
nature, allowing for parent, child, and sibling relationships, and can be nested within one another to maintain
coherence. They form a holarchy, where each domain is a self-contained whole (a holon) that can also be a
constituent part of a larger domain.

14

–

Identity: Every core:Domain SHALL possess a Spatial Web Identifier (core:swid).

15
16

–

Typing: Every core:Domain SHALL have a domainType attribute specifying its classification (e.g.,
Geographic, Concept, Agent, etc.).

17
18

–

Authority: Every core:Domain SHALL have a Domain Authority that governs its norms, terms, and
contracts.

19
20

–

Spatial Context: A core:Domain MAY reference a HYPERSPACE to define its location, boundaries,
or paths.

21
22

–

Holonic Structure: A core:Domain MAY be part of a parent domain via a holonic (part-whole) link
to create nested and hierarchical structures.

23

8.2.2.1. Class Definition

Useful for documentation and for providing context to human users or AI
agents. Reuses the widely adopted property from Schema.org.

24
25
26
27
28
29
30
31
32
33
34
35

Table 10—Class Definition for core:Domain
RDF Class

core:Domain

Is Abstract
Definition

No
An ENTITY with identity through time endowed with rights and credentials,
representing a sphere of knowledge, influence, or ACTIVITY.
core:Entity
Domains are used to partition the Spatial Web into manageable regions. For example, a
“Metropolis Digital Twin” is a geographic Domain, while the “Regional Energy Grid”
is a concept Domain. An AGENT is also a type of Domain.
Provides a foundational, general-purpose mechanism for grouping entities. This enables
the creation of scalable, hierarchical, and nested structures necessary for contextual
awareness, governance, and decentralized administration in the Spatial Web.

Subclass Of
Usage Note

Rationale

36
37
38
39
40
41
42

Table 11—Properties Summary for core:Domain
core:hasSpace

hasSpace

Links the domain to the
Hyperspace in which it applies
or is located.

space:
Hyperspace

0..*

Optional

core:
managedBy

managedBy

Identifies the Domain Authority
credentialed to define norms and
govern the domain.

agent:Agent

1..1

Mandatory

39

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 11—Properties Summary for core:Domain (continued)

2
3
4
5
6
7
8

core:hasSpace

hasSpace

rdfh:partOf

partOf

9

8.2.2.2. Properties

10
11

This section provides the detailed normative definitions for the properties of the core:Domain class.
(Properties inherited from core:Entity such as core:swid and schema:name are not redefined here).

12

8.2.2.2.1. Property: domainType

13

8.2.2.2.2. Property: hasSpace

14

Links the domain to the
Hyperspace in which it applies
or is located.
Establishes a holonic link,
indicating this domain is a
constituent part of a parent
domain.

0..*

Optional

core:Domain

0..1

Optional

Table 12—Property Definition: core:hasSpace

15
16
17
18
19
20
21
22
23
24
25
26

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

27

8.2.2.2.3. Property: managedBy

Usage Note

28
29
30
31
32
33
34
35
36
37
38

space:
Hyperspace

core:hasSpace
https://www.spatialwebfoundation.org/ns/hsml/core#hasSpace
hasSpace
Optional
0..*
core:Domain
space:Hyperspace
Associates the domain with a HYPERSPACE, indicating the spatial boundary,
location, or context in which the domain’s rules and membership apply.
Essential for location-aware governance. For example, a geographic Domain
is implicitly or explicitly associated with a location. The HYPERSPACE can
be a geometry in Cartesian space or a range of values.

Table 13—Property Definition: core:managedBy
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

core:managedBy
https://www.spatialwebfoundation.org/ns/hsml/core#managedBy
managedBy
Mandatory
1..1
core:Domain
agent:Agent
Identifies the Domain Authority: an entity credentialed to define the norms
and terms under which contracts are created for AGENTS, ACTIVITIES, and
CREDENTIALS within that Domain.

40

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 13—Property Definition: core:managedBy (continued)

2
3
4

Usage Note

5

8.2.2.2.4. Property: partOf

Every Spatial Web Domain SHALL have a Domain Authority. The managing
agent is responsible for defining domain policies and governing the entities
and activities within it.

6

Table 14—Property Definition: rdfh:partOf

7
8
9
10
11
12
13
14
15
16
17
18

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

19

8.2.3. Class: core:Concept

20

The class core:Concept realises the CONCEPT DOMAIN type as described in IEEE P2874 § 6.3.2.1.3:

21
22

“A CONCEPT is a DOMAIN representing an abstract, non-physical entity or idea that provides semantic
context or categorization for other Entities in the Spatial Web.”

23
24
25

core:Concept is used to model abstract or symbolic constructs, classifications, or types that help structure
knowledge, rules, or ontological categories in the Spatial Web. It does not represent physical or agentic
entities, but rather supports semantic reasoning, categorization, and rule expression.

26

8.2.3.1. Class Definition

rdfh:partOf
http://purl.org/rdfh/partOf
partOf
Optional
0..1
core:Domain
core:Domain
Establishes a holonic or mereological (part-whole) link, indicating this
domain is a constituent part of a parent domain.
This property is used to create nested and hierarchical domain structures.
It allows for parent, child, and sibling relationships, enabling domains to
maintain coherence while being contained within other domains.

Usage Note

27

Table 15—Class Definition for core:Concept

28
29
30
31
32
33
34
35
36

RDF Class

core:Concept

Is Abstract
Definition

No
A core:Domain representing an abstract idea, category, or semantic construct used for
classification and knowledge organization.
core:Domain
Concepts provide the semantic scaffolding of the Spatial Web; they are not physical or
agentic entities.
Supports ontology modeling, classification, and reasoning consistent with P2874’s
Concept Domain type.

37

8.2.3.2. Properties

38
39

The core:Concept class inherits all properties from core:Domain and core:Entity. It introduces no new
properties at this level, providing a minimal base class for semantic constructs.

Subclass Of
Usage Note
Rationale

41

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

8.2.4. Class: core:Thing

2

The class core:Thing realises the THING DOMAIN type defined in IEEE P2874 § 6.3.2.1.7:

3
4

“A THING is a DOMAIN representing a bounded item without agency that can be acted upon, sensed, or
described in the Spatial Web.”

5
6
7

core:Thing represents physical or virtual entities that lack autonomous action but may be observed, measured,
manipulated, or referenced by Agents or Activities. Examples include devices, sensors, vehicles, digital files,
or other discrete objects.

8

8.2.4.1. Class Definition

9

Table 16—Class Definition for core:Thing

10
11
12
13
14
15
16
17
18
19

RDF Class

core:Thing

Is Abstract
Definition

No
A passive core:Domain representing a bounded item without agency, which may be
sensed, acted upon, or described.
core:Domain
agt:Agent
Things are passive entities; they do not possess goals or capabilities but may participate
in Activities as targets, inputs, or outputs.
Provides a formal category for all non-agentic entities in the Spatial Web, ensuring
compliance with P2874’s Domain taxonomy.

20

8.2.4.2. Properties

21
22
23

The core:Thing class inherits all properties from core:Domain and core:Entity. It introduces no new properties
at this level, providing a minimal base class that can be extended by more specific standards (such as W3C
WoT or SAREF) for detailed device modeling.

24

8.2.5. Class: core:SpatialFeature

25
26

The class core:SpatialFeature realises the SPATIAL FEATURE concept, corresponding to the GEOGRAPHIC
DOMAIN type described in IEEE P2874 § 6.3.2.1.2:

27
28
29

“A SPATIAL FEATURE is an ENTITY representing a location-bound or geometry-bearing element within a
Domain, corresponding to a GEOGRAPHIC DOMAIN type where position, extent, or spatial relationships
are essential.”

30
31
32

core:SpatialFeature represents real or abstract entities anchored in space—such as landmarks, boundaries,
sensor sites, or natural features—that are meaningful in spatial reasoning and analysis. It is the fundamental
class for binding semantic entities to geospatial structure in the Spatial Web.

33

Key Requirements

34

–

Identity: Every core:SpatialFeature SHALL possess a Spatial Web Identifier (core:swid).

35
36

–

Geometry: A core:SpatialFeature SHOULD have at least one geometric representation linked via the
geosparql:hasGeometry property.

Subclass Of
Disjoint With
Usage Note
Rationale

42

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

8.2.5.1. Class Definition

2
3
4
5
6
7
8
9
10
11
12

Table 17—Class Definition for core:SpatialFeature
RDF Class

core:SpatialFeature

Is Abstract
Definition

No
An entity that represents a location-bound or geometry-bearing element of the
GEOGRAPHIC DOMAIN type in the Spatial Web.
core:Domain
core:SpatialFeature instances link semantic entities to geospatial structures (geometry,
topology) for reasoning, mapping, or analysis.
Provides a formal mechanism to model GEOGRAPHIC DOMAIN instances (per
P2874) and bind entities to spatial coordinates, shapes, and relationships, aligning with
established geospatial standards like OGC GeoSPARQL.

Subclass Of
Usage Note
Rationale

13

Table 18—Properties Summary for core:SpatialFeature

14
15
16
17

Predicate

JSON-LD
name

Description

Range

Cardinality
Requirement
Level

geosparql:
hasGeometry

hasGeometry

Links the feature to its geometric
representation.

geosparql:
Geometry

0..*

18

8.2.6. Class: core:Role

19
20
21

The class core:Role represents a named capacity, position, or function that a bearer (e.g., person, agent, device,
or service) may hold within some context. It is a definition-level concept (the role itself), distinct from any
particular assignment or holding of that role.

22

Key Requirements

23

–

Typing: Every instance SHALL declare its class via the rdf:type property.

24
25

–

Minimal Metadata: Role definitions SHOULD provide a human-readable schema:name and MAY
include a schema:description.

26
27

–

Neutral & Standalone: core:Role SHALL NOT require any superclass from external ontologies and
SHALL remain independent of assignment-specific data (e.g., time bounds, authority, or basis).

28

8.2.6.1. Class Definition

29
30
31
32
33
34
35
36
37
38
39
40

Recommended

Table 19—Class Definition for core:Role
RDF Class

core:Role

Is Abstract
Definition

No
A named capacity, position, or function that can be held by an agent, object, or service
within a context.
owl:Thing
core:Role captures the definition of a role. Assignment-specific details (bearer, time,
authority, basis) SHOULD NOT be modeled on this class and belong in a separate
assignment pattern if needed.
Provides a lightweight, interoperable notion of “role” that can be reused across
activities, memberships, stewardship, and other Spatial Web contexts without imposing
external ontology dependencies.

Subclass Of
Usage Note

Rationale

43

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 20—Properties Summary for core:Role

2
3
4
5
6
7
8
9

Predicate

JSON-LD
name

Description

Range

Cardinality
Requirement
Level

rdf:type

@type

rdfs:Class

1..*

Mandatory

schema:name

name

xsd:string

0..1

Recommended

schema:
description

description

Declares the specific class of the
resource.
A short, human-readable name for
the role.
A human-readable explanation of
the role’s purpose or scope.

xsd:string

0..1

Optional

10

8.2.6.2. Properties

11

This section provides the detailed normative definitions for the properties of the core:Role class.

12

8.2.6.2.1. Property: type

13

Table 21—Property Definition: rdf:type

14
15
16
17
18
19
20
21
22
23

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

24

8.2.6.2.2. Property: name

25

rdf:type
http://www.w3.org/1999/02/22-rdf-syntax-ns#type
@type
Mandatory
1..*
core:Role
rdfs:Class
Declares the specific class (or classes) of which this resource is an instance.
Every role SHALL have at least one rdf:type equal to core:Role. Additional
types (e.g., domain-specific categories) MAY be included.

Table 22—Property Definition: schema:name

26
27
28
29
30
31
32
33
34
35

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

36

8.2.6.2.3. Property: description

37
38

schema:name
https://schema.org/name
name
Recommended
0..1
core:Role
xsd:string
A short, human-readable name for the role.
Recommended for UI, documentation, and discoverability. Reuses widely
adopted Schema.org semantics.

Table 23—Property Definition: schema:description
Property

schema:description

44

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 23—Property Definition: schema:description (continued)

2
3
4
5
6
7
8
9
10
11

IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

12

8.2.7. Class: core:Participation

13
14

The class core:Participation is the generic link object that models an entity’s involvement in a host resource
(e.g., a gov:Contract, ev:Event, or act:Activity). It is a reified relationship that states:

15

–

What entity is involved (via core:hasParticipant),

16

–

What role it plays (via core:hasRole), and

17

–

Optionally, the duration of the involvement (via schema:startTime and schema:endTime).

18
19
20
21

This pattern is fundamental in the Spatial Web because it provides a standardized, reusable mechanism
for describing and querying participation across heterogeneous contexts. It prevents model duplication and
ensures that agentic, legal, and procedural interactions are captured consistently—critical for maintaining
trust, accountability, and semantic precision.

22

8.2.7.1. Class Definition

https://schema.org/description
description
Optional
0..1
core:Role
xsd:string
A human-readable explanation of the role’s purpose, responsibilities, or
scope.
Useful to clarify intent and distinguish similarly named roles in catalogs and
governance artifacts.

Usage Note

23
24
25
26
27
28
29
30
31
32
33

Table 24—Class Definition for core:Participation
RDF Class

core:Participation

Is Abstract
Definition

No
A reified relationship that captures an entity’s specific involvement in a host resource,
connecting the entity and its role to the context.
owl:Thing
Host resources (like gov:Contract) SHOULD use a property such as gov:
hasParticipation to link to one or more instances of core:Participation.
Centralizes the {entity, role, time} pattern for maximum reuse. This single, robust
pattern can describe the involvement of agents, artifacts, or other entities in any
situation.

Subclass Of
Usage Note
Rationale

34
35
36
37
38
39
40
41
42

Table 25—Properties Summary for core:Participation
Predicate

JSON-LD
name

Description

Range

Cardinality
Requirement
Level

core:
hasParticipant
core:hasRole

hasParticipant

The entity playing the role.

hsml:Entity

1..1

Mandatory

hasRole

core:Role

1..1

Mandatory

schema:
startTime

startTime

The core:Role that describes the
function of the participant.
The timestamp when the
participation begins.

xsd:dateTime

0..1

Optional

45

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 25—Properties Summary for core:Participation (continued)

2
3
4
5

Predicate

6

8.2.7.2. Properties

7

This section provides the detailed normative definitions for the properties of the core:Participation class.

8

8.2.7.2.1. Property: hasParticipant

schema:
endTime

JSON-LD
name
endTime

9

Description

Range

The timestamp when the
participation ends.

xsd:dateTime

Table 26—Property Definition: core:hasParticipant

10
11
12
13
14
15
16
17
18

Property
IRI
JSON name
Requirement Level
Cardinality
Range
Definition
Usage Note

19

8.2.7.2.2. Property: hasRole

20

core:hasParticipant
https://www.spatialwebfoundation.org/ns/hsml/core#hasParticipant
hasParticipant
Mandatory
1..1
hsml:Entity
The actual resource (agent, object, etc.) that is involved in the context.
This property links the core:Participation instance to the participating entity
itself.

Table 27—Property Definition: core:hasRole

21
22
23
24
25
26
27
28
29
30

Property
IRI
JSON name
Requirement Level
Cardinality
Range
Definition

31

8.2.7.2.3. Property: startTime

core:hasRole
https://www.spatialwebfoundation.org/ns/hsml/core#hasRole
hasRole
Mandatory
1..1
core:Role
The role the participant entity fulfills within the participation (e.g., client,
sensor, certifier).
The value should be an IRI pointing to a concept in a controlled vocabulary of
roles.

Usage Note

32
33
34
35
36
37
38

Cardinality
Requirement
Level
0..1
Optional

Table 28—Property Definition: schema:startTime
Property
IRI
JSON name
Requirement Level
Cardinality
Range

schema:startTime
https://schema.org/startTime
startTime
Optional
0..1
xsd:dateTime

46

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 28—Property Definition: schema:startTime (continued)

2
3
4

Definition

5

8.2.7.2.4. Property: endTime

The specific date and time when the participation begins or becomes
effective.
Reuses the property from Schema.org for standardized temporal metadata.

Usage Note

6

Table 29—Property Definition: schema:endTime

7
8
9
10
11
12
13
14
15

Property
IRI
JSON name
Requirement Level
Cardinality
Range
Definition

16

8.2.8. Class: core:Condition

17

A core:Condition is an abstract class representing a logical condition that can be evaluated to be true or false.

18

8.2.8.1. Class Definition

schema:endTime
https://schema.org/endTime
endTime
Optional
0..1
xsd:dateTime
The specific date and time when the participation ends or is no longer
effective.
Reuses the property from Schema.org for standardized temporal metadata.

Usage Note

19

Table 30—Class Definition for core:Condition

20
21
22
23
24
25
26
27

RDF Class

core:Condition

Is Abstract
Definition
Subclass Of
Usage Note

Yes
An abstract representation of a logical condition that must be satisfied.
owl:Thing
This class is never instantiated directly. Concrete subclasses like core:SHACLCondition
must be used to provide the specific evaluation logic.
Provides a single, abstract root for all types of logical validation, ensuring that the
ontology can evolve to support new validation technologies without breaking changes.

28

8.2.9. Class: core:SHACLCondition

29
30

The class core:SHACLCondition is a concrete implementation of core:Condition that uses a SHACL shape
for validation. It provides a standardized way to express constraints on the structure and values of RDF data.

31
32
33

As a foundational element of the Generic Condition Model, core:SHACLCondition is the primary mechanism
for defining data types, cardinality, value ranges, and other structural rules for entities and variables throughout
the HSML ontology.

34

Inheritance: Every core:SHACLCondition is a subclass of core:Condition.

35
36

Shape Definition: Every core:SHACLCondition SHALL link to exactly one sh:Shape via the core:hasShape
property.

Rationale

47

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

Validation Logic: The validation of a core:SHACLCondition is performed by evaluating the associated
SHACL shape against a target RDF graph.

3

8.2.9.1. Class Definition

4
5
6
7
8
9
10
11
12
13

Table 31—Class Definition for core:SHACLCondition
RDF Class

core:SHACLCondition

Is Abstract
Definition

No
A condition defined by a SHACL shape, used to validate the structure and values of
RDF data.
core:Condition
This is the primary mechanism for defining data type, cardinality, and other structural
constraints on variables and entities.
Leverages the W3C SHACL standard for robust, standardized data validation, ensuring
interoperability and machine-checkable conformance.

Subclass Of
Usage Note
Rationale

14

Table 32—Properties Summary for core:SHACLCondition

15
16
17
18

Predicate

JSON-LD
name

Description

core:hasShape

hasShape

Links the condition to the SHACL sh:Shape
shape defining its logic.

19

8.2.9.2. Properties

20

This section provides the detailed normative definitions for the properties of the core:SHACLCondition class.

21

8.2.9.2.1. Property: hasShape

22
23
24
25
26
27
28
29
30
31
32
33

Range

Cardinality
Requirement
Level
1..1

Mandatory

Table 33—Property Definition: core:hasShape
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

core:hasShape
https://www.spatialwebfoundation.org/ns/hsml/core#hasShape
hasShape
Mandatory
1..1
core:SHACLCondition
sh:Shape
Links a core:SHACLCondition to the specific SHACL shape that defines its
validation logic.
The object of this property must be a valid SHACL shape definition. This
shape is used by validation engines to evaluate the condition.

48

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

9. HSML Activity Module

2

9.1. Architectural Principles and Design Rationale

3
4
5

This clause describes the architectural principles underlying the HSML Activity Module. These principles
are informative and not required for conformance; however, understanding them is recommended to ensure
robust and correct implementations.

6

9.1.1. The Schema/Instance Pattern: Enabling Scalable Governance

7
8

A fundamental principle of this standard is the strict separation between the definition of an activity and the
record of its execution. This separation is realized through two distinct HSML classes:

9
10

–

act:ActivitySchema — A reusable, design-time template that specifies the type of action, its required
inputs, expected outputs, and the conditions under which it is valid.

11
12

–

act:Activity — An execution-time entity representing a single, concrete, stateful instance of an act:
ActivitySchema performed by a specific agent at a specific time.

13
14
15
16
17
18

This separation is a cornerstone of governance and scalability within the Spatial Web. It enables a “trustby-reference” model where an orchestration engine can validate an action with high efficiency. Rather than
analyzing the internal logic of the action itself, the validator only needs to check whether the act:Activity
references an act:ActivitySchema from an approved registry. This decouples the high-level, infrequent work
of policy definition (approving schemas) from the high-frequency, operational work of validation (checking
activities), producing a highly scalable and secure governance framework.

19

9.1.2. The Parameter/Binding Pattern: Achieving Contextual Reusability

20
21

Complementing the schema/instance pattern is the separation of abstract parameters from their concrete
values. This is achieved through the act:Variable and act:VariableBinding classes.

22
23

–

act:Variable is used within an act:ActivitySchema to define a placeholder for an input or output (e.g.,
“target_location”), including its name, description, and constraints, but no specific value.

24
25

–

act:VariableBinding is used within an act:Activity to connect a specific act:Variable from the schema to
a concrete value (e.g., linking “target_location” to a specific address).

26
27
28
29

This design allows act:ActivitySchema definitions to be generic and broadly reusable. A single schema
for “TransferAsset” can be instantiated in thousands of different act:Activity instances, each using act:
VariableBinding to supply the concrete assets and accounts for a specific transaction. This promotes
standardization while ensuring every act:Activity is a complete, self-contained, and auditable record.

30
31
32

A key architectural decision in this pattern is how a VariableBinding references its corresponding Variable.
This model mandates the use of the Variable’s locally unique `schema:identifier (e.g., "targetLocation") rather
than its global URI. This choice is deliberate and provides two main benefits:

33
34
35
36

a)

Consistency: It establishes a single, predictable pattern across the entire Activity model. Just as act:
DataLink uses local identifiers to wire steps together within a composite schema, act:VariableBinding
uses the same mechanism to bind values at runtime. This consistency simplifies implementation and
makes the model easier to learn.

37
38

b)

Portability: It treats the ActivitySchema as a true, self-contained template. An Activity instance is
bound to the role a variable plays within the schema (its local identifier), not to a rigid, globally

49

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

unique URI. This decouples the execution record from the schema definition, allowing the schema to
be versioned or reused more flexibly without invalidating existing activity instances.

3
4
5

This approach requires the processing engine to resolve the reference by looking up the identifier within the
context of the activity’s schema. This is a standard pattern and a worthwhile trade-off for the significant gains
in consistency, portability, and developer experience.

6

9.1.3. The Composite Model: First-Class Workflows

7
8
9
10

For composite (multi-step) activities, a simple list of sub-activities is insufficient. A robust model must also
describe the sequence of steps, the flow of data between them, and the control flow logic (e.g., conditional
branches). The Activity Module addresses this by elevating the core components of a workflow to be firstclass citizens:

11
12

–

act:ActivityStep: A node in the workflow graph. It represents a discrete stage of execution and is a rich,
self-describing object.

13
14

–

act:DataLink: An edge in the workflow graph. It represents the explicit flow of data from one step’s
output to another’s input.

15
16
17

The decision to model act:ActivityStep and act:DataLink as distinct owl:Class instances, rather than simple
properties, is a cornerstone of this architecture. It makes the entire workflow—its structure, logic, and data
flow—explicit, addressable, and governable.

18
19
20
21
22
23
24
25
26
27

This design allows for sophisticated patterns: * Documentable and Addressable Steps: Each act:
ActivityStep can have a human-readable schema:name and schema:description, making the workflow selfdocumenting. It is given a simple, local schema:identifier (e.g., “validate-user”) for easy reference by act:
DataLink instances. * Conditional Control Flow: An act:ActivityStep can carry its own core:Condition. This
enables powerful, declarative control flow, such as an “if/then/else” branch, where the execution of a step
depends on the outcome of a formal condition. * Governable and Self-Describing Data Flow: Because a
act:DataLink is a first-class entity, it can be documented with its own schema:name and schema:description
(e.g., “Pass User ID to Validator”). Furthermore, metadata can be attached directly to the data transfer itself,
allowing for quality-of-service requirements (e.g., ex:maxLatency), security classifications, or even a core:
Condition to enforce a policy on the data link.

28
29

This approach transforms a simple sequence of tasks into a fully governable, introspectable, and selfdescribing graph of actions that can be validated, audited, and reused with high fidelity.

30

9.1.4. The Generic Condition Model: Future-Proofing Logic

31
32
33

The HSML architecture separates semantic intent from technical implementation. This is exemplified by the
core:Condition model, defined in the HSML Core Module and used extensively by this Activity Module for
properties like act:hasPrecondition, act:hasEffect, and for enabling conditional logic on an act:ActivityStep.

34
35
36
37
38
39

The core:Condition class is abstract; it represents the idea that a condition exists without specifying how
that condition must be evaluated. The actual evaluation logic is delegated to concrete subclasses, such as
core:SHACLCondition or core:SPARQLCondition. This architectural choice is a powerful future-proofing
mechanism. By having models reference the abstract core:Condition, the standard is not locked into any
single validation technology. New condition types can be introduced in the future without requiring breaking
changes to the core models, ensuring the long-term relevance and extensibility of the standard.

40

9.1.5. Domain-Specific Governance of Referenced Schemas

41
42

A core tenet of the Spatial Web’s architecture is that domains can apply local, context-specific governance
to universal, standardized act:ActivitySchema definitions without modifying the original schema. This is

50

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3

achieved by separating the activity’s definition from the rules governing its execution within a domain.
The primary mechanism for enforcing these domain-specific rules is the requirement of a domain-specific
CREDENTIAL.

4
5
6
7

A Domain Authority (DA) can incorporate a universal schema by reference and then configure its domain
policies to require that any agent performing the activity must present a specific credential. This model ensures
that while the schema remains a universal standard, its execution is always subject to the explicit, verifiable,
and non-negotiable rules of the domain in which it is performed.

8

9.2. Modeling of Composite Activities

9
10

This clause specifies the normative rules for constructing complex, multi-step workflows using the act:
CompositeActivitySchema class.

11

9.2.1. The Composite Pattern: ActivityStep and DataLink

12
13

A CompositeActivitySchema shall be composed of one or more act:ActivityStep instances and zero or more
act:DataLink instances.

14
15
16
17

An act:ActivityStep shall function as an addressable node within the workflow graph defined by the
composite schema. Each act:ActivityStep shall use the act:usesSchema property to reference exactly one act:
ActivitySchema that defines the logic for that step. This referenced schema may be either atomic or another
composite schema, allowing for nested workflows.

18
19
20

An act:DataLink shall function as a directed edge in the workflow graph, representing the flow of data. This
formal “wiring” is necessary for composite logic, as it makes the dependencies between steps explicit and
machine-checkable.

21

9.2.2. Control Flow Constructs

22
23
24

An act:CompositeActivitySchema shall define its internal control flow by using exactly one of the following
three properties: act:hasOrderedSteps, act:hasChoice, or act:hasUnorderedSteps. This mutual exclusivity is
normatively enforced by the sh:xone constraint in the act:CompositeActivitySchemaShape (see Annex B).

25
26
27

–

Sequence (act:hasOrderedSteps): If this property is used, its value shall be a well-formed rdf:List
where each member of the list is an act:ActivityStep. The steps shall be executed by an orchestration
engine in the strict order defined by the list.

28
29
30

–

Choice (act:hasChoice): If this property is used, it shall link to two or more act:ActivityStep instances.
These steps represent mutually exclusive execution paths. An orchestration engine shall select and
execute exactly one of the specified choice steps.

31
32
33

–

Set (act:hasUnorderedSteps): If this property is used, it shall link to one or more act:ActivityStep
instances. These steps have no prescribed execution order and may be executed in any sequence or in
parallel, subject to data dependencies defined by act:DataLink instances.

34

9.2.3. Interface Wiring and Data Flow Management

35
36
37

The act:DataLink class is used to manage the flow of data between steps and across the boundary of the
composite schema. The following normative rules apply, as enforced by the act:DataLinkInterfaceShape and
act:DataLinkTypeConsistencyShape (see Annex B).

51

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

–

Internal Wiring: To connect the output of one step to the input of another, an act:DataLink shall specify
the act:sourceStep, act:sourceVariable, act:targetStep, and act:targetVariable.

3
4
5
6

–

Input Wiring: To connect a public input of the CompositeActivitySchema to the input of an
internal step, an act:DataLink shall be created that omits the act:sourceStep property. For such a
link, the act:sourceVariable shall be a variable that is declared as an act:hasInput on the parent
CompositeActivitySchema.

7
8
9
10

–

Output Wiring: To expose the output of an internal step as a public output of the
CompositeActivitySchema, an act:DataLink shall be created that omits the act:targetStep property. For
such a link, the act:targetVariable shall be a variable that is declared as an act:hasOutput on the parent
CompositeActivitySchema.

11
12
13

–

Type Consistency: For any act:DataLink, the type constraint of the act:sourceVariable should be
compatible with the type constraint of the act:targetVariable. The act:DataLinkTypeConsistencyShape
provides a normative check for this compatibility.

14

9.3. Execution and Traceability Model

15
16

This clause specifies the normative requirements for creating a run-time trace of an executed activity. This
model ensures that a complete and auditable record of all actions is preserved.

17

9.3.1. Instantiation of Composite Activities

18
19
20
21

When an orchestration engine begins the execution of a CompositeActivitySchema, it shall first create a parent
act:Activity instance corresponding to the composite schema itself. As the engine proceeds to execute each
constituent act:ActivityStep defined within the composite, it shall create a new, distinct child act:Activity
instance for each step executed.

22

9.3.2. Normative Requirements for Traceability Links

23
24

To ensure a complete and unambiguous provenance graph, the following linking properties shall be used on
all child act:Activity instances created during the execution of a composite activity.

25
26
27

–

Compositional Link (act:subActivityOf): Every child Activity created from an ActivityStep shall be
linked to its parent composite Activity using exactly one act:subActivityOf property. This creates the
compositional hierarchy, clearly defining which actions are part of a larger workflow.

28
29
30

–

Sequential Link (act:precededBy): For workflows defined with act:hasOrderedSteps, every child
Activity (except for the first one in the sequence) shall be linked to the Activity instance of the
immediately preceding step using exactly one act:precededBy property.

31
32
33
34

The combined use of these two properties creates a comprehensive, dual-axis traceability graph. The act:
subActivityOf links provide the compositional or “part-of” hierarchy, while the act:precededBy links provide
the temporal and causal sequence. Together, they allow for the complete and unambiguous reconstruction of a
complex event, which is critical for auditing, debugging, and establishing legal or operational accountability.

35

9.4. Normative Classes

36
37
38

This clause provides the normative definitions for all class concepts within the HSML Activity Module.
Each class is detailed in a table that specifies its URI, description, JSON-LD context name, usage notes, and
relationship to other classes.

52

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

The namespace prefix act: refers to https://www.spatialwebfoundation.org/ns/hsml/activity#.

2

9.4.1. Summary of Normative Classes

3

Table 34—Summary of HSML Activity Module Classes

4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20

Class

Description

act:Activity

A concrete, stateful record of a specific action that has been, is being, or is planned to
be performed.
A reusable, design-time template that defines the logic, interface, and conditions for a
type of activity.
A specialization of act:ActivitySchema for simple, indivisible activities whose internal
logic is opaque to the model.
A specialization of act:ActivitySchema for complex workflows composed of multiple
steps and data links.
A structural node within a act:CompositeActivitySchema that represents a single step in
a workflow.
A structural entity that explicitly defines the “wiring” or flow of data between steps in a
composite workflow.
An abstract parameter placeholder within an act:ActivitySchema that defines an input
or output slot.
A concrete link within an act:Activity that connects an act:Variable to a specific value
for an execution.

21

9.4.2. Class: act:Activity

22

The class act:Activity realises the ACTIVITY concept defined in IEEE P2874 § 6.6.3:

23
24

“An ACTIVITY is an execution-time entity representing a single, concrete, stateful instance of an act:
ActivitySchema performed by a specific agent at a specific time.”

25
26
27

act:Activity is the primary entity for recording and tracking the execution of an action in the Spatial Web.
It serves as a stateful, auditable record that links the abstract act:ActivitySchema to the concrete agents and
values involved in a specific occurrence.

28

Key Requirements

29
30

–

Identity: Every act:Activity SHALL possess a Spatial Web Identifier (hsml:swid, W3C DID Corecompliant).

31
32

–

Schema Conformance: An act:Activity SHALL reference exactly one act:ActivitySchema via the act:
activitySchema property.

33
34

–

Agent Assignment: An act:Activity SHALL identify the hsml:Agent(s) responsible for its execution
via the act:performedBy property.

35
36

–

Parameter Binding: An act:Activity SHALL provide concrete values for all required inputs of its
schema using act:VariableBinding instances.

37
38

–

Lifecycle Tracking: An act:Activity SHALL have its current state tracked via the act:status property,
using the normative HSML Activity Status vocabulary.

39
40

–

Temporality: An act:Activity SHOULD record the time execution began (schema:startTime) and
concluded (schema:endTime).

41
42

–

Execution Traceability: If an act:Activity is part of a composite workflow, it SHOULD link to its
parent activity (dct:isPartOf) and the step it realized (act:realizedStep).

act:ActivitySchema
act:AtomicActivitySchema
act:
CompositeActivitySchema
act:ActivityStep
act:DataLink
act:Variable
act:VariableBinding

53

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

These requirements ensure that every executed action is a complete, self-contained, and verifiable record that
is traceable to its defining schema and responsible agent.

3

9.4.2.1. Class Definition

4
5
6
7
8
9
10
11
12
13
14

Table 35—Class Definition for act:Activity
RDF Class

act:Activity

Is Abstract
Definition

No
A concrete, stateful execution of an act:ActivitySchema. It is the record of an action
that has been, is being, or is planned to be performed.
hsml:Entity
An act:Activity instance is created for every action that is initiated via a gov:Contract. It
contains act:VariableBinding instances for all required inputs and its act:status property
tracks its lifecycle.
Provides the normative record of execution for all actions, ensuring that every event is
auditable, governable, and traceable to its formal definition and responsible parties.

Subclass Of
Usage Note

Rationale

15

Table 36—Properties Summary for act:Activity

16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37

Predicate

JSON-LD
name

Description

Range

act:
activitySchema

activitySchema

act:
1..1
ActivitySchema

Mandatory

act:
performedBy

performedBy

hsml:Agent

1..*

Mandatory

act:status

status

skos:Concept

1..1

Mandatory

act:hasBinding

hasBinding
startTime

act:
0..*
VariableBinding
xsd:dateTime
0..1

Conditional

schema:
startTime
schema:
endTime

xsd:dateTime

0..1

Recommended

dct:isPartOf

isPartOf

Links the act:Activity instance
to the act:ActivitySchema it
implements.
Identifies the hsml:Agent(s)
responsible for performing the act:
Activity.
The current lifecycle state of the
act:Activity.
Associates an act:VariableBinding
with the act:Activity.
The timestamp when the activity
execution began.
The timestamp when the activity
execution concluded (completed or
failed).
Links this activity instance to its
parent composite activity instance.
Identifies the specific act:
ActivityStep that this instance
realized.

act:Activity

0..1

Optional

act:ActivityStep 0..1

Optional

38

9.4.2.2. Properties

39

This section provides the detailed normative definitions for the properties of the act:Activity class.

40

9.4.2.2.1. Property: activitySchema

act:realizedStep realizedStep

41
42
43

endTime

Cardinality
Requirement
Level

Recommended

Table 37—Property Definition: act:activitySchema
Property
IRI

act:activitySchema
https://www.spatialwebfoundation.org/ns/hsml/activity#activitySchema

54

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 37—Property Definition: act:activitySchema (continued)

2
3
4
5
6
7
8
9

JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

10

9.4.2.2.2. Property: performedBy

11

activitySchema
Mandatory
1..1
act:Activity
act:ActivitySchema
Links an act:Activity instance to the act:ActivitySchema it implements.
This is a critical link for governance, as it allows validators to check the
activity’s conformance against its approved template.

Table 38—Property Definition: act:performedBy

12
13
14
15
16
17
18
19
20
21

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

22

9.4.2.2.3. Property: status

act:performedBy
https://www.spatialwebfoundation.org/ns/hsml/activity#performedBy
performedBy
Mandatory
1..*
act:Activity
hsml:Agent
Identifies the hsml:Agent (or agents) responsible for performing an act:
Activity.
Establishes accountability for the action’s execution and outcomes.

Usage Note

23

Table 39—Property Definition: act:status

24
25
26
27
28
29
30
31
32
33
34
35

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

36

9.4.2.2.4. Property: hasBinding

37
38
39
40
41

act:status
https://www.spatialwebfoundation.org/ns/hsml/activity#status
status
Mandatory
1..1
act:Activity
skos:Concept
The current lifecycle state of an act:Activity.
The value SHALL be an IRI from the normative HSML Activity Status
vocabulary (e.g., act:Planned, act:Ongoing, act:Completed, act:Failed).
Provides real-time tracking of the action’s progress and is used to determine
the status of the governing gov:Contract.

Table 40—Property Definition: act:hasBinding
Property
IRI
JSON name
Requirement Level

act:hasBinding
https://www.spatialwebfoundation.org/ns/hsml/activity#hasBinding
hasBinding
Conditional

55

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 40—Property Definition: act:hasBinding (continued)

2
3
4
5
6
7
8

Cardinality
Domain
Range
Definition

9

9.4.2.2.5. Property: startTime

0..*
act:Activity
act:VariableBinding
Associates an act:VariableBinding with an act:Activity, indicating that a
variable has been bound to a value.
An act:Activity should have a binding for each required input (act:hasInput)
of its schema.

Usage Note

10

Table 41—Property Definition: schema:startTime

11
12
13
14
15
16
17
18
19
20

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

21

9.4.2.2.6. Property: endTime

22

schema:startTime
https://schema.org/startTime
startTime
Recommended
0..1
act:Activity
xsd:dateTime
The specific date and time when the activity execution began.
Essential for temporal reasoning and auditing. Should be populated when the
status transitions to act:Ongoing. Reuses the property from Schema.org.

Table 42—Property Definition: schema:endTime

23
24
25
26
27
28
29
30
31
32
33
34

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

35

9.4.2.2.7. Property: isPartOf

Usage Note

36
37
38
39
40
41

schema:endTime
https://schema.org/endTime
endTime
Recommended
0..1
act:Activity
xsd:dateTime
The specific date and time when the activity execution concluded (completed
or failed).
Essential for temporal reasoning and auditing. Should be populated when the
status transitions to a terminal state (act:Completed or act:Failed). Reuses the
property from Schema.org.

Table 43—Property Definition: dct:isPartOf
Property
IRI
JSON name
Requirement Level
Cardinality

dct:isPartOf
http://purl.org/dc/terms/isPartOf
isPartOf
Optional
0..1

56

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 43—Property Definition: dct:isPartOf (continued)

2
3
4
5
6
7

Domain
Range
Definition
Usage Note

8

9.4.2.2.8. Property: realizedStep

9

act:Activity
act:Activity
Links a child activity instance to its parent composite activity instance.
Used for execution traceability in composite workflows. If populated,
the range must be an instance of an activity whose schema is an act:
CompositeActivitySchema.

Table 44—Property Definition: act:realizedStep

10
11
12
13
14
15
16
17
18
19
20

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

21

9.4.3. Class: act:ActivitySchema

22

The class act:ActivitySchema realises the ACTIVITY SCHEMA concept defined in IEEE P2874 § 6.6.3:

23
24

“An ACTIVITY SCHEMA is an ENTITY that defines the template, structure, or plan for an ACTIVITY,
specifying its preconditions, postconditions, roles, and expected outcomes.”

25
26
27

act:ActivitySchema provides the abstract, reusable blueprint for an act:Activity. It enables the consistent
modeling of repeatable processes by defining the action’s interface (inputs/outputs), its required logical state
(preconditions), and its expected results (effects).

28

Key Requirements

29
30

–

Identity: Every act:ActivitySchema SHALL possess a Spatial Web Identifier (hsml:swid, W3C DID
Core-compliant).

31
32

–

Condition Specification: An act:ActivitySchema SHOULD define its required state and results using
act:hasPrecondition and act:hasEffect.

33
34

–

Parameterization: An act:ActivitySchema SHALL declare its interface of expected parameters using
act:hasInput and act:hasOutput, which reference act:Variable instances.

35
36

These requirements ensure that activities based on schemas are machine-checkable, consistent, and reusable
in Spatial Web systems.

Usage Note

act:realizedStep
https://www.spatialwebfoundation.org/ns/hsml/activity#realizedStep
realizedStep
Optional
0..1
act:Activity
act:ActivityStep
Identifies the specific act:ActivityStep within the parent composite schema
that this activity instance realized.
Provides a precise link between the execution trace and the workflow
definition. Should be used in conjunction with dct:isPartOf.

57

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

9.4.3.1. Class Definition

2

Table 45—Class Definition for act:ActivitySchema

3
4
5
6
7
8
9
10
11
12

RDF Class

act:ActivitySchema

Is Abstract
Definition

No
A reusable, design-time template for a type of activity, defining its logic, interface
(inputs and outputs), preconditions, and effects.
hsml:Entity
Schemas are published and reused across multiple act:Activity instances. They are the
foundation of the “trust-by-reference” governance model.
Provides a formal mechanism for modeling reusable processes and workflows in
compliance with the P2874 Activity model, separating the definition of an action from
its execution.

13

9.4.3.2. Property Definitions

14

This section provides the detailed normative definitions for the properties of the act:ActivitySchema class.

15

Table 46—Properties Summary for act:ActivitySchema

Subclass Of
Usage Note
Rationale

16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31

Predicate

JSON-LD
name

rdf:type

@type

32

9.4.3.2.1. Property: hasInput

Declares the resource as an
instance of act:ActivitySchema.
hsml:swid
swid
Spatial Web Identifier conformant
with W3C DID Core.
act:hasInput
hasInput
Declares an act:Variable as a
required input parameter.
act:hasOutput
“hasOutput”
Declares an act:Variable as an
expected output parameter.
act:
“hasPrecondition”Specifies a logical condition
hasPrecondition
that must be satisfied before the
activity can be executed.
act:hasEffect
“hasEffect”
Describes the expected state of
the world after the successful
completion of the activity.

33
34
35
36
37
38
39
40
41

Description

Range

Cardinality
Requirement
Level

rdfs:Class

1..n

Mandatory

xsd:anyURI

1..1

Mandatory

act:Variable

0..n

Optional

act:Variable

0..n

Optional

core:Condition

0..n

Optional

core:Condition

0..n

Optional

Table 47—Property Definition: act:hasInput
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

act:hasInput
https://www.spatialwebfoundation.org/ns/hsml/activity#hasInput
“hasInput”
Optional
0..n
act:ActivitySchema
act:Variable
Declares an input parameter required by the Activity Schema.

58

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 47—Property Definition: act:hasInput (continued)

2
3

Usage Note

4

9.4.3.2.2. Property: hasOutput

5

Defines the “interface” for the schema. Each input act:Variable must be bound
to a value in an act:Activity instance.

Table 48—Property Definition: act:hasOutput

6
7
8
9
10
11
12
13
14
15

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

16

9.4.3.2.3. Property: hasPrecondition

17

act:hasOutput
https://www.spatialwebfoundation.org/ns/hsml/activity#hasOutput
“hasOutput”
Optional
0..n
act:ActivitySchema
act:Variable
Declares an output parameter produced by the Activity.
Defines the “interface” for the schema. Each output act:Variable will be
bound to a resulting value in a completed act:Activity instance.

Table 49—Property Definition: act:hasPrecondition

18
19
20
21
22
23
24
25
26
27
28
29

Property
IRI
JSON name
Requirement Level
Requirement Level
Cardinality
Domain
Range
Definition

30

9.4.3.2.4. Property: hasEffect

Usage Note

31
32
33
34
35
36
37
38
39
40

act:hasPrecondition
https://www.spatialwebfoundation.org/ns/hsml/activity#hasPrecondition
“hasPrecondition”
Optional hasPrecondition
Optional
0..n
act:ActivitySchema
core:Condition
Specifies a logical condition on the world state that must be satisfied before
the activity can be executed.
Used by governance engines to validate a gov:Contract before allowing an
activity to proceed.

Table 50—Property Definition: act:hasEffect
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

act:hasEffect`
https://www.spatialwebfoundation.org/ns/hsml/activity#hasEffect
“hasEffect”
Optional
0..n
act:ActivitySchema
core:Condition
Describes the expected state of the world after the successful completion of
the activity.

59

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 50—Property Definition: act:hasEffect (continued)

2

Usage Note

3

9.4.4. Class: act:AtomicActivitySchema

4
5

The class act:AtomicActivitySchema realizes the ATOMIC ACTIVITY SCHEMA concept, a specialization
of act:ActivitySchema as defined in IEEE P2874 § 6.6.3.

6
7
8

An act:AtomicActivitySchema is a schema for a simple, indivisible activity that is not broken down into
smaller steps within the HSML model. It represents a fundamental operation whose internal logic is treated
as a “black box.”

9

Key Requirements

10

–

Inheritance: An act:AtomicActivitySchema SHALL inherit all requirements from act:ActivitySchema.

11
12

–

Indivisibility: An act:AtomicActivitySchema SHALL NOT contain any act:ActivityStep instances or
control flow properties (act:hasOrderedSteps, act:hasChoice, act:hasUnorderedSteps).

13

9.4.4.1. Class Definition

14

Used for validation of outcomes and success criteria.

Table 51—Class Definition for act:AtomicActivitySchema

15
16
17
18
19
20
21
22
23
24

RDF Class

act:AtomicActivitySchema

Is Abstract
Definition

No
A schema for a simple, indivisible activity that does not internally reference other act:
ActivitySchema instances.
act:ActivitySchema
Used for fundamental operations whose internal logic is opaque to the HSML model (e.
g., invoking an external API, performing a cryptographic operation).
Provides a clear distinction between simple, black-box tasks and complex, multi-step
workflows (act:CompositeActivitySchema), which simplifies validation and execution
logic.

25

9.4.4.2. Properties

26
27

An act:AtomicActivitySchema defines no new properties. It inherits all of its properties, including act:
hasInput, act:hasOutput, act:hasPrecondition, and act:hasEffect, from its superclass, act:ActivitySchema.

28

9.4.5. Class: act:CompositeActivitySchema

29
30

The class act:CompositeActivitySchema realizes the COMPOSITE ACTIVITY SCHEMA concept, which
extends the act:ActivitySchema to model complex, multi-step workflows as defined in IEEE P2874 § 6.6.3.

31
32
33

A act:CompositeActivitySchema is a schema for a complex workflow composed of other activities. It acts as
a container for a set of act:ActivityStep instances and defines the control and data flow between them. This
enables the modeling of sophisticated processes like sequences, choices, and parallel operations.

34

Key Requirements

35
36

–

Subclass Of
Usage Note
Rationale

Composition: A act:CompositeActivitySchema SHALL be composed of one or more act:ActivityStep
instances linked via act:hasStep.

60

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

–

Control Flow: A act:CompositeActivitySchema SHALL define its execution logic using exactly one
of the control flow properties: act:hasOrderedSteps, act:hasChoice, or act:hasUnorderedSteps.

3
4

–

Data Flow: A act:CompositeActivitySchema MAY define the data wiring between its steps and its
public interface using act:DataLink instances.

5

9.4.5.1. Class Definition

6
7
8
9
10
11
12
13
14
15

Table 52—Class Definition for act:CompositeActivitySchema
RDF Class

act:CompositeActivitySchema

Is Abstract
Definition

No
A schema for a complex workflow defined in terms of a sequence or combination of
other activities.
act:ActivitySchema
This class is the basis for modeling multi-step processes. It must contain act:
ActivityStep instances and define a control flow.
Provides a formal, governable structure for modeling complex workflows, making both
the process logic and data dependencies explicit and auditable.

Subclass Of
Usage Note
Rationale

16

Table 53—Properties Summary for act:CompositeActivitySchema

17
18
19
20
21
22
23
24
25
26
27
28
29
30

Predicate

JSON-LD
name

act:hasStep

hasStep

31

9.4.5.2. Properties

32
33

This section provides the detailed
CompositeActivitySchema class.

34

9.4.5.2.1. Property: hasStep

Range

Connects the composite schema to
a constituent act:ActivityStep.
act:hasDataLink hasDataLink
Connects the composite schema
to a act:DataLink that defines data
wiring.
act:
hasOrderedSteps Defines a strict sequence of `act:
hasOrderedSteps
ActivityStep`s.
act:hasChoice
hasChoice
Defines a set of mutually exclusive
act:ActivityStep options.
act:
hasUnorderedStepsDefines a set of `act:ActivityStep`s
hasUnorderedSteps
with no prescribed execution
order.

35
36
37
38
39
40
41

Description

normative

Cardinality
Requirement
Level

act:ActivityStep 1..*

Mandatory

act:DataLink

0..*

Optional

rdf:List

0..1

Conditional

act:ActivityStep 0..*

Conditional

act:ActivityStep 0..*

Conditional

definitions

for

the

properties

of

Table 54—Property Definition: act:hasStep
Property
IRI
JSON name
Requirement Level
Cardinality
Domain

act:hasStep
https://www.spatialwebfoundation.org/ns/hsml/activity#hasStep
hasStep
Mandatory
1..*
act:CompositeActivitySchema

61

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

the

act:

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 54—Property Definition: act:hasStep (continued)

2
3
4

Range
Definition
Usage Note

5

9.4.5.2.2. Property: hasDataLink

6

act:ActivityStep
Connects a composite schema to a constituent act:ActivityStep.
Every composite schema must contain at least one step.

Table 55—Property Definition: act:hasDataLink

7
8
9
10
11
12
13
14
15

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

16

9.4.5.2.3. Property: hasOrderedSteps

17

act:hasDataLink
https://www.spatialwebfoundation.org/ns/hsml/activity#hasDataLink
hasDataLink
Optional
0..*
act:CompositeActivitySchema
act:DataLink
Connects a composite schema to a act:DataLink that defines data wiring.
Used to make the data dependencies between steps explicit.

Table 56—Property Definition: act:hasOrderedSteps

18
19
20
21
22
23
24
25
26
27
28

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

29

9.4.5.2.4. Property: hasChoice

Usage Note

30
31
32
33
34
35
36
37
38
39
40

act:hasOrderedSteps
https://www.spatialwebfoundation.org/ns/hsml/activity#hasOrderedSteps
hasOrderedSteps
Conditional
0..1
act:CompositeActivitySchema
rdf:List
Defines a strict sequence of act:ActivityStep`s. The value shall be a wellformed `rdf:List.
A composite schema shall use exactly one control flow property. This
property defines a sequential workflow.

Table 57—Property Definition: act:hasChoice
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

act:hasChoice
https://www.spatialwebfoundation.org/ns/hsml/activity#hasChoice
hasChoice
Conditional
0..*
act:CompositeActivitySchema
act:ActivityStep
Defines a set of mutually exclusive act:ActivityStep options.
A composite schema shall use exactly one control flow property. If used, this
property shall link to two or more steps.

62

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

9.4.5.2.5. Property: hasUnorderedSteps

2

Table 58—Property Definition: act:hasUnorderedSteps

3
4
5
6
7
8
9
10
11
12

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

13

9.4.6. Class: act:ActivityStep

14
15

The class act:ActivityStep realizes the ACTIVITY STEP concept as part of a act:CompositeActivitySchema
in IEEE P2874 § 6.6.3.

16
17

“An ACTIVITY STEP is an addressable node within a composite activity’s workflow, representing a discrete
stage of execution that uses a specific act:ActivitySchema to define its logic.”

18
19
20
21

act:ActivityStep is a structural component used to build complex workflows. It acts as a placeholder or node
in a workflow graph, separating the structure of the workflow from the logic of the individual steps. This
allows for the creation of modular, reusable, and governable multi-step processes with declarative control
flow, including conditional branching.

22

Key Requirements

23
24

–

Context: An act:ActivityStep SHALL only exist as part of a act:CompositeActivitySchema, linked via
properties like act:hasStep.

25
26

–

Logic Definition: An act:ActivityStep SHALL reference exactly one act:ActivitySchema via the act:
usesSchema property to define its executable logic.

27
28

–

Identification: An act:ActivityStep SHOULD have a simple, locally-unique schema:identifier to
simplify referencing within the workflow definition.

29
30

–

Description: An act:ActivityStep SHOULD have a human-readable schema:name for display purposes
and MAY have a schema:description for detailed documentation.

31
32

–

Conditional Execution: An act:ActivityStep MAY include an act:hasCondition to enable conditional
branching within a workflow.

33

9.4.6.1. Class Definition

34
35
36
37
38
39
40

act:hasUnorderedSteps
https://www.spatialwebfoundation.org/ns/hsml/activity#hasUnorderedSteps
hasUnorderedSteps
Conditional
0..*
act:CompositeActivitySchema
act:ActivityStep
Defines a set of `act:ActivityStep`s with no prescribed execution order.
A composite schema shall use exactly one control flow property. This defines
a set of steps that may be executed in parallel, subject to data dependencies.

Table 59—Class Definition for act:ActivityStep
RDF Class

act:ActivityStep

Is Abstract
Definition

No
A unique, addressable step within a act:CompositeActivitySchema. Each step is an
element of the workflow that points to an act:ActivitySchema it executes and can be
annotated with names, descriptions, and conditional logic.
owl:Thing

Subclass Of

63

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3
4
5
6
7

Table 59—Class Definition for act:ActivityStep (continued)
RDF Class

act:ActivityStep

Usage Note

An act:ActivityStep acts as a node in a workflow graph. It is a structural placeholder
that defines a unit of work.
Modeling steps as first-class entities makes the workflow structure explicit, addressable,
and governable, allowing metadata, documentation, and conditional logic to be attached
to individual stages of a process.

Rationale

8

Table 60—Properties Summary for act:ActivityStep

9
10
11
12
13
14
15
16
17
18
19
20

Predicate

JSON-LD
name

Description

Range

act:usesSchema

usesSchema
name

act:
1..1
ActivitySchema
xsd:string
0..1

Mandatory

schema:name
schema:
description
act:
hasCondition
schema:
identifier

description

Links the step to the act:
ActivitySchema defining its logic.
A short, human-readable name for
the step.
A detailed explanation of the
step’s purpose.
A condition that must be met for
this step to be executed.
A unique identifier for the step
within its composite schema.

xsd:string

0..1

Optional

core:Condition

0..1

Optional

xsd:string

0..1

Recommended

21

9.4.6.2. Properties

22

This section provides the detailed normative definitions for the properties of the act:ActivityStep class.

23

9.4.6.2.1. Property: usesSchema

hasCondition
identifier

24

Recommended

Table 61—Property Definition: act:usesSchema

25
26
27
28
29
30
31
32
33
34
35

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

36

9.4.6.2.2. Property: name

act:usesSchema
https://www.spatialwebfoundation.org/ns/hsml/activity#usesSchema
usesSchema
Mandatory
1..1
act:ActivityStep
act:ActivitySchema
Links an act:ActivityStep to the act:ActivitySchema that defines its
executable logic.
The referenced schema can be either atomic or another composite schema,
allowing for nested workflows.

Usage Note

37
38
39
40
41

Cardinality
Requirement
Level

Table 62—Property Definition: schema:name
Property
IRI
JSON name
Requirement Level

schema:name
https://schema.org/name
name
Recommended

64

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 62—Property Definition: schema:name (continued)

2
3
4
5
6
7
8

Cardinality
Domain
Range
Definition
Usage Note

9

9.4.6.2.3. Property: description

10

0..1
act:ActivityStep
xsd:string
A short, human-readable name for the activity step.
This property is intended for display in user interfaces, such as workflow
diagrams or logs. For example: “Validate User Credentials”. Reuses the
property from Schema.org.

Table 63—Property Definition: schema:description

11
12
13
14
15
16
17
18
19
20
21

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

22

9.4.6.2.4. Property: hasCondition

23

schema:description
https://schema.org/description
description
Optional
0..1
act:ActivityStep
xsd:string
A detailed explanation of the step’s purpose, inputs, outputs, or behavior.
This property is for documentation and maintainability, helping developers
understand the role of the step in the overall process. Reuses the property
from Schema.org.

Table 64—Property Definition: act:hasCondition

24
25
26
27
28
29
30
31
32
33
34
35
36

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

37

9.4.6.2.5. Property: identifier

Usage Note

38
39
40
41

act:hasCondition
https://www.spatialwebfoundation.org/ns/hsml/activity#hasCondition
hasCondition
Optional
0..1
act:ActivityStep
core:Condition
An optional condition that must evaluate to true for this step to be eligible for
execution.
This property provides the mechanism for conditional control flow. When
multiple steps are presented as part of an act:hasChoice construct, the runtime
engine SHALL evaluate the act:hasCondition for each step. The first step
whose condition evaluates to true SHALL be the path that is executed.

Table 65—Property Definition: schema:identifier
Property
IRI
JSON name

schema:identifier
https://schema.org/identifier
identifier

65

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 65—Property Definition: schema:identifier (continued)

2
3
4
5
6
7
8
9
10
11

Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

12

9.4.7. Class: act:DataLink

13
14

The class act:DataLink realizes the DATA LINK concept as part of a act:CompositeActivitySchema in IEEE
P2874 § 6.6.3.

15

“A DATA LINK is a construct for connecting the data flow between steps in a composite activity.”

16
17
18
19

act:DataLink is a structural entity that explicitly models the “wiring” of data within a complex workflow.
It connects the output of one step to the input of another, or links the inputs and outputs of the composite
schema to its internal steps. By modeling data flow as a first-class entity, the standard makes it addressable,
auditable, and governable.

20

Key Requirements

21
22

–

Context: An act:DataLink SHALL only exist as part of a act:CompositeActivitySchema, linked via the
act:hasDataLink property.

23
24

–

Source Specification: An act:DataLink SHALL identify its data source via act:sourceVariable and, if
internal, act:sourceStep. The link is made using the schema:identifier of the respective components.

25
26

–

Target Specification: An act:DataLink SHALL identify its data target via act:targetVariable and, if
internal, act:targetStep. The link is made using the schema:identifier of the respective components.

27
28

–

Interface Wiring: To wire the composite’s interface, a DataLink SHALL omit either the sourceStep
(for an input) or targetStep (for an output).

29

9.4.7.1. Class Definition

30
31
32
33
34
35
36
37
38
39
40

Recommended
0..1
act:ActivityStep
xsd:string
A locally unique, human-friendly identifier for the step.
This identifier provides a simple, stable “nickname” (e.g., “stepA”,
“validateUser”) that SHOULD be used to uniquely identify the step within
its parent act:CompositeActivitySchema. This makes it easier for act:
DataLink instances to reliably reference the step as a source or target without
using long, complex URIs.

Table 66—Class Definition for act:DataLink
RDF Class

act:DataLink

Is Abstract
Definition

No
A directed “wire” defining data flow. It can connect two internal steps, a composite’s
input to a step, or a step’s output to a composite’s output.
owl:Thing
Making act:DataLink a class allows the data flow itself to be an addressable and
governable entity. Metadata (e.g., encryption requirements, Quality of Service policies,
names, descriptions) can be attached directly to the link.
Elevates the workflow’s data flow to be an explicit, governable, and self-describing
entity, enabling more sophisticated security and management patterns.

Subclass Of
Usage Note

Rationale

66

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 67—Properties Summary for act:DataLink

2
3
4
5
6
7
8
9
10
11
12
13
14
15

Predicate

JSON-LD
name

Description

Range

Cardinality
Requirement
Level

schema:name

name

xsd:string

0..1

Optional

schema:
description
act:sourceStep

description

xsd:string

0..1

Optional

xsd:string

0..1

Conditional

act:targetStep

targetStep

xsd:string

0..1

Conditional

act:
sourceVariable
act:
targetVariable

sourceVariable

A short, human-readable name for
the data link.
A detailed explanation of the data
link’s purpose.
The identifier of the source act:
ActivityStep.
The identifier of the target act:
ActivityStep.
The identifier of the source act:
Variable.
The identifier of the target act:
Variable.

xsd:string

1..1

Mandatory

xsd:string

1..1

Mandatory

16

9.4.7.2. Properties

17

This section provides the detailed normative definitions for the properties of the act:DataLink class.

18

9.4.7.2.1. Property: name

sourceStep

targetVariable

19

Table 68—Property Definition: schema:name

20
21
22
23
24
25
26
27
28
29

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

30

9.4.7.2.2. Property: description

31
32
33
34
35
36
37
38
39

schema:name
https://schema.org/name
name
Optional
0..1
act:DataLink
xsd:string
A short, human-readable name for the data link.
Useful for documenting the workflow. For example: “Pass User ID to
Validator”. Reuses the property from Schema.org.

Table 69—Property Definition: schema:description
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

schema:description
https://schema.org/description
description
Optional
0..1
act:DataLink
xsd:string
A detailed explanation of the data link’s purpose or any transformations.

67

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 69—Property Definition: schema:description (continued)

2
3

Usage Note

4

9.4.7.2.3. Property: sourceStep

5

Can be used to explain complex wiring or data handling logic to developers.
Reuses the property from Schema.org.

Table 70—Property Definition: act:sourceStep

6
7
8
9
10
11
12
13
14
15
16

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

17

9.4.7.2.4. Property: targetStep

18

act:sourceStep
https://www.spatialwebfoundation.org/ns/hsml/activity#sourceStep
sourceStep
Conditional
0..1
act:DataLink
xsd:string
The identifier of the source act:ActivityStep for the data link.
The value of this property SHALL match the schema:identifier of an act:
ActivityStep within the same composite schema. This property is omitted for
data links that wire a public input of the composite schema to an internal step.

Table 71—Property Definition: act:targetStep

19
20
21
22
23
24
25
26
27
28
29
30

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

31

9.4.7.2.5. Property: sourceVariable

32
33
34
35
36
37
38
39
40

act:targetStep
https://www.spatialwebfoundation.org/ns/hsml/activity#targetStep
targetStep
Conditional
0..1
act:DataLink
xsd:string
The identifier of the target act:ActivityStep for the data link.
The value of this property SHALL match the schema:identifier of an act:
ActivityStep within the same composite schema. This property is omitted for
data links that expose the output of an internal step as a public output of the
composite schema.

Table 72—Property Definition: act:sourceVariable
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

act:sourceVariable
https://www.spatialwebfoundation.org/ns/hsml/activity#sourceVariable
sourceVariable
Mandatory
1..1
act:DataLink
xsd:string
The identifier of the source act:Variable for the data link.

68

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 72—Property Definition: act:sourceVariable (continued)

2
3

Usage Note

4

9.4.7.2.6. Property: targetVariable

The value of this property SHALL match the schema:identifier of an act:
Variable defined in the source step’s schema (or the composite schema itself).

5

Table 73—Property Definition: act:targetVariable

6
7
8
9
10
11
12
13
14
15

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

16

9.4.8. Class: act:Variable

17
18

The class act:Variable realizes the VARIABLE concept as part of an act:ActivitySchema in IEEE P2874 §
6.6.3.

19
20

“A VARIABLE represents a typed parameter or binding placeholder within an ACTIVITY SCHEMA, used
to specify required inputs, produced outputs, or contextual bindings.”

21
22
23

act:Variable is a structural component that formally defines the interface for a single parameter within a
schema. It supports the declaration → binding → validation pipeline by separating the declaration of a
variable’s expected type from the formal conditions used to enforce its validity.

24

Key Requirements

25
26

–

Identification: A variable SHALL have a locally unique, machine-readable schema:identifier. It
SHOULD also be described with a schema:name and MAY have a schema:description.

27
28

–

Declaration: A variable SHOULD declare its expected data type(s) via the act:expects property. This
serves as a clear, human- and machine-readable declaration of intent.

29
30

–

Enforcement: A variable MAY be constrained by one or more core:Condition instances. This is the
formal mechanism for enforcing complex validation rules.

31
32

–

Usage: Variables SHALL be used in an act:ActivitySchema to define inputs (act:hasInput) or outputs
(act:hasOutput).

33

9.4.8.1. Class Definition

34
35
36
37
38
39

act:targetVariable
https://www.spatialwebfoundation.org/ns/hsml/activity#targetVariable
targetVariable
Mandatory
1..1
act:DataLink
xsd:string
The identifier of the target act:Variable for the data link.
The value of this property SHALL match the schema:identifier of an act:
Variable defined in the target step’s schema (or the composite schema itself).

Table 74—Class Definition for act:Variable
RDF Class

act:Variable

Is Abstract
Definition

No
A formal parameter definition for an act:ActivitySchema, representing an input, output,
or contextual binding.
owl:Thing

Subclass Of

69

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3
4
5
6
7
8

Table 74—Class Definition for act:Variable (continued)
RDF Class

act:Variable

Usage Note

A Variable is a structural component of a schema’s interface. It defines the complete
signature for a parameter, including its identifier, name, expected type(s), and validation
logic.
Provides a formal structure for parameterizing Activities, ensuring correctness and
reusability. Separating type declaration from validation conditions improves both
usability and robustness.

Rationale

9

Table 75—Properties Summary for act:Variable

10
11
12
13
14
15
16
17
18
19
20
21
22

Predicate

JSON-LD
name

Description

Range

Cardinality
Requirement
Level

schema:
identifier
schema:name

identifier

xsd:string

1..1

Mandatory

xsd:string

0..1

Recommended

schema:
description
act:expects

description

xsd:string

0..1

Optional

rdfs:Class

0..*

Recommended

core:
hasCondition

hasCondition

A locally unique, machinereadable identifier for the variable.
A short, human-readable name for
the variable.
A detailed explanation of the
variable’s purpose.
The expected data type or class of
the variable’s value.
Declares formal conditions (e.
g., value range) applied to the
variable’s value.

core:Condition

0..*

Optional

23

9.4.8.2. Properties

24

This section provides the detailed normative definitions for the properties of the act:Variable class.

25

9.4.8.2.1. Property: identifier

name

expects

26

Table 76—Property Definition: schema:identifier

27
28
29
30
31
32
33
34
35
36
37
38

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

39

9.4.8.2.2. Property: name

40
41

schema:identifier
https://schema.org/identifier
identifier
Mandatory
1..1
act:Variable
xsd:string
A locally unique, machine-readable identifier for the variable.
This identifier SHALL be unique within the scope of the act:ActivitySchema
where it is defined. It is used for programmatic binding via act:
VariableBinding and for referencing variables in act:DataLink instances (e.g.,
“targetLocation”). Reuses the property from Schema.org.

Table 77—Property Definition: schema:name
Property

schema:name

70

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 77—Property Definition: schema:name (continued)

2
3
4
5
6
7
8
9
10
11

IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

12

9.4.8.2.3. Property: description

13

https://schema.org/name
name
Recommended
0..1
act:Variable
xsd:string
A short, human-readable name for the variable.
This property provides a human-friendly label for user interfaces and
documentation. For example: “Target Location”. Reuses the property from
Schema.org.

Table 78—Property Definition: schema:description

14
15
16
17
18
19
20
21
22
23

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

24

9.4.8.2.4. Property: expects

25
26
27
28
29
30
31
32
33
34
35
36
37
38
39

schema:description
https://schema.org/description
description
Optional
0..1
act:Variable
xsd:string
A detailed explanation of the variable’s purpose and usage context.
This property is for documentation and maintainability, helping developers
understand the role of the variable. Reuses the property from Schema.org.

Table 79—Property Definition: act:expects
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

act:expects
https://www.spatialwebfoundation.org/ns/hsml/activity#expects
expects
Recommended
0..*
act:Variable
rdfs:Class
A declaration of the expected data type(s) or class(es) for the variable’s value.
This property provides a simple, direct way for applications to understand
the variable’s type without needing to parse a core:Condition. The range can
be an XSD datatype (e.g., xsd:string) or another class (e.g., core:Agent).
The property may be repeated to allow for union types (e.g., a variable that
expects either a core:Agent or an xsd:string). This is the declaration of
intent.

71

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

9.4.8.2.5. Property: hasCondition

2

Table 80—Property Definition: core:hasCondition

3
4
5
6
7
8
9
10
11
12
13
14
15

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

16

9.4.9. Class: act:VariableBinding

17
18

The class act:VariableBinding provides the concrete link between an abstract act:Variable in a schema and a
specific value in an act:Activity instance.

19
20
21

act:VariableBinding is the mechanism that makes schemas reusable. It connects the abstract parameter slots
defined in the act:ActivitySchema to the real-world data and entities used in a particular execution, ensuring
that every act:Activity is a complete and self-contained record.

22

Key Requirements

23
24

–

Variable Reference: A act:VariableBinding SHALL reference exactly one act:Variable from the parent
activity’s schema via the act:variable property, using the variable’s local identifier.

25
26

–

Value Assignment: A act:VariableBinding SHALL provide exactly one concrete value (either a literal
or a resource) via the standard rdf:value property.

27
28

–

Context: A act:VariableBinding only exists as part of an act:Activity, linked via the act:hasBinding
property.

29

9.4.9.1. Class Definition

Usage Note

30
31
32
33
34
35
36
37
38
39

core:hasCondition
https://www.spatialwebfoundation.org/ns/hsml/core#hasCondition
hasCondition
Optional
0..*
act:Variable
core:Condition
Associates one or more formal conditions that a variable’s bound value must
satisfy.
This is the enforcement mechanism. While act:expects declares the basic
type, core:hasCondition is used to enforce more complex rules, such as value
ranges, string patterns (regex), or conformance to a SHACL shape. A core:
SHACLCondition can also be used to enforce the act:expects declaration.

Table 81—Class Definition for act:VariableBinding
RDF Class

act:VariableBinding

Is Abstract
Definition

No
A binding that connects a Variable to a concrete value (object or literal) in the context
of an Activity.
owl:Thing
This class is the bridge between the abstract schema and the concrete activity. An act:
Activity will have one act:VariableBinding instance for each parameter it provides.
Separates the abstract parameter definition from its concrete value, enabling the
“Parameter/Binding Pattern” for maximum schema reusability.

Subclass Of
Usage Note
Rationale

72

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 82—Properties Summary for act:VariableBinding

2
3
4
5
6
7

Predicate

JSON-LD
name

Description

act:variable

variable

rdf:value

value

The identifier of the act:Variable
xsd:string
1..1
this binding parameterizes.
The concrete value (IRI or Literal) rdfs:Resource or 1..1
assigned in the binding.
rdfs:Literal

8

9.4.9.2. Properties

9

This section provides the detailed normative definitions for the properties of the act:VariableBinding class.

10

9.4.9.2.1. Property: variable

11

Cardinality
Requirement
Level
Mandatory
Mandatory

Table 83—Property Definition: act:variable

12
13
14
15
16
17
18
19
20
21
22
23

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

24

9.4.9.2.2. Property: value

act:variable
https://www.spatialwebfoundation.org/ns/hsml/activity#variable
variable
Mandatory
1..1
act:VariableBinding
xsd:string
Connects a VariableBinding to the Variable it parameterizes by referencing
the variable’s identifier.
The value of this property SHALL match the schema:identifier of an act:
Variable defined in the activity’s schema. This provides a consistent, portable
binding mechanism.

Usage Note

25
26
27
28
29
30
31
32
33
34
35
36
37

Range

Table 84—Property Definition: rdf:value
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

rdf:value
http://www.w3.org/1999/02/22-rdf-syntax-ns#value
value
Mandatory
1..1
act:VariableBinding
rdfs:Resource or rdfs:Literal
The concrete value assigned in a VariableBinding.
This standard RDF property is used to provide the actual data for a specific
activity execution. The value can be a literal (e.g., string, number, boolean)
or a URI pointing to another entity. The value provided should be validated
against the core:hasCondition of the bound act:Variable.

73

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

10. HSML Governance Module

2

10.1. Architectural Principles and Design Rationale

3
4
5
6

This clause explains the design choices behind the HSML Governance Module and how they satisfy IEEE
P2874’s requirements for governable, auditable, and interoperable action across Domains. The principles are
informative (non-normative), but they motivate the normative models and constraints defined in subsequent
clauses.

7

10.1.1. The Norm/Policy Separation: Atomic Rules vs Governance Bundles

8
9
10
11
12
13

The foundation of the governance model is the separation between atomic rules and the governance bundles
that publish them. act:ActivitySchema defines the universal semantics of an action—its roles, inputs, outputs,
and pre/post conditions—in a way that is portable and immutable across Domains. By contrast, a gov:Norm
represents a single deontic rule. Each Norm specifies whether an action or state is Obligatory, Prohibited,
or Permitted, and links that modality to explicit machine-executable conditions (core:Condition). Norms are
intentionally minimal: they state “what rule applies, to whom, and under which condition.”

14
15
16
17
18
19

To make those rules effective in practice, authorities issue gov:Policy artifacts. A Policy bundles one or
more Norms and supplies the governance context that a Norm by itself does not carry. Policies declare scope
(which actors, activities, or domains the rules apply to), set validity periods, publish lifecycle state, establish
ordering in case of conflicts, and—critically—reference credential profiles that define what types of verifiable
credentials are acceptable. This separation allows Norms to remain atomic and reusable across contexts, while
Policies provide the authoritative packaging that determines where and when Norms are in force.

20

10.1.2. Credentials and Credential Profiles

21
22
23
24
25
26
27

Verifiable Credentials (VCs) are not embedded in Norms but are instead attached to Agents. Norms may
presuppose that certain credentials exist, but it is Policies that enforce credential requirements through
gov:CredentialProfile. A Credential Profile describes, at the type level, what any acceptable VC must
satisfy—its type, issuer trust, subject binding, attribute constraints, proof suite, and freshness requirements.
During contract validation, Agents present credential instances, and the validation process checks both their
cryptographic proofs and their conformance to the profiles declared by the applicable Policies. This design
keeps Policies declarative and reusable, while preserving Agent privacy until execution time.

28

10.1.3. Deontic Modality and Executable Conditions

29
30
31
32
33
34

The heart of each Norm is its deontic modality—Obligation, Prohibition, or Permission—coupled with one
or more executable conditions. A Norm is therefore both semantically clear and operational: it not only
states the normative force but also the concrete, machine-checkable predicates under which the rule applies.
These conditions are expressed in standards-aligned constraint languages such as SHACL, SPARQL ASK,
JSON-Schema, or CEL, ensuring determinism, auditability, and interoperability. Policy-level precedence
rules determine how to resolve conflicts when multiple Norms apply at once.

35

10.1.4. Time-Bound Governance

36
37

Policies provide temporal boundaries for governance. They carry schema:validFrom and schema:
validThrough properties to indicate when a bundle of Norms is in force. A Policy outside its validity window

74

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3

must not be considered during contract validation. If no end time is declared, the Policy remains in effect until
explicitly revoked. Individual Norms may also include effectivity windows when a rule itself is inherently
time-limited, but the general assumption is that time-scoping is managed at the Policy level.

4

10.1.5. Contracts as the Universal Trigger

5
6
7
8
9
10

Execution of every act:Activity is mediated through a gov:Contract. The Contract acts as the universal
trigger and single enforcement point. It records the intent to act, the participating parties, the validation
process, and the resulting lifecycle status. By funnelling all execution through Contracts, the module ensures
a tamper-evident audit trail that links the governing Policies and Norms, the conditions that were evaluated,
the credentials that were presented, and the decision outcomes. This approach guarantees both consistent
enforcement and complete traceability.

11

10.1.6. Trust Substrate and Evidence

12
13
14
15
16

The governance model relies on W3C standards for identity and credentials. Spatial Web Identifiers (DIDs)
identify Agents, Domains, and Contracts. Verifiable Credentials supply cryptographic attestations of authority,
qualification, or compliance. Validation always includes proof verification, issuer trust assessment, revocation
checks, and freshness evaluation. Implementations are expected to persist minimal verification transcripts so
that decisions can be independently re-audited, providing accountability without unnecessary data retention.

17

10.1.7. Evaluation Flow

18
19
20
21
22
23
24

The governance evaluation process follows a predictable sequence. First, the system discovers which Policies
apply given the Domain, ActivitySchema, actors, and time. It then collects the Norms bundled in those Policies
and applies precedence rules to resolve conflicts. Next, the system verifies that the Agent’s credentials satisfy
the CredentialProfiles declared by the Policies. Once credential gates are passed, the executable conditions
associated with the Norms are evaluated against the current state. The combined results yield a decision—
permit, deny, or permit with obligations—which is recorded in the Contract along with evidence. If permitted,
obligations may be monitored at runtime, and violations may trigger enforcement actions.

25

10.1.8. Interoperability and Extensibility

26
27
28
29
30

The model is designed to be interoperable across heterogeneous Domains. Activities are always referenced
by IRIs, making schema usage neutral. Conditions are pluggable: any standards-aligned constraint language
can be used so long as it is identifiable by content type. Policies can be composed hierarchically to represent
organizational or jurisdictional layers. Evidence is linked but content-agnostic, allowing different proof suites
and VC profiles to interoperate.

31

10.1.9. Security and Privacy

32
33
34
35
36

Finally, the governance design incorporates privacy and security considerations. Policies declare only
credential types, never instances, limiting disclosure. Contracts bind VC presentations to specific transactions,
preventing replay. Selective disclosure and zero-knowledge proofs are preferred when only one attribute is
needed. Revocation checks are repeated when contracts extend across expiry or state changes, preventing
drift. Together these measures ensure least disclosure, freshness, and resistance to side-channel leakage.

75

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

10.2. Normative Classes

2
3
4

This clause provides the normative definitions for all class concepts. It is divided into two parts: classes that
are defined as part of this Governance Module, and classes from the HSML Core Module that are normatively
used by this module.

5

The namespace prefix gov: refers to https://www.spatialwebfoundation.org/ns/hsml/governance#/.

6

10.2.1. Summary of Governance Module Classes

7

Table 85—Summary of Classes Used in the HSML Governance Module

8
9
10
11
12
13
14
15
16
17
18
19
20

Class

Description

gov:Contract

The binding agreement that initiates and governs the execution of one or more act:
Activity instances.
A tamper-evident, cryptographically verifiable set of claims, as defined by the W3C VC
standard, used for authentication and authorization.
A reusable bundle of constraints describing what a Verifiable Credential instance
MUST satisfy (type, issuer/trust, subject binding, attribute constraints, proof, freshness)
An atomic deontic rule (Obligation, Prohibition, Permission) governing behavior in a
Domain, expressed as one or more executable Conditions.
A governance artifact issued by an authority, bundling one or more Norms, and
declaring their scope, applicability, and lifecycle.
An enumeration class that defines the set of allowable deontic modalities for Norms
(Obligation, Prohibition, Permission).

21

10.2.2. Class: gov:Contract

22

The class gov:Contract realises the CONTRACT concept in IEEE P2874 § 6.6.4:

23
24

“A binding agreement between two or more parties—enforceable by law or internal policy—that
governs one or more Activities in the Spatial Web.”

25
26

gov:Contract links the initiating Domain, the participating Agents, the governed Activity (or Activities), and
the evolving ContractStatus instances that capture its lifecycle.

27

Key Requirements

28
29

–

Identity Every Contract SHALL possess a Spatial Web Identifier (hsml:swid, W3C DID Corecompliant).

30

–

Initiator Exactly one hsml:isRequestedBy SHALL reference the Domain that issued the request.

31
32

–

Acceptance One or more hsml:isAcceptedBy references SHALL identify the Agent(s) that accept the
terms.

33
34

–

Fulfilment One or more hsml:isFulfilledBy references SHALL identify the Agent(s) responsible for
execution.

35
36

–

Governed Activity One or more hsml:contractFor references SHALL identify the Activity(ies) the
contract governs.

37

–

Lifecycle hsml:contractStatus references SHALL record the contract’s state

38
39

–

Extensibility Additional clauses, policy links, or monetary terms MAY be added via further properties
or subclasses without altering these core semantics.

gov:Credential
gov:CredentialProfile
gov:Norm
gov:Policy
gov:DeonticModality

76

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

These rules guarantee that every contract is discoverable, auditable, and machine-actionable across SpatialWeb systems.

3

10.2.2.1. Class Definition

4
5
6
7
8
9
10
11
12

Table 86—Class Definition for gov:Contract
RDF Class

gov:Contract

Is Abstract
Definition

No
A binding agreement governing the execution of one or more act:Activity instances by
specific agt:Agent`s within a `hsml:Domain context.
core:Entity
A gov:Contract must carry a SWID and link to its initiating domain, accepting and
fulfilling agents, the governed activity, and its lifecycle status. For detailed roles, it uses
core:Participation records.

Subclass Of
Usage Notes

13

Table 87—Properties Summary for gov:Contract

14
15
16
17
18
19
20
21
22
23
24
25
26
27

Predicate

JSON-LD
name

gov:
isRequestedBy
gov:
isAcceptedBy
gov:
isFulfilledBy
gov:contractFor

requestedBy

28

10.2.2.2. Properties

29

This section provides the detailed normative definitions for the properties of the gov:Contract class.

30

10.2.2.2.1. Property: isRequestedBy

The core:Domain that initiated the
contract.
acceptedBy
The agt:Agent(s) that accepted the
contract.
fulfilledBy
The agt:Agent(s) responsible for
fulfilling the contract.
contractFor
The act:Activity the contract
governs.
gov:
contractStatus
The current lifecycle status of the
contractStatus
contract.
gov:
hasParticipation Links to detailed participation
hasParticipation
records.

31
32
33
34
35
36
37
38
39
40

Description

Range

Cardinality
Requirement
Level

core:Domain

1..1

Mandatory

agt:Agent

1..*

Mandatory

agt:Agent

1..*

Mandatory

act:Activity

1..*

Mandatory

xsd:string

1..1

Mandatory

core:
Participation

0..*

Optional

Table 88—Property Definition: gov:isRequestedBy
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

gov:isRequestedBy
https://www.spatialwebfoundation.org/ns/hsml/governance#isRequestedBy
requestedBy
Mandatory
1..1
gov:Contract
hsml:Domain
Identifies the hsml:Domain that initiated or requested creation of the contract.
Exactly one initiating hsml:Domain is recorded.

77

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

10.2.2.2.2. Property: isAcceptedBy

2

Table 89—Property Definition: gov:isAcceptedBy

3
4
5
6
7
8
9
10
11

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

12

10.2.2.2.3. Property: isFulfilledBy

13

gov:isAcceptedBy
https://www.spatialwebfoundation.org/ns/hsml/governance#isAcceptedBy
acceptedBy
Mandatory
1..*
gov:Contract
agt:Agent
Identifies the agt:Agent(s) formally accepting the contract.
Multi-party contracts must list every accepting agt:Agent.

Table 90—Property Definition: gov:isFulfilledBy

14
15
16
17
18
19
20
21
22

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

23

10.2.2.2.4. Property: contractFor

24

gov:isFulfilledBy
https://www.spatialwebfoundation.org/ns/hsml/governance#isFulfilledBy
fulfilledBy
Mandatory
1..*
gov:Contract
agt:Agent
Identifies the agt:Agent(s) tasked with fulfilling the contractual obligations.
This is often, but not always, the same agt:Agent(s) as gov:isAcceptedBy.

Table 91—Property Definition: gov:contractFor

25
26
27
28
29
30
31
32
33

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

34

10.2.2.2.5. Property: contractStatus

35
36
37
38

gov:contractFor
https://www.spatialwebfoundation.org/ns/hsml/governance#contractFor
contractFor
Mandatory
1..*
gov:Contract
act:Activity
Identifies the act:Activity (or Activities) that this contract governs.
This property links the agreement to the specific action(s) to be executed.

Table 92—Property Definition: gov:contractStatus
Property
IRI
JSON name

gov:contractStatus
https://www.spatialwebfoundation.org/ns/hsml/governance#contractStatus
contractStatus

78

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 92—Property Definition: gov:contractStatus (continued)

2
3
4
5
6
7
8
9

Requirement Level
Cardinality
Domain
Range
Definition

10

10.2.2.2.6. Property: hasParticipation

Mandatory
1..1
gov:Contract
xsd:string
The current lifecycle state of the contract. The value shall be one of:
“Requested”, “Executed”, “Fulfilled”, “Rescinded”, or “Breached”.
This property provides the current state of the agreement. For a full audit trail,
a history of status changes with timestamps should be recorded.

Usage Note

11

Table 93—Property Definition: gov:hasParticipation

12
13
14
15
16
17
18
19
20
21

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

22

10.2.3. Class: gov:Credential

23
24
25

The class gov:Credential realizes the CREDENTIAL concept in IEEE P2874 §6.6.3. It specializes the W3C
VC Data Model to carry attestations that govern identity, authorization, compliance, and trust across Domains
and Activities.

26

10.2.3.1. Key Requirements (Normative)

27
28

a)

A gov:Credential shall be processable as a W3C Verifiable Credential (VC); core VC fields (e.g., issuer,
credentialSubject, proof) shall be supported.

29

b)

Verification shall be two-stage:

gov:hasParticipation
https://www.spatialwebfoundation.org/ns/hsml/governance#hasParticipation
hasParticipation
Optional
0..*
gov:Contract
core:Participation
Links the contract to detailed participation records.
Use for complex contracts to explicitly define agent roles beyond requester/
fulfiller.

30

1)

Cryptographic — verify proof per the VC spec; failure shall reject the credential.

31
32
33

2)

Semantic (conditional) — if a schema is discoverable (from policy via gov:CredentialProfile and/
or from gov:hasSchema in the credential), the credentialSubject shall be validated accordingly;
failure shall make it semantically invalid for the intended purpose.

34
35

c)

A credential need not embed a schema; policies typically provide schema/constraints via gov:
CredentialProfile. If present, a schema pointer shall use gov:hasSchema.

36
37

d)

Implementations should support multiple schema languages (e.g., SHACL, JSON Schema) and select
a validator based on the schema’s media type and/or RDF type.

79

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

10.2.3.2. Class Definition

2

Table 94—Class Definition for gov:Credential

3
4
5
6
7
8
9

RDF Class

gov:Credential

Is Abstract
Definition

No
An Entity representing a permission, attestation, or claim that can be verified or
required in the Spatial Web.
vc:VerifiableCredential, core:Entity
Schema pointers are optional because policy-linked gov:CredentialProfile typically
supplies schema/constraints.

10

10.2.3.3. Properties Summary

Subclass Of
Usage Note

11

Table 95

12
13
14
15
16
17

Predicate

18

10.2.3.4. Properties

19

10.2.3.4.1. Property: conformsToProfile

JSON-LD
name

Description

Range

Cardinality
Requirement

gov:
conformsToProfileDeclares an intended gov:
gov:
0..*
conformsToProfile
CredentialProfile this credential
CredentialProfile
claims to satisfy (hint for
evaluators; policy is authoritative).

20

Optional

Table 96—Property Definition: gov:conformsToProfile

21
22
23
24
25
26
27
28
29
30
31
32

Property
IRI

33

10.2.3.5. Credential Validation Process

34

a)

Stage 1 — Cryptographic (MUST): Verify proof per VC spec; reject on failure.

35
36
37

b)

Stage 2 — Semantic (IF schema discoverable): If policy requires a gov:CredentialProfile and/or the
credential provides gov:hasSchema, fetch the schema and validate credentialSubject using a suitable
engine for the media type or RDF type.

JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

gov:conformsToProfile
https://www.spatialwebfoundation.org/ns/hsml/
governance#conformsToProfile
conformsToProfile
Optional
0..*
gov:Credential
gov:CredentialProfile
Identifies a credential profile the credential claims to meet; used as a routing/
validation hint.
Policy evaluation is governed by the policy’s required gov:
CredentialProfile(s), not by this self-assertion.

80

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

10.2.3.6. Requirements for Policy Engines

2
3

a)

Policies should specify credential type/class and constraints via gov:CredentialProfile; engines shall
fetch and apply referenced schemas.

4
5

b)

Engines shall support gov:hasSchema (generic). gov:hasClaimSchema is processed only as a deprecated
alias.

6

10.2.4. Class: gov:CredentialProfile

7
8
9

The class gov:CredentialProfile bundles the requirements a Verifiable Credential instance MUST satisfy
to pass a policy’s credential gate. It unifies (a) the credential class/type, (b) subject/holder binding rules,
and © attribute / issuer / trust / proof / freshness constraints into a single reusable profile.

10
11

gov:CredentialProfile is referenced by Policies (and Norms) and evaluated at gov:Contract validation time
against presented VC instances.

12

Key Requirements

13

–

Type Basis A profile SHALL specify the acceptable credential class via gov:profileOfCredentialType.

14
15

–

Conformance Presented VC instances MUST conform to all constraints in the profile (shapes,
conditions, issuer/trust, status, proof suites, freshness, subject binding).

16
17

–

Reusability Profiles SHOULD be reusable across Policies; Policies reference profiles rather than hardcoding constraints.

18

10.2.4.1. Class Definition

19
20
21
22
23
24
25
26
27

Table 97—Class Definition for gov:CredentialProfile
RDF Class

gov:CredentialProfile

Is Abstract
Definition

No
A reusable bundle of constraints describing what a Verifiable Credential instance
MUST satisfy (type, issuer/trust, subject binding, attribute constraints, proof,
freshness).
dct:Standard (recommended)
Profiles may be versioned and governed by a Domain. Use with dct:conformsTo during
verification.

Subclass Of
Usage Notes

28
29
30
31
32
33
34
35
36
37
38
39
40

Table 98—Properties Summary for gov:CredentialProfile
Predicate

JSON-LD
name

Description

gov:
profileOfCredentialType
The base credential class/type this
profileOfCredentialType
profile constrains.
gov:
credentialShape SHACL shape(s) the VC instance
credentialShape
MUST satisfy (claims structure/
content).
core:
hasCondition
Executable conditions evaluated
hasCondition
against VC (and/or subject)
claims.
gov:
acceptableIssuer Allowlisted issuers whose VCs are
acceptableIssuer
accepted for this profile.

81

Range

Card.

Level

cred:
CredentialType
sh:NodeShape

1..1

Mandatory

0..*

Optional

core:Condition

0..*

Optional

agt:Agent or
hsml:Domain

0..*

Optional

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 98—Properties Summary for gov:CredentialProfile (continued)

2
3
4
5
6
7
8
9
10
11
12
13
14
15
16

Predicate

17

10.2.4.2. Properties

18

10.2.4.2.1. Property: profileOfCredentialType

JSON-LD
name
trustFramework

Description

gov:
trustFramework
gov:statusPolicy statusPolicy

Named trust framework governing
status & crypto evaluation.
Required status (e.g., notRevoked /
StatusList2021:valid).
gov:
issuedWithin
Max credential age at validation
issuedWithin
(duration, e.g., P1Y).
gov:
requiresSubjectBinding
VC subject MUST be bound to the
requiresSubjectBinding
performing Agent’s identifier.
gov:proofSuite proofSuite
Acceptable cryptographic
proof suites (e.g.,
Ed25519Signature2020).
gov:
profileVersion
Version identifier of this profile.
profileVersion

19

Card.

Level

skos:Concept

0..*

Optional

xsd:string

0..1

Optional

xsd:duration

0..1

Optional

xsd:boolean

0..1

Optional

skos:Concept

0..*

Optional

xsd:string

0..1

Optional

Table 99—Property Definition: gov:profileOfCredentialType

20
21
22
23
24
25
26
27
28
29
30

Property
IRI

31

10.2.4.2.2. Property: credentialShape

JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

32
33
34
35
36
37
38
39
40
41
42

Range

gov:profileOfCredentialType
https://www.spatialwebfoundation.org/ns/hsml/
governance#profileOfCredentialType
profileOfCredentialType
Mandatory
1..1
gov:CredentialProfile
cred:CredentialType
Points to the base credential class that instances MUST instantiate to be
eligible under this profile.
The instance’s @type MUST equal or subclass this type.

Table 100—Property Definition: gov:credentialShape
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

gov:credentialShape
https://www.spatialwebfoundation.org/ns/hsml/governance#credentialShape
credentialShape
Optional
0..*
gov:CredentialProfile
sh:NodeShape
SHACL NodeShape(s) that MUST validate true for a presented VC instance.
Use to assert claim presence, formats, enumerations, nested subject
constraints, etc.

82

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

10.2.4.2.3. Property: hasCondition

2

Table 101—Property Definition: core:hasCondition

3
4
5
6
7
8
9
10
11
12
13

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

14

10.2.4.2.4. Property: acceptableIssuer

Usage Note

15

core:hasCondition
https://www.spatialwebfoundation.org/ns/hsml/core#hasCondition
hasCondition
Optional
0..*
gov:CredentialProfile
core:Condition
Machine-executable conditions over VC/subject/environment (e.g., assurance
≥ X, role in org Y).
Reuses HSML Core; express as SHACL rules, SPARQL ASK templates, or
CEL expressions.

Table 102—Property Definition: gov:acceptableIssuer

16
17
18
19
20
21
22
23
24

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

25

10.2.4.2.5. Property: trustFramework

26

gov:acceptableIssuer
https://www.spatialwebfoundation.org/ns/hsml/governance#acceptableIssuer
acceptableIssuer
Optional
0..*
gov:CredentialProfile
agt:Agent or hsml:Domain
Whitelist of issuers permitted for credentials conforming to this profile.
Combine with gov:trustFramework and revocation checks.

Table 103—Property Definition: gov:trustFramework

27
28
29
30
31
32
33
34
35

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

36

10.2.4.2.6. Property: statusPolicy

37
38

gov:trustFramework
https://www.spatialwebfoundation.org/ns/hsml/governance#trustFramework
trustFramework
Optional
0..*
gov:CredentialProfile
skos:Concept
Named trust framework policy guiding verification and status handling.
Examples: “GovID-EU-eIDAS-High”, “Aviation-FAA-Ops”.

Table 104—Property Definition: gov:statusPolicy
Property

gov:statusPolicy

83

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 104—Property Definition: gov:statusPolicy (continued)

2
3
4
5
6
7
8
9

IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

10

10.2.4.2.7. Property: issuedWithin

11

https://www.spatialwebfoundation.org/ns/hsml/governance#statusPolicy
statusPolicy
Optional
0..1
gov:CredentialProfile
xsd:string
Required VC status condition (e.g., “notRevoked”, “StatusList2021:valid”).
Mapped to concrete verifier behavior.

Table 105—Property Definition: gov:issuedWithin

12
13
14
15
16
17
18
19
20

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

21

10.2.4.2.8. Property: requiresSubjectBinding

22

gov:issuedWithin
https://www.spatialwebfoundation.org/ns/hsml/governance#issuedWithin
issuedWithin
Optional
0..1
gov:CredentialProfile
xsd:duration
Maximum credential age at validation time.
Evaluated against VC issuanceDate; ensure VC not expired.

Table 106—Property Definition: gov:requiresSubjectBinding

23
24
25
26
27
28
29
30
31
32
33

Property
IRI

34

10.2.4.2.9. Property: proofSuite

JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

35
36
37
38
39
40

gov:requiresSubjectBinding
https://www.spatialwebfoundation.org/ns/hsml/
governance#requiresSubjectBinding
requiresSubjectBinding
Optional
0..1
gov:CredentialProfile
xsd:boolean
If true, the VC subject MUST be bound to the performing Agent’s identifier
at contract time.
Enforce via holder binding or subject DID equality checks.

Table 107—Property Definition: gov:proofSuite
Property
IRI
JSON name
Requirement Level
Cardinality

gov:proofSuite
https://www.spatialwebfoundation.org/ns/hsml/governance#proofSuite
proofSuite
Optional
0..*

84

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 107—Property Definition: gov:proofSuite (continued)

2
3
4
5
6

Domain
Range
Definition

7

10.2.4.2.10. Property: profileVersion

gov:CredentialProfile
skos:Concept
Acceptable proof suites for presented VCs (e.g., Ed25519Signature2020,
ECDSA-JWS).
Profiles may list multiple acceptable suites for interoperability.

Usage Note

8

Table 108—Property Definition: gov:profileVersion

9
10
11
12
13
14
15
16
17

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

18

10.2.5. Class: gov:DeonticModality

19
20

The class gov:DeonticModality defines the enumerated values of deontic force that a gov:Norm may express.
It provides the controlled vocabulary for gov:modality values.

21

Key Requirements

22

–

Identity Every modality value SHALL be globally identified by an IRI in the gov: namespace.

23
24

–

Closed Enumeration Allowed values are strictly limited to: gov:Obligation, gov:Prohibition, gov:
Permission.

25

–

Usage Every gov:Norm MUST reference exactly one gov:DeonticModality via gov:modality.

26

10.2.5.1. Class Definition

27
28
29
30
31
32
33
34

gov:profileVersion
https://www.spatialwebfoundation.org/ns/hsml/governance#profileVersion
profileVersion
Optional
0..1
gov:CredentialProfile
xsd:string
Version identifier of the profile for audit/change control.
Consider semantic versioning; deprecate older profiles via publisher policy.

Table 109—Class Definition for gov:DeonticModality
RDF Class

gov:DeonticModality

Is Abstract
Definition

Yes (enumeration)
An enumeration class for deontic modalities representing the normative force of a
Norm.
skos:Concept (optional alignment)
Used only as the range of gov:modality. Instances are controlled vocabulary
individuals.

Subclass Of
Usage Notes

85

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

10.2.5.2. Individuals

2

Table 110—Enumeration Values of gov:DeonticModality

3
4
5
6
7

Individual

Description

gov:Obligation
gov:Prohibition
gov:Permission

A Norm requiring that an action must be performed or a condition must hold.
A Norm requiring that an action must not be performed or a condition must not hold.
A Norm indicating that an action may be performed or a condition may hold (neither
required nor forbidden).

8

10.2.6. Class: gov:Norm

9
10
11

The class gov:Norm realizes the NORM concept in IEEE P2874 § 6.6.4: “An atomic deontic rule—
Obligation, Prohibition, or Permission—governing behavior in a Domain and expressed via one or
more evaluable Conditions.”

12
13
14

A Norm is the atomic rule unit: it specifies what modality (obligation, prohibition, permission) applies to
which targets, and under which conditions. It does not carry issuer, validity, credential gates, or precedence;
those are modeled at the gov:Policy level. Policies must reference one or more Norms via gov:hasNorm.

15

10.2.6.1. Class Definition

16

Table 111—Class Definition for gov:Norm

17
18
19
20
21
22

RDF Class

gov:Norm

Is Abstract
Definition

No
An atomic deontic rule (Obligation/Prohibition/Permission) expressed by executable
conditions and applied to specific targets.
core:Entity
Norms define one rule. Policies package and govern them.

23

10.2.6.2. Key Requirements (Normative)

24

a)

A gov:Norm shall declare exactly one gov:modality (Obligation, Prohibition, Permission).

25

b)

A gov:Norm shall specify one or more governed targets via gov:appliesTo.

26

c)

A gov:Norm shall include one or more core:hasCondition that operationalize applicability.

27

d)

A gov:Norm may declare enforcement actions via gov:onViolation.

28

e)

A gov:Norm may include an intra-policy ordering hint via gov:priority.

29

f)

A gov:Policy shall reference one or more gov:Norm when publishing governance bundles.

Subclass Of
Usage Notes

86

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

10.2.6.3. Properties Summary

2

Table 112—Properties Summary for gov:Norm

3
4
5
6
7
8
9
10
11
12
13
14
15
16

Predicate

JSON-LD
name

Description

Range

Cardinality
Requirement

gov:appliesTo

appliesTo

hsml:Entity or
rdfs:Class

1..*

Mandatory

core:
hasCondition
gov:modality

hasCondition

Targets governed by the norm
(agents, activities, domains, or role
classes).
Executable conditions for
applicability/evaluation.
Deontic modality of the rule
(Obligation, Prohibition,
Permission).
Enforcement action(s) if violated.

core:Condition

1..*

Mandatory

gov:
1..1
DeonticModality

Mandatory

17

10.2.6.4. Properties

18

10.2.6.4.1. Property: modality

modality

gov:onViolation onViolation
gov:priority

priority

19

gov:
0..*
EnforcementAction
Resolution priority within a policy xsd:integer
0..1
bundle.

Optional
Optional

Table 113—Property Definition: gov:modality

20
21
22
23
24
25
26
27
28

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

29

10.2.7. Class: gov:Policy

30
31
32
33

The class gov:Policy is a governance artifact issued by an authority to declare scope, bundle Norms, and gate
execution of Activities via credential requirements. A Policy does not itself execute rules; rather, it references
executable core:Condition`s (directly or via `gov:Norm) and type-level credential requirements expressed as
gov:CredentialProfile. Policy validity is time-scoped using schema:validFrom and schema:validThrough.

34

Design Notes

35
36

–

Bundled Norms Policies collect one or more gov:Norm (Obligation/Prohibition/Permission) that apply
within the policy’s declared scope.

37
38
39

–

Credential Gating (Type-level) Policies reference one or more reusable gov:CredentialProfile via gov:
hasCredentialRequirement. Each profile specifies an allowed credential type/class and the constraints
that any presented credential instance must satisfy at gov:Contract validation time.

gov:modality
https://www.spatialwebfoundation.org/ns/hsml/governance#modality
modality
Mandatory
1..1
gov:Norm
gov:DeonticModality
Declares the deontic force of the norm.
Allowed values: gov:Obligation, gov:Prohibition, gov:Permission.

87

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3

–

4

10.2.7.1. Class Definition

Conditions Reuse Policies MAY also include additional core:hasCondition for policy-level
applicability or evaluation (e.g., jurisdictional, temporal, or role constraints) without redefining the
Condition class.

5
6
7
8
9
10
11
12
13

Table 114—Class Definition for gov:Policy
RDF Class

gov:Policy

Is Abstract
Definition

No
A governance artifact that declares scope, bundles one or more Norms, and specifies
credential profiles that authoritatively gate Activity execution.
core:Entity
Policies are time-scoped with schema:validFrom/schema:validThrough. Credential
gates reference gov:CredentialProfile (type-level). Instance-level credential verification
occurs during gov:Contract validation.

Subclass Of
Usage Notes

14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46

Table 115—Properties Summary for gov:Policy
Predicate

JSON-LD
name

schema:
description
schema:creator

rationale

Description

Range

Cardinality
Requirement

Human-readable rationale/
xsd:string
0..1
summary.
issuedBy
Issuing authority (Domain or
hsml:Domain or 1..1
Agent) responsible for the policy. agt:Agent
schema:
validFrom
Start of the policy’s validity
xsd:dateTime
1..1
validFrom
window (inclusive).
schema:
validThrough
End of the policy’s validity
xsd:dateTime
0..1
validThrough
window (exclusive). Omit for
open-ended.
gov:
appliesToActivitySchema
Activity schema(s) governed by
act:
1..*
appliesToActivitySchema
this policy.
ActivitySchema
gov:
appliesToDomain Domain(s) (places/orgs/contexts)
hsml:Domain
0..*
appliesToDomain
where the policy applies.
gov:
appliesToActorClass
Actor/role classes targeted (e.g.,
rdfs:Class
0..*
appliesToActorClass
Pilot, Contractor).
gov:hasNorm
hasNorm
Bundled atomic deontic rules
gov:Norm
1..*
governed by this policy.
core:
hasCondition
Additional executable
core:Condition 0..*
hasCondition
applicability/evaluation conditions.
gov:
hasCredentialRequirement
Type-level credential gate(s)
gov:
0..*
hasCredentialRequirement
expressed as reusable profiles.
CredentialProfile
gov:precedence precedence
Policy priority for conflict
xsd:integer
0..1
resolution (higher wins).
gov:
policyStatus
Lifecycle status (e.g., Draft,
xsd:string
0..1
policyStatus
Active, Suspended, Retired).
schema:version version
Policy version identifier.
xsd:string
0..1
schema:
jurisdiction
Geographic or legal jurisdiction in schema:Place or 0..*
spatialCoverage
scope.
skos:Concept
gov:
relatedPolicy
Links to superseding/subordinate/ gov:Policy
0..*
relatedPolicy
peer policies.

88

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

Optional
Mandatory
Mandatory
Recommended
Mandatory
Optional
Optional
Mandatory
Optional
Optional
Optional
Optional
Optional
Optional
Optional

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

10.2.7.2. Properties

2

10.2.7.2.1. Property: description

3

Table 116—Property Definition: schema:description

4
5
6
7
8
9
10
11
12

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

13

10.2.7.2.2. Property: issuedBy

14

schema:description
https://schema.org/description
rationale
Optional
0..1
gov:Policy
xsd:string
Human-readable summary, rationale, or notes.
Non-normative; do not encode executable constraints here.

Table 117—Property Definition: schema:creator

15
16
17
18
19
20
21
22
23
24

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

25

10.2.7.2.3. Property: validFrom

26
27
28
29
30
31
32
33
34
35

schema:creator
https://schema.org/creator
issuedBy
Mandatory
1..1
gov:Policy
hsml:Domain or agt:Agent
Identifies the authority that authors and promulgates the policy.
Prefer the controlling hsml:Domain when the issuer is an organization; use an
Agent for individual signatories.

Table 118—Property Definition: schema:validFrom
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

schema:validFrom
https://schema.org/validFrom
validFrom
Mandatory
1..1
gov:Policy
xsd:dateTime
Start timestamp when the policy becomes applicable.
Evaluators MUST ignore a policy before this timestamp.

89

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

10.2.7.2.4. Property: validThrough

2

Table 119—Property Definition: schema:validThrough

3
4
5
6
7
8
9
10
11

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

12

10.2.7.2.5. Property: appliesToActivitySchema

13

schema:validThrough
https://schema.org/validThrough
validThrough
Recommended
0..1
gov:Policy
xsd:dateTime
End timestamp (exclusive) after which the policy is no longer applicable.
Omit for open-ended; revocation/suspension should set gov:policyStatus.

Table 120—Property Definition: gov:appliesToActivitySchema

14
15
16
17
18
19
20
21
22
23
24

Property
IRI

25

10.2.7.2.6. Property: appliesToDomain

JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

26

gov:appliesToActivitySchema
https://www.spatialwebfoundation.org/ns/hsml/
governance#appliesToActivitySchema
appliesToActivitySchema
Mandatory
1..*
gov:Policy
act:ActivitySchema
Declares the Activity schema(s) governed by the policy.
Use IRIs of globally reusable schemas to enable cross-domain
interoperability.

Table 121—Property Definition: gov:appliesToDomain

27
28
29
30
31
32
33
34
35
36

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

37

10.2.7.2.7. Property: appliesToActorClass

38
39

gov:appliesToDomain
https://www.spatialwebfoundation.org/ns/hsml/governance#appliesToDomain
appliesToDomain
Optional
0..*
gov:Policy
hsml:Domain
Limits applicability to one or more Domains (e.g., sites, org units).
If omitted, default scope is the issuer’s Domain and its sub-domains
(implementation-defined).

Table 122—Property Definition: gov:appliesToActorClass
Property

gov:appliesToActorClass

90

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 122—Property Definition: gov:appliesToActorClass (continued)

2
3
4
5
6
7
8
9
10

IRI

11

10.2.7.2.8. Property: hasNorm

https://www.spatialwebfoundation.org/ns/hsml/
governance#appliesToActorClass
appliesToActorClass
Optional
0..*
gov:Policy
rdfs:Class
Targets classes/roles of actors (e.g., org:Role, agt:Pilot).
Pair with Norm conditions for precise targeting.

JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

12

Table 123—Property Definition: gov:hasNorm

13
14
15
16
17
18
19
20
21
22

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

23

10.2.7.2.9. Property: hasCondition

24

gov:hasNorm
https://www.spatialwebfoundation.org/ns/hsml/governance#hasNorm
hasNorm
Mandatory
1..*
gov:Policy
gov:Norm
Includes the atomic deontic rules governed by the policy.
Each Norm declares gov:deonticModality and one or more executable core:
Condition.

Table 124—Property Definition: core:hasCondition

25
26
27
28
29
30
31
32
33
34

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

35

10.2.7.2.10. Property: hasCredentialRequirement

36
37
38
39
40
41

core:hasCondition
https://www.spatialwebfoundation.org/ns/hsml/core#hasCondition
hasCondition
Optional
0..*
gov:Policy
core:Condition
Executable constraints for applicability/evaluation at policy level.
Reuse HSML Core. Express with SHACL/ASK/CEL and record evaluation
artifacts during contract validation.

Table 125—Property Definition: gov:hasCredentialRequirement
Property
IRI
JSON name
Requirement Level

gov:hasCredentialRequirement
https://www.spatialwebfoundation.org/ns/hsml/
governance#hasCredentialRequirement
hasCredentialRequirement
Optional

91

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 125—Property Definition: gov:hasCredentialRequirement (continued)

2
3
4
5
6
7
8
9

Cardinality
Domain
Range
Definition

10

10.2.7.2.11. Property: precedence

0..*
gov:Policy
gov:CredentialProfile
References reusable credential profiles that type-level define acceptable
credential classes and constraints.
Instance-level verification occurs at gov:Contract time by checking presented
VCs conform to the referenced gov:CredentialProfile(s) (type match, issuer/
trust, status, proof suite, freshness, subject binding, shapes/conditions).

Usage Note

11

Table 126—Property Definition: gov:precedence

12
13
14
15
16
17
18
19
20

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

21

10.2.7.2.12. Property: policyStatus

22

gov:precedence
https://www.spatialwebfoundation.org/ns/hsml/governance#precedence
precedence
Optional
0..1
gov:Policy
xsd:integer
Numeric priority used in conflict resolution across applicable policies.
Higher values override lower; tie-break by modality precedence if needed.

Table 127—Property Definition: gov:policyStatus

23
24
25
26
27
28
29
30
31

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

32

10.2.7.2.13. Property: version

33
34
35
36
37
38
39
40

gov:policyStatus
https://www.spatialwebfoundation.org/ns/hsml/governance#policyStatus
policyStatus
Optional
0..1
gov:Policy
xsd:string
Current lifecycle state (e.g., Draft, Active, Suspended, Retired).
Evaluators SHOULD ignore policies not in an “Active”-like state.

Table 128—Property Definition: schema:version
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range

schema:version
https://schema.org/version
version
Optional
0..1
gov:Policy
xsd:string

92

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 128—Property Definition: schema:version (continued)

2
3

Definition
Usage Note

4

10.2.7.2.14. Property: jurisdiction

5

Version label for change control and auditability.
Use semantic versioning where practical.

Table 129—Property Definition: schema:spatialCoverage

6
7
8
9
10
11
12
13
14

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

15

10.2.7.2.15. Property: relatedPolicy

16

schema:spatialCoverage
https://schema.org/spatialCoverage
jurisdiction
Optional
0..*
gov:Policy
schema:Place or skos:Concept
Geographic or legal area covered by the policy.
May reference controlled vocabularies for regions/jurisdictions.

Table 130—Property Definition: gov:relatedPolicy

17
18
19
20
21
22
23
24
25

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

26

11. HSML Agent Module

27

11.1. Architectural Principles and Design Rationale

28
29
30

This clause describes the architectural principles underlying the HSML Agent Module. These principles are
informative and not required for conformance; however, understanding them is recommended to ensure robust
and correct implementations.

31

11.1.1. The Goal-Directed Actor Pattern: Defining Purpose

32
33
34

A fundamental principle of the Agent Module is that all autonomous actions are purpose-driven. An agent
doesn’t simply act; it acts to achieve an objective. This is realized through a clear separation between the
actor and its purpose:

35

–

gov:relatedPolicy
https://www.spatialwebfoundation.org/ns/hsml/governance#relatedPolicy
relatedPolicy
Optional
0..*
gov:Policy
gov:Policy
Links to superseding, superseded, parent, or child policies.
Use gov:relatedPolicy with subproperties if finer relation typing is required.

agt:Agent — The actor itself. An autonomous entity capable of perception, decision-making, and action.

93

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

–

3
4
5
6
7
8

This separation is the cornerstone of explainable AI and governable autonomy in the Spatial Web. By
making an agent’s Goal an explicit, inspectable entity linked via the mandatory agt:hasGoal property, the
model ensures that the “why” behind an agent’s behavior is always a first-class citizen. This allows an
orchestration engine or auditor to understand an agent’s intent without needing to reverse-engineer its internal
logic. It provides a clear, declarative basis for authorizing agent actions—if the goal is permissible within a
domain, the agent’s subsequent actions can be evaluated against it.

9

11.1.2. The Capability Model: Separating Potential from Action

10
11
12

Complementing the goal-directed pattern is the distinction between an agent’s potential to act and its actual
performance of an action. This is achieved by linking the agent to the act:ActivitySchema rather than to
specific act:Activity instances:

13

–

agt:Agent — The actor.

14

–

act:ActivitySchema — A reusable template defining a type of action an agent is capable of performing.

15
16

–

agt:canPerform — The property linking an Agent to the act:ActivitySchema instances that represent its
skills or functions.

17
18
19
20
21
22

This design decouples the agent’s intrinsic abilities from its operational history. The agt:canPerform property
defines the agent’s skill set, which is a relatively static and verifiable aspect of its identity. This allows a
Domain Authority to grant credentials based on a clear, auditable list of an agent’s capabilities. It ensures
that governance is applied to what an agent can do in principle, providing a stable foundation for trust and
permissioning. The agent’s actual execution of these capabilities is then recorded as separate act:Activity
instances, creating a clean and auditable separation between an agent’s potential and its performance.

23

11.1.3. The Specialization Pattern: Tailoring Agents and Goals

24
25
26
27
28

A key architectural principle is that the agt:Agent and agt:Goal classes are designed as extensible foundations.
This allows the framework to support a wide variety of agent architectures—such as Simple Reflex,
Goal-based, Deliberative (BDI), or LLM-based Agents—without being overly prescriptive. The primary
mechanism for this is the specialization of the base agt:Goal class, as the way an agent describes its goals
is fundamental to its nature.

29

This enables the creation of specific Goal subclasses that align with different agent behaviors:

30
31

–

AchievementGoal:: A goal to bring about a specific state of the world. Once the state is reached, the
goal is considered achieved and is complete. For example, “Deliver a package to a specific address.”

32
33

–

MaintenanceGoal:: A goal to keep a specific condition continuously true over time. This type of goal
persists and is never truly “complete.” For example, “Keep the server uptime above 99.9%.”

34
35

–

PerformingGoal:: A goal where success is defined by the execution of an action itself, regardless of the
resulting state. For example, “Perform a system diagnostic scan every 24 hours.”

36
37
38

–

QueryGoal:: A goal whose aim is to acquire information, to know the true value of a proposition, or
to otherwise reduce uncertainty before planning or acting. For example, “Determine the current traffic
conditions on the planned route.”

39
40
41

By defining these and other goal specializations (like Hard vs. Soft Goals with preference models), the
architecture allows for a rich and precise description of agent behavior. A sophisticated Deliberative Agent
might pursue complex AchievementGoal`s, while a simpler monitoring agent would be concerned with a

agt:Goal — A declarative, self-contained entity that represents the desired state or objective the agent
seeks to achieve.

94

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

`MaintenanceGoal. This provides a flexible and future-proof framework that can adapt to new agent designs
by simply introducing new, well-defined subclasses of agt:Goal.

3

11.2. Normative Classes

4
5
6

This clause provides the normative definitions for all class concepts within the HSML Agent Module. Each
class is detailed in a table that specifies its URI, description, JSON-LD context name, usage notes, and
relationship to other classes.

7

The namespace prefix agt: refers to https://www.spatialwebfoundation.org/ns/hsml/agent#.

8

11.2.1. Summary of Normative Classes

9

Table 131—Summary of HSML Agent Module Classes

10
11
12
13
14
15

Class

Description

agt:Agent

An autonomous entity capable of perceiving, deciding, and performing Activities to
achieve its goals.
A human person, modeled as a special type of agt:Agent with a self-sovereign identity.
A state or objective that an Agent aims to achieve through the performance of
Activities.

16

11.2.2. Class: agt:Agent

17

The class agt:Agent realises the AGENT concept in IEEE P2874 § 6.6.3:

18
19

“An ENTITY that senses, responds, and maintains a model of its environment while performing ACTIVITIES
to achieve its goals.”

20
21
22

agt:Agent represents an autonomous entity capable of perceiving its environment, making decisions, and
enacting act:Activity instances in pursuit of its goals. It may represent a person, robot, AI system, or other
autonomous entity.

23

Key Requirements

24
25

–

Identity: Every agt:Agent SHALL possess a Spatial Web Identifier (core:swid, W3C DID Corecompliant).

26
27

–

Goal-Directed: An agt:Agent SHALL be linked to one or more objectives it seeks to achieve via the
agt:hasGoal property.

28
29

–

Capability: An agt:Agent SHALL be linked to the act:ActivitySchema definitions for the activities it
is capable of performing via the agt:hasCapability property.

30

11.2.2.1. Class Definition

agt-Person
agt:Goal

31
32
33
34
35
36

Table 132—Class Definition for agt:Agent
RDF Class

agt:Agent

Is Abstract
Definition

No
An autonomous entity capable of perceiving, deciding, and performing Activities to
achieve its goals.
core:Domain

Subclass Of

95

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3
4
5
6

Table 132—Class Definition for agt:Agent (continued)
RDF Class

agt:Agent

Usage Note

Agents are the actors in the Spatial Web. They initiate gov:Contract instances and
perform act:Activity instances.
Provides the normative model for autonomous actors in the Spatial Web, supporting
goal-directed behavior and governed interactions.

Rationale

7

Table 133—Properties Summary for agt:Agent

8
9
10
11
12
13

Predicate

JSON-LD
name

Description

agt:hasGoal

hasGoal

agt:canPerform

canPerform

Links the Agent to one or more
agt:Goal
1..*
objectives it seeks to achieve.
Links the Agent to the schemas for act:
1..*
Activities it can perform.
ActivitySchema

14

11.2.2.2. Properties

15

This section provides the detailed normative definitions for the properties of the agt:Agent class.

16

11.2.2.2.1. Property: hasGoal

17

Cardinality
Requirement
Level
Mandatory
Mandatory

Table 134—Property Definition: agt:hasGoal

18
19
20
21
22
23
24
25
26
27
28
29

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

30

11.2.2.2.2. Property: canPerform

Usage Note

31
32
33
34
35
36
37
38
39

Range

agt:hasGoal
https://www.spatialwebfoundation.org/ns/hsml/agent#hasGoal
hasGoal
Mandatory
1..*
agent:Agent
agent:Goal
Links an Agent to one or more goals that it aims to fulfill through its
Activities.
Goals represent abstract or concrete states the Agent seeks to bring about. The
range is core:Entity to allow goals to be simple text descriptions or complex,
structured entities.

Table 135—Property Definition: agt:canPerform
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

agt:canPerform
https://www.spatialwebfoundation.org/ns/hsml/agent#canPerform
canPerform
Mandatory
1..*
agt:Agent
act:ActivitySchema
Identifies the types of Activities the Agent is capable of performing.

96

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 135—Property Definition: agt:canPerform (continued)

2
3

Usage Note

4

11.2.3. Class: agt:Person

5
6

The class agt:Person realises the PERSON concept in IEEE P2874 § 6.3.2.1.6, a special subtype of agt:Agent
that maintains a self-sovereign identity.

7
8

“A person type of Domain refers to entities belonging to the broader agential Domain, but maintaining the
capability to control their own Self-Sovereign Identity.”

9
10
11

agt:Person represents a human individual in the Spatial Web. While it inherits all the goal-directed and
capability-driven characteristics of an agt:Agent, its primary distinction is its intrinsic link to a self-sovereign
identity, ensuring individual control over personal data and interactions.

12

Key Requirements

13
14

–

Inheritance: An agt:Person SHALL inherit all requirements from agt:Agent, including having a core:
swid, agt:hasGoal, and agt:hasCapability.

15
16

–

Self-Sovereignty: The core:swid of an agt:Person SHALL represent a self-sovereign identity, giving
the individual ultimate control over their digital presence and credentials.

17
18

–

Personal Attributes: An agt:Person SHOULD use properties from well-known vocabularies like
schema.org to describe personal attributes for interoperability.

19

11.2.3.1. Class Definition

This property links an agent to the act:ActivitySchema templates for its skills.
This is distinct from an act:Activity, which is a record of a specific execution.

20
21
22
23
24
25
26
27
28
29

Table 136—Class Definition for agt:Person
RDF Class

agt:Person

Is Abstract
Definition
Subclass Of
Usage Note

No
A human person, modeled as a special type of agt:Agent with a self-sovereign identity.
agt:Agent
Represents human users who can initiate contracts and perform activities. The
management of its identity and credentials SHALL adhere to the principles of selfsovereignty.
Provides a specific class for human actors, distinguishing them from autonomous AI or
robotic agents and ensuring their rights and privacy are structurally represented.

Rationale

30
31
32
33
34
35
36
37

Table 137—Properties Summary for agt:Person
Predicate

JSON-LD
name

Description

schema:
givenName
schema:
familyName
schema:email

givenName

The given name (first name) of the xsd:string
person.
The family name (last name) of the xsd:string
person.
An email address for the person.
xsd:string

familyName
email

Range

97

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

Cardinality
Requirement
Level
0..1

Recommended

0..1

Recommended

0..*

Optional

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

11.2.3.2. Properties

2
3

This section provides the detailed normative definitions for properties commonly used with the agt:Person
class. Note that this class also inherits all properties from agt:Agent.

4

11.2.3.2.1. Property: givenName

5

Table 138—Property Definition: schema:givenName

6
7
8
9
10
11
12
13
14
15

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

16

11.2.3.2.2. Property: familyName

17

schema:givenName
https://schema.org/givenName
givenName
Recommended
0..1
agt:Person
xsd:string
The given name of the person.
Reuses the property from Schema.org for interoperability in representing
personal names.

Table 139—Property Definition: schema:familyName

18
19
20
21
22
23
24
25
26
27

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

28

11.2.3.2.3. Property: email

29
30
31
32
33
34
35
36
37
38
39

schema:familyName
https://schema.org/familyName
familyName
Recommended
0..1
agt:Person
xsd:string
The family name of the person.
Reuses the property from Schema.org for interoperability in representing
personal names.

Table 140—Property Definition: schema:email
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

schema:email
https://schema.org/email
email
Optional
0..*
agt:Person
xsd:string
An email address for the person.
Reuses the property from Schema.org for contact information. Multiple email
addresses are permissible.

98

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

11.2.4. Class: hsml:Organization

2

The class hsml:Organization realises the ORGANIZATION DOMAIN concept in IEEE P2874 § 6.6.3:

3
4

“An ORGANIZATION is a DOMAIN representing a group of Agents operating under shared governance,
norms, or objectives within the Spatial Web.”

5
6
7

hsml:Organization represents collective actors—such as companies, institutions, or public agencies—that
initiate, govern, and coordinate Activities, issue Contracts, and manage subordinate Domains, Agents, and
Things.

8

11.2.4.1. Class Definition

9

Table 141—Class Definition for hsml:Organization

10
11
12
13
14
15
16
17
18

RDF Class
Is Abstract
Definition

19

11.2.5. Class: agt:Goal

20
21

The class agt:Goal realizes the concept of an objective that an agt:Agent is motivated to achieve. A Goal
represents a state or objective that an Agent seeks to bring about through its activities.

22
23
24

It can be instantiated directly to represent a general-purpose goal or serve as a parent class for more specialized
goal types (e.g., AchievementGoal, MaintenanceGoal, TBD). Every agt:Agent is required to be linked to one
agt:Goal, making this concept fundamental to defining goal-directed behavior in the Spatial Web.

25

11.2.5.1. Class Definition

hsml:Organization
No
A collective group comprising Agents and/or Person under common governance,
capable of issuing Contracts, Credentials, and norms.
agt:Agent
Organizations model collective entities that issue norms, govern Agents, and manage
subordinate domains.
Provides the framework for representing legal entities, institutions, or other collective
actors essential to polycentric governance and domain hierarchy in the Spatial Web.

Subclass Of
Usage Note
Rationale

26

Table 142—Class Definition for agt:Goal

27
28
29
30
31
32
33
34
35

RDF Class

agt:Goal

Is Abstract
Definition

No
A state or objective that an Agent aims to achieve through the performance of
Activities.
Not specified in the provided text.
This class can be instantiated directly for general objectives. An LLM-based agent
could use the description property for task planning.
Provides a flexible, instantiable class for representing the objectives that drive
autonomous, goal-directed actions in the Spatial Web.

36

11.2.5.2. Properties

37

This section provides the detailed normative definitions for the properties of the agt:Goal class.

Subclass Of
Usage Note
Rationale

99

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

11.2.5.2.1. Property: description

2

Table 143—Property Definition: schema:description

3
4
5
6
7
8
9
10
11
12

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

13

11.2.5.2.2. Property: hasSubGoal

Usage Note

14

schema:description
http://schema.org/description
description
Mandatory
1..1
agt:Goal
xsd:string
A human-readable text description of the objective the Agent seeks to
achieve.
This value should be a clear, unambiguous string that explains the goal.

Table 144—Property Definition: agt:hasSubGoal

15
16
17
18
19
20
21
22
23
24
25

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

26

12. HSML Communication Module

27
28

The HSML Communication Module realizes the CHANNEL concept of IEEE P2874 (§6.6.6), providing a
semantic framework for modeling communication contexts and message exchange in the Spatial Web.

29
30
31
32

Where the Governance Module addresses rules and the Activity Module defines purposeful processes, the
Communication Module focuses on how entities interact during the execution of Activities. It provides a
minimal but extensible set of classes to represent Channels, Messages, and Subscriptions in a way that is
compatible with both the Hyperspace Transaction Protocol (HSTP) and external communication systems.

33

The design follows three guiding intentions:

34
35

–

To distinguish ephemeral communication contexts (Channels) from persistent identity contexts
(Domains).

36
37

–

To allow semantic projection of messages when provenance, traceability, or validation are required,
without redefining HSTP transport.

38
39

–

To ensure that communication remains Activity-linked, keeping transient exchanges grounded in
HSML’s enduring models of entities and processes.

Usage Note

agt:hasSubGoal
https://www.spatialwebfoundation.org/ns/hsml/agent#hasSubGoal
subGoal
Optional
0..* (zero to many)
agt:Goal
agt:Goal
Links a Goal to one or more subordinate Goals that contribute to the
fulfillment of the parent Goal.
This property enables the creation of goal trees or hierarchies (hierarchical
goal decomposition), which is essential for complex planning.

100

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3

The Communication Module thereby acts as the “conversation layer” of HSML: lightweight enough to support
ad-hoc collaboration, yet formally defined so that message flows can participate in governance, provenance,
and discovery across the Spatial Web.

4

12.1. Architectural Principles and Design Rationale

5
6
7

This clause explains the design choices behind the HSML Communication Module and how they satisfy
IEEE P2874’s requirements for Channels and Message exchange as described in §6.6.6. The principles are
informative (non-normative) but motivate the normative class and property definitions introduced later.

8

12.1.1. Channels as Ephemeral Interaction Contexts

9
10
11
12
13
14

A core principle is that Channels are not Domains. While Domains represent enduring identity-bearing
contexts (geographic, organizational, or conceptual), Channels are ad-hoc and transient groupings of HSML
Entities around a purpose or Activity. P2874 defines a Channel as “a stream of HSML ENTITIES that
are related to an ACTIVITY of a specific context that does not itself warrant a DOMAIN or hierarchy.”
This design ensures that Channels do not alter the permanent domain hierarchy but still allow session-like
coordination.

15

–

Channels are modeled as subclass of hsml:Entity but declared disjoint from hsml:Domain.

16

–

Membership is flexible, but typically they are Agent, Person entities.

17
18

–

Sub-channels allow hierarchical scoping of collaborative contexts without redefining domain
hierarchies.

19

12.1.2. Messages as Optional Semantic Projections

20
21
22
23

The Communication Module distinguishes wire messages (defined by the Hyperspace Transaction Protocol,
HSTP) from semantic message entities. HSTP envelopes move bytes; Channels may choose to project
messages as HSML comm:Message entities when semantic traceability is required (e.g., for provenance,
policy, or analytics). This duality prevents duplication of concepts:

24
25

–

At minimum, Channel membership can simply reference Agents and Activities, with message exchange
implicit in HSTP.

26
27
28

–

When auditing, governance, or discovery are required, each HSTP envelope may be projected into
a comm:Message entity with semantic annotations (sender, media type, content schema, relation to
Channel).

29
30

–

This pattern aligns with W3C PROV-O’s distinction between events (Activities/Agents) and artifacts
(Entities).

31

12.1.3. Separation of Concerns: HSTP vs HSML

32
33
34

The Communication Module does not redefine transport. HSTP specifies the abstract message envelope,
headers, and bindings to HTTP, MQTT, QUIC, etc. The Communication Module only defines how such
transported payloads are contextualized in HSML Channels. This ensures:

35

–

No duplication of protocol details. Media types, signatures, and routing remain in HSTP.

36
37

–

Semantic overlay only when needed: Channels can record provenance of what was exchanged, not
how the bytes were framed.

101

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

–

3

12.1.4. Activity-Linked Communication

4

Channels are always linked to Activities. This supports use cases such as:

5

–

Real-time coordination of an Activity (e.g., multiple agents working on a shared task).

6

–

Streaming sensor data into a Channel associated with a monitoring Activity.

7

–

Collaborative annotation or decision-making during an Activity lifecycle.

8
9

The hsml:forActivity property ensures that Channels carry explicit purpose, grounding otherwise transient
message streams in the enduring Activity model of HSML.

10

12.1.5. Governance Delegation

11

Policies and credential checks are not embedded directly in Channels. Instead:

12

–

Domain-level governance defines who may create or join Channels.

13
14

–

Channels may include optional hints (e.g., hsml:allowedAgent) but formal credential gates and policy
enforcement remain in the Governance Module.

15
16

–

This simplifies the Channel model while ensuring consistent enforcement across Activities, Domains,
and Channels.

17

12.1.6. Interoperability and Extensibility

18

The design follows Semantic Web and Internet principles:

19
20

–

Media type declarations in HSTP headers allow arbitrary payloads (JSON-LD, SHACL instance data,
binary media).

21
22

–

comm:Message entities can reference a comm:contentSchema (SHACL or JSON Schema) for
validation, similar to how HTTP uses Content-Type with a profile parameter or Link rel=describedby.

23
24

–

Sub-channel structures resemble chat rooms or topic hierarchies in existing systems (MQTT, XMPP),
but retain formal semantics.

25
26

–

Alignments with schema.org (schema:Message, schema:CommunicateAction) are possible for
lightweight web interoperability.

27

12.1.7. Summary

28
29
30
31
32

The Communication Module provides a lightweight, semantically grounded way to model Channels and
Messages without duplicating HSTP transport concerns or Domain governance rules. It supports ephemeral,
Activity-linked collaboration while leaving transport framing to HSTP and policy enforcement to the
Governance Module. This separation yields clarity, reuse, and flexibility across diverse use cases, from adhoc collaboration to persistent provenance trails.

33

12.2. Normative Classes

34

This clause provides the normative definitions for the classes of the Communication Module.

Extensibility: new bindings (e.g., WebRTC, QUIC streams) require no changes to HSML—Channels
remain abstract contexts.

102

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

12.2.1. Summary of Communication Module Classes

2

Table 145—Summary of HSML Communication Module Classes

3
4
5
6
7
8
9

Class

Description

comm:Channel

Ephemeral, non-hierarchical, Domain-hosted context for grouping Entities and
exchanging Messages around Activities.
Optional semantic description of a communicative artifact exchanged via HSTP. Used
when provenance, validation, or audit are needed.
Declares an Agent’s interest in receiving Messages from a Topic or Channel, optionally
with filters and delivery hints.

10

12.2.2. Class: comm:Channel

11
12
13
14

The comm:Channel class realizes the CHANNEL concept as defined in the IEEE P2e874 draft standard.
As a central element of the communications (comm) module, it provides a contextual container that links
participants, data, and messages around specific Activities without forming part of the permanent domain
hierarchy. This enables ad-hoc, session-based, or otherwise transient coordination and monitoring.

15

This class is a subclass of hsml:Entity, inheriting a hsml:swid as its unique identifier.

16

12.2.2.1. Key Requirements & Design Principles

17

–

A comm:Channel shall link to at least one hsml:Activity it supports.

18
19

–

A comm:Channel shall be disjoint from hsml:Domain, as it represents a non-hierarchical, transient
grouping.

20

–

A comm:Channel shall include one or more participants via the core:hasParticipant property.

21
22

–

Parent-child relationships between channels shall be modeled using the inverse properties
comm:hasSubChannel and comm:subChannelOf.

23
24

–

Governance and access control are intentionally delegated to the Governance Module and are not
embedded properties of a Channel.

25

12.2.2.2. Class Definition

comm:Message
comm:Subscription

26
27
28
29
30
31
32
33
34
35
36
37

Table 146—Class Definition for comm:Channel
RDF Class
Is Abstract
Definition
Subclass Of
Usage Note
Rationale

comm:Channel
No
A contextual, non-hierarchical grouping of entities associated with a specific Activity or
purpose, for coordinating transient communications.
hsml:Entity
Channels are for transient, ad-hoc collaboration; they do not define domain boundaries
or permanent hierarchies. The core namespace refers to a separate module defining
foundational, cross-cutting properties.
Provides a lightweight mechanism for coordinating information and participants.
Access control is delegated to the Governance Module; Channels do not embed their
own access control lists (ACLs).

103

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

12.2.2.3. Properties Summary

2

Table 147—Properties Summary for comm:Channel

3
4
5
6
7
8
9
10
11
12
13
14

Predicate

JSON(-LD)
Name

Description

Cardinality

rdf:type
hsml:swid

@type
swid

1..n
1

core:
hasParticipant
comm:forActivity
comm:
hasSubChannel
comm:
subChannelOf

hasParticipant

Declares the resource as an instance of comm:Channel.
The Spatial Web Identifier (SWID) inherited from hsml:
Entity.
Identifies the entities participating in the Channel.

forActivity
hasSubChannel

Links the Channel to the Activity it supports.
Links to a nested sub-channel.

1..n
0..n

subChannelOf

Links to the parent channel.

0..1

15

12.2.2.4. Property Details

16

12.2.2.4.1. Property: core:hasParticipant

17

Table 148—Property Definition: core:hasParticipant

18
19
20
21
22
23
24
25
26

Property
IRI
JSON Name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

27

12.2.2.4.2. Property: comm:forActivity

28
29
30
31
32
33
34
35
36
37

1..n

core:hasParticipant
https://schema.spatialwebfoundation.org/core#hasParticipant
hasParticipant
Mandatory
1..n
comm:Channel
hsml:Entity
Links the Channel to its participants (Agents, Things, or other Entities).
A Channel must have at least one participant to be meaningful.

Table 149—Property Definition: comm:forActivity
Property
IRI
JSON Name
Requirement Level
Cardinality
Range
Definition
Usage Note

comm:forActivity
https://schema.spatialwebfoundation.org/comm#forActivity
forActivity
Mandatory
1..n
hsml:Activity
Associates the Channel with one or more Activities it supports or relates to.
Channels provide the necessary communication and data context for their
referenced Activities.

104

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

12.2.2.4.3. Property: comm:hasSubChannel

2

Table 150—Property Definition: comm:hasSubChannel

3
4
5
6
7
8
9
10
11
12
13

Property
IRI
JSON Name
Requirement Level
Cardinality
Range
Inverse Property
Definition

14

12.2.2.4.4. Property: subChannelOf

Usage Note

15

comm:hasSubChannel
https://schema.spatialwebfoundation.org/comm#hasSubChannel
hasSubChannel
Optional
0..n
comm:Channel
comm:subChannelOf
Links the Channel to its sub-channels for hierarchical structuring of
information streams.
This property enables efficient downward traversal of the Channel hierarchy
(from parent to children).

Table 151—Property Definition: comm:subChannelOf

16
17
18
19
20
21
22
23
24
25
26

Property
IRI
JSON Name
Requirement Level
Cardinality
Range
Inverse Property
Definition
Usage Note

27

12.2.2.5. Example

28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44

{

comm:subChannelOf
https://schema.spatialwebfoundation.org/comm#subChannelOf
subChannelOf
Optional
0..1
comm:Channel
comm:hasSubChannel
Links a sub-channel to its parent Channel.
This property allows for efficient upward traversal of the Channel hierarchy.
The 0..1 cardinality enforces a strict tree structure, preventing a single
channel from having multiple parents.

"@context": "http://spatialwebfoundation.org/context/hsml.jsonld",
"@id": "did:swid:channel:metro-hospital-drone-ops",
"@type": "Channel",
"name": "Metro Hospital Drone Operations",
"description": "Coordination channel for all emergency medical supply
deliveries in the downtown metro area.",
"swid": "did:swid:channel:metro-hospital-drone-ops",
"forActivity": "did:swid:activity:med-delivery-ops",
"hasParticipant": [
"did:swid:agent:drone-7",
"did:swid:agent:ops-dashboard"
],
"hasSubChannel": [
{
"@id": "did:swid:channel:drone-7-telemetry",
"@type": "Channel",

105

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3
4
5
6
7
8
9
10
11
12

"name": "Drone 7 - Flight Telemetry",
"description": "Real-time flight data, battery status, and
payload vitals for Drone 7.",
"swid": "did:swid:channel:drone-7-telemetry",
"forActivity": "did:swid:activity:med-delivery-ops",
"hasParticipant": [
"did:swid:agent:drone-7"
],
"subChannelOf": "did:swid:channel:metro-hospital-drone-ops"
}
]
}

Figure 10—Example of a Channel with a Sub-Channel using DIDs

13
14

12.2.3. Class: comm:Message

15
16
17
18

comm:Message models an optional semantic projection of a transported envelope (per HSTP) into HSML.
It is used to persist provenance, governance, validation, discovery, and correlation of communications that
occur within a chan:Channel and concern an hsml:Activity. Transport framing, headers, and bindings remain
the responsibility of HSTP; comm:Message captures the who/what/when/why at the semantic layer.

19
20

Messages are not required for all exchanges. Implementations materialize comm:Message only when
traceability or auditability is needed.

21

Key Requirements

22

a)

A comm:Message shall be associated with exactly one chan:Channel via comm:inChannel.

23

b)

A comm:Message shall be linked to at least one hsml:Activity via comm:aboutActivity.

24

c)

A comm:Message shall identify at least one comm:sender of type hsml:Agent.

25

d)

A comm:Message shall record a generation timestamp (e.g., prov:generatedAtTime).

26
27

e)

A comm:Message should declare comm:mediaType and one or more comm:contentSchema to enable
validation/routing.

28
29

f)

A comm:Message may include integrity (comm:contentHash) and ordering (comm:sequenceNumber)
metadata, and may correlate to other messages (comm:correlatesWith).

30

12.2.3.1. Class Definition

31
32
33
34
35
36
37
38
39
40

Table 152—Class Definition for comm:Message
RDF Class

comm:Message

Is Abstract
Definition

No
Semantic record of a communicative artifact exchanged within a Channel and about an
Activity; optional overlay on HSTP transport.
core:Concept
“Message”: “comm:Message”
Use to capture provenance (who/when), integrity (hash/sequence), typing (media/
profile), and correlation (threads, request/response). Payload may be stored inline or
referenced by immutable link.

Subclass Of
JSON-LD Term
Usage Notes

106

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

12.2.3.2. Properties Summary

2

Table 153—Properties Summary for comm:Message

3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30

Predicate

JSON-LD
name

Description

Range

Cardinality
Requirement

comm:
inChannel
comm:
aboutActivity
comm:sender
comm:recipient

inChannel

chan:Channel

1..1

Mandatory

hsml:Activity

1..*

Mandatory
Mandatory
Optional

mediaType

hsml:Agent
hsml:Agent or
chan:Channel
xsd:anyURI

1..*
0..*

comm:
mediaType
comm:
contentSchema
comm:content

Channel carrying this message
(context).
Activity that this message
concerns.
Author/emitter of the message.
Intended audience (Agents or
Channels).
IANA media type (align with
HSTP header).
Schema/profile describing payload
(SHACL, JSON Schema, etc.).
Embedded payload or immutable
link to content.

0..1

Recommended

xsd:anyURI

0..*

Recommended

31

12.2.3.3. Properties

32

12.2.3.3.1. Property: inChannel

aboutActivity
sender
recipient

contentSchema
content

comm:
contentHash
Integrity hash (e.g., multihash) of
contentHash
payload.
comm:
sequenceNumber Monotonic sequence number
sequenceNumber
within the Channel.
comm:
correlatesWith
Correlation to another message
correlatesWith
(threading, request/response).
prov:
generatedAtTime UTC timestamp when produced.
generatedAtTime
prov:
wasAttributedTo Attribution of authorship (often
wasAttributedTo
same as comm:sender).

33
34
35
36
37
38
39
40
41
42

rdf:langString
0..1
or xsd:
string or xsd:
base64Binary or
xsd:anyURI
xsd:string
0..1

Optional

xsd:integer

0..1

Optional

comm:Message

0..*

Optional

xsd:dateTime

1..1

Mandatory

hsml:Agent

1..*

Mandatory

Optional

Table 154—Property Definition: comm:inChannel
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

comm:inChannel
https://www.spatialwebfoundation.org/ns/hsml/comm#inChannel
inChannel
Mandatory
1..1
comm:Message
chan:Channel
Binds the message to its carrying Channel (context).
Enables ordered archival, replay, and governance scoping per Channel.

107

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

12.2.3.3.2. Property: aboutActivity

2

Table 155—Property Definition: comm:aboutActivity

3
4
5
6
7
8
9
10
11

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

12

12.2.3.3.3. Property: sender

13

comm:aboutActivity
https://www.spatialwebfoundation.org/ns/hsml/comm#aboutActivity
aboutActivity
Mandatory
1..*
comm:Message
hsml:Activity
Identifies the Activity that the message concerns.
Grounds transient communication in enduring Activity provenance.

Table 156—Property Definition: comm:sender

14
15
16
17
18
19
20
21
22

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

23

12.2.3.3.4. Property: recipient

24

comm:sender
https://www.spatialwebfoundation.org/ns/hsml/comm#sender
sender
Mandatory
1..*
comm:Message
agent:Agent
Agent that authored or emitted the message.
Often mirrored with prov:wasAttributedTo for PROV alignment.

Table 157—Property Definition: comm:recipient

25
26
27
28
29
30
31
32
33
34

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

35

12.2.3.3.5. Property: mediaType

36
37
38

comm:recipient
https://www.spatialwebfoundation.org/ns/hsml/comm#recipient
recipient
Optional
0..*
comm:Message
hsml:Agent or chan:Channel
Intended audience of the message.
Use multiple values for broadcast/fan-out. Omit when Channel audience
suffices.

Table 158—Property Definition: comm:mediaType
Property
IRI

comm:mediaType
https://www.spatialwebfoundation.org/ns/hsml/comm#mediaType

108

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 158—Property Definition: comm:mediaType (continued)

2
3
4
5
6
7
8
9

JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

10

12.2.3.3.6. Property: contentSchema

11

mediaType
Recommended
0..1
comm:Message
xsd:anyURI
IANA media type of the payload (align with HSTP).
Use IRI form for media types (e.g., https://iana.org/assignments/media-types/
application/json).

Table 159—Property Definition: comm:contentSchema

12
13
14
15
16
17
18
19
20
21

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

22

12.2.3.3.7. Property: content

comm:contentSchema
https://www.spatialwebfoundation.org/ns/hsml/comm#contentSchema
contentSchema
Recommended
0..*
comm:Message
xsd:anyURI
Schema/profile describing payload (e.g., SHACL shape IRI, JSON Schema
URL).
Enables validation and content negotiation by profile.

Usage Note

23

Table 160—Property Definition: comm:content

24
25
26
27
28
29
30
31
32
33

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

34

12.2.3.3.8. Property: contentHash

35
36
37
38
39
40

comm:content
https://www.spatialwebfoundation.org/ns/hsml/comm#content
content
Optional
0..1
comm:Message
rdf:langString or xsd:string or xsd:base64Binary or xsd:anyURI
The payload itself (inline text/binary) or a canonical, immutable link to it.
Prefer immutable links plus comm:contentHash for large or sensitive
payloads.

Table 161—Property Definition: comm:contentHash
Property
IRI
JSON name
Requirement Level
Cardinality

comm:contentHash
https://www.spatialwebfoundation.org/ns/hsml/comm#contentHash
contentHash
Optional
0..1

109

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 161—Property Definition: comm:contentHash (continued)

2
3
4
5

Domain
Range
Definition
Usage Note

6

12.2.3.3.9. Property: sequenceNumber

7

comm:Message
xsd:string
Integrity hash of the payload (e.g., multihash, SHA-256).
When comm:content is a link, the hash ensures immutability/verifiability.

Table 162—Property Definition: comm:sequenceNumber

8
9
10
11
12
13
14
15
16

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

17

12.2.3.3.10. Property: correlatesWith

18

comm:sequenceNumber
https://www.spatialwebfoundation.org/ns/hsml/comm#sequenceNumber
sequenceNumber
Optional
0..1
comm:Message
xsd:integer
Monotonic ordering value relative to the Channel.
Useful for replay cursors and gap detection.

Table 163—Property Definition: comm:correlatesWith

19
20
21
22
23
24
25
26
27

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

28

12.2.3.3.11. Property: prov:generatedAtTime

29
30
31
32
33
34
35
36
37
38

comm:correlatesWith
https://www.spatialwebfoundation.org/ns/hsml/comm#correlatesWith
correlatesWith
Optional
0..*
comm:Message
comm:Message
Links to related messages (e.g., request/response, thread, saga).
Use multiple values to express multi-message conversations or branches.

Table 164—Property Definition: prov:generatedAtTime
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

prov:generatedAtTime
http://www.w3.org/ns/prov#generatedAtTime
generatedAtTime
Mandatory
1..1
comm:Message
xsd:dateTime
UTC timestamp when the message was produced.
Use Z-suffixed times or explicit offset; recommend millisecond precision.

110

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

12.2.3.3.12. Property: prov:wasAttributedTo

2

Table 165—Property Definition: prov:wasAttributedTo

3
4
5
6
7
8
9
10
11
12

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

13

13. HSML Hyperspace Module: Normative Specification

14

13.1. Introduction

15
16

The Hyperspace Module defines the structural foundation for representing spatial relationships in HSML. It
realizes the HYPERSPACE concept of IEEE P2874 (§ 6.2.1), which defines a hyperspace as:

17
18
19

“A set whose elements are related by a formal notion of path, satisfying identity and
composition laws. Paths may be abstract, as long as they can be traversed in a fashion akin
to the paths between points in familiar spaces.”

20
21
22
23
24

This abstract definition is intentionally broad. It allows HSML to treat a wide range of structures— geographic
coordinates, social networks, organizational hierarchies, logical states, numeric values, or semantic concepts
— under one unifying abstraction. Hyperspaces ensure that Domains are not just collections of entities,
but structured environments in which relationships such as adjacency, connectivity, reachability, and
composition can be explicitly represented and navigated.

25

Crucially, Hyperspaces in HSML are made operational by explicit mappings:

26

–

Elements → classes or datatypes (e.g., geo:Geometry, cell:Cell, xsd:integer).

27

–

Arrows (atomic steps) → RDF properties or edge classes (e.g., graph:edge, cell:adjacentTo).

28
29

–

Paths (compositions) → explicit path resources (e.g., graph:Route, cell:CellChain) or SPARQL
property paths.

30

–

Operations → instances of hsml:Operation bound to these mappings, validated via SHACL profiles.

31
32
33
34

Through these mappings, navigation (neighbors, reachability, path composition) and operations (distance,
similarity, routing) are not hard-coded into the ontology, but arise from declared structures that can be
validated, extended, and executed. This makes the Hyperspace Module both abstractly universal and
practically concrete.

35
36
37

Because the Spatial Web encompasses diverse domains, the Hyperspace Module is modular by design. The
core module defines only the minimum semantics common to all Hyperspaces: elements, arrows, paths, and
universal properties. Specializations provide richer semantics:

38

–

prov:wasAttributedTo
http://www.w3.org/ns/prov#wasAttributedTo
wasAttributedTo
Mandatory
1..*
comm:Message
hsml:Agent
Attribution of authorship/agency for the message.
Often same individual(s) as comm:sender; keep both for PROV/tooling
compatibility.

GraphSpace — connectivity and networks.

111

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

–

CellularSpace — grids and tessellations.

2

–

VectorSpace — coordinate systems and geometries.

3

–

MetricSpace — distance and similarity.

4

–

Datatype Hyperspaces — value domains such as numbers, strings, colors, or tensors.

5
6
7

This modular structure allows implementers to import only what they need while preserving interoperability.
Namespaces mirror this pattern: the core vocabulary resides in the hyperspace# namespace, while each
specialization occupies its own sub-namespace under hyperspace/.

8
9

In this way, the Hyperspace Module provides both a universal foundation and a scalable framework for
extension, making it a cornerstone of HSML and of the Spatial Web as a whole.

10

13.1.1. Navigation by Mapping

11
12

Navigation in a Domain’s Hyperspace is not hard-coded; it is achieved by mapping abstract constructs to
RDF structures:

13

–

Elements

14
15

–

Mapped to an RDF class (e.g., graph:Node, cell:Cell) or a datatype (e.g., geosparql:wktLiteral,
tensor:ArrayLiteral).

16
17

–

Optionally bound via a hyperspace:spatialProperty (e.g., geo:hasGeometry, hsml:cell) to point to
the actual value.

18

–

Arrows (atomic steps)

19
20

–

Mapped to an RDF property (e.g., graph:edge, cell:adjacentTo) connecting valid element
instances.

21
22

–

Alternatively represented as a reified edge class with hsml:source and hsml:target, or as RDF-star
annotated triples for weighted/labeled edges.

23

–

Paths (compositions)

24
25

–

Implicit: expressed through SPARQL property paths over the declared arrow property (e.g.,
(graph:edge)+ for reachability).

26
27

–

Explicit: represented as RDF resources (e.g., graph:Route, cell:CellChain) with ordered hsml:
step, hsml:startsAt, and hsml:endsAt properties.

28
29
30

These mappings allow core navigation queries such as: - Neighbors: ?a hsml:hasArrowType ?b Reachability: ASK { ?a ( ?arrow )+ ?b } - Path Extraction: select explicit path resources linking two
elements.

31
32

Thus, navigation is universally defined but concretely realized through the mapping pattern chosen for each
Hyperspace specialization.

33

13.1.2. Design Decision: Paths with Literal Elements (Generalized)

34
35
36
37
38

In some Hyperspaces, hsml:hasElementType is a datatype (e.g., xsd:string, JSON literals, tensors, WKT).
Because RDF literals cannot be subjects, arrows and paths CANNOT be expressed as direct triples between
literals. This decision specifies general, profile-able mapping patterns and properties that work for any
element kind (class- or datatype-based) and any path representation. (We include a geo:Geometry example
purely illustratively.)

112

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

13.1.2.1. Normative Principles

2
3
4
5
6

P1 — No literal
Arrows/paths SHALL NOT rely on triples requiring a literal subject.
subjects
P2 — Arrow-driven Navigation semantics (neighbors, reachability, composition) SHALL be
navigation
derived from the Hyperspace’s arrow mapping (predicate edge or reified
edge), not from any serialized path payload.

7
8
9

P3 — Two
interoperable
mappings

10
11
12

P4 — Path resource Paths SHOULD be first-class resources (subclasses of hsml:Path) so
portability
implementations can attach metadata (cost, provenance) and validate steps
with SHACL—independent of element representation.

13

13.1.2.2. Patterns

14
15
16
17
18
19

Pattern L1 —
Value-Node
(RECOMMENDED)

Materialize each element as a resource node (instances of a class declared
by hsml:hasElementType), and carry the raw value via a datatype property
(hsml:elementValue or a domain-standard property). Arrows are normal
object properties (hsml:arrowProperty) or reified edge instances (hsml:
arrowClass with hsml:arrowSource / hsml:arrowTarget). Paths use hsml:
startsAt / hsml:endsAt and optional hsml:step.

20
21
22
23
24

Pattern L2 — LiteralEnd (SUPPORTED)

Keep elements as literals (i.e., hsml:hasElementType is a datatype).
Represent arrows as reified edge resources with literal endpoints
(hsml:arrowSourceValue, hsml:arrowTargetValue). Represent paths as
resources whose endpoints/steps are literal-valued (hsml:startsAtValue,
hsml:endsAtValue, hsml:stepList or hsml:pathLiteral).

25
26

NOTE—L1 enables property-path traversals and richer per-element metadata; L2 avoids node materialization at
the cost of reified navigation. Choose per data-volume, query needs, and tooling.

27

13.1.3. Separation of Domain and Hyperspace

28
29
30

Domain provides identity and contextual scope. Hyperspace attached to a Domain defines how its entities
relate. This separation allows the same Domain to be interpreted under different logics (graph, metric, cellular,
temporal) without altering identity.

31

13.1.4. Universal Operations

32

A small algebra applies to all Hyperspaces:

33

–

Identity — every element is reachable from itself.

34

–

Reachability — test existence of a path between elements.

35

–

Path Composition — concatenate two compatible paths.

36

–

Subspace Formation — restrict a Hyperspace to a subset of elements and induced arrows.

37

Specialized Hyperspaces extend this with richer operations (e.g., shortest path, similarity metrics).

Profiles MAY choose either Value-Node (recommended) or Literal-End
mappings. Both are first-class in HSML; the choice MUST be advertised by
the Hyperspace’s mapping properties.

113

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

13.1.5. Modularity and Namespaces

2

Namespaces follow a predictable hierarchy:

3

–

Core: https://www.spatialwebfoundation.org/ns/hsml/hyperspace#

4

–

GraphSpace: https://www.spatialwebfoundation.org/ns/hsml/hyperspace/graph#

5

–

CellularSpace: …/cell#

6

–

VectorSpace: …/vector#

7

–

MetricSpace: …/metric#

8

–

Datatype Hyperspaces: …/datatype#

9

This structure ensures clarity, modularity, and extensibility.

10

By organizing namespaces in this way, several goals are achieved:

11
12

–

Clarity — It is immediately clear whether a term belongs to the core Hyperspace abstraction or a
specialized extension.

13

–

Modularity — Implementers can import only the extensions they need, keeping systems lightweight.

14
15
16

–

Extensibility — New families of Hyperspaces (e.g., probabilistic space, tensor spaces, state-machine
spaces) can be introduced simply by assigning them new sub-namespaces, without disrupting existing
definitions.

17
18

–

Best Practices — This mirrors established approaches in ontology engineering, where namespaces are
stable, descriptive, and composable.

19
20
21

In effect, the namespace design mirrors the architecture of Hyperspaces themselves: a simple core scaffold
that can be specialized into many forms, each with its own dedicated space but all interoperable under a
common root.

22

13.1.6. Hyperspace of Hyperspaces

23
24

A Hyperspace is itself an Entity and may serve as an element within another Hyperspace. This enables
Hyperspaces of Hyperspaces, supporting higher-order composition:

25

–

Systems-of-Systems — city networks combined into a national network.

26

–

Federations — regional grids aggregated into a global monitoring system.

27

–

Holarchies — nested Hyperspaces reflecting P2874’s holonic design principles.

28

This higher-order capability is essential for modeling federated and polycentric structures in the Spatial Web.

29

13.1.7. Time as an Extension

30
31
32

Temporal semantics are not universal and are therefore modeled as extensions. Arrows and paths may carry
temporal annotations (time:validDuring, time:hasDuration) using OWL-Time. Profiles may define spatiotemporal Hyperspaces when time is central to navigation and reasoning.

114

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

13.1.8. Identity and Governance

2
3
4

Every Hyperspace is identified by a Spatial Web Identifier (SWID) conformant with W3C DID Core. This
ensures resolvability and governance. While governance logic is external, the identifier anchors policies,
credentials, and trust enforcement.

5

13.1.9. Validation Through Profiles

6
7
8

Constraints are expressed via SHACL profiles, not fixed in OWL. Profiles may restrict element types,
adjacency properties, or valid transitions, providing rigor in specific deployments while preserving generality
in the core.

9

Summary:

10
11
12
13
14

The Hyperspace Module defines elements, arrows, paths, and operations as a minimal universal abstraction.
By mapping these to RDF constructs, navigation and reasoning are enabled consistently across all domains.
SHACL profiles enforce structural integrity, while modular namespaces and higher-order composition
provide extensibility. Together, these design decisions make the Hyperspace Module a cornerstone of HSML
and the Spatial Web.

15

13.2. Normative Classes

16

This clause provides the normative definitions for the classes of the Hyperspace Module.

17

13.2.1. Summary of Hyperspace Module Classes

18

Table 166—Summary of Hyperspace Module Classes

19
20
21
22
23
24
25
26
27

Class

Description

hspace:Hyperspace

Domain-attached structural abstraction that declares element, arrow, and path types and
optional mappings for navigation and operations.
First-class representation of composed paths (finite compositions of arrows); may carry
endpoints, ordered steps, and serialized path values.
Declarative operation bound to a Hyperspace (e.g., reachability, routing, metric
evaluation), referencing the mappings it consumes.
Higher-order space whose elements are themselves Hyperspaces; supports federation,
holarchies, and systems-of-systems.

28

13.2.2. Class: hspace:Hyperspace

29
30

The class hspace:Hyperspace realises the HYPERSPACE concept in IEEE P2874 § 6.6.3 and Hyperspace
Modeling principles:

31
32
33

“A HYPERSPACE is a spatial structure that specifies relationships among elements (points) in a DOMAIN,
including notions such as adjacency, distance, connectivity, or metric, enabling spatial reasoning and
operations within the Spatial Web.”

34
35
36

hspace:Hyperspace provides the formal structure for expressing the spatial logic that governs how entities in
a Domain relate to each other. It generalizes topology, metric spaces, graphs, cellular grids, vector spaces, and
datatype spaces into a unified model, supporting composable and navigable relationships across Domains.

37

This specification separates:

hspace:Path
hspace:Operation
hspace:
HyperspaceOfHyperspace

115

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

–

Hyperspace-level properties — what the space is and how navigation is driven (element type, arrow
type, path type, optional edge predicate).

3

–

Element-class properties — properties used on the element instances (when elements are resources).

4
5

–

Path-class properties — properties used on path instances (explicit paths), including variants for
literal-based elements.

6

13.2.2.1. Class Definition

7

Table 167—Class Definition for hspace:Hyperspace

8
9
10
11
12
13
14
15
16

RDF Class
Is Abstract
Definition

17

13.2.2.2. Hyperspace Properties (Summary)

hspace:Hyperspace
No
A spatial structure attached to a Domain that defines relationships among its elements,
supporting spatial reasoning, navigation, and operations.
hspace:Entity
Hyperspaces specify how elements in a Domain relate (e.g., adjacency, distance) and
drive spatial queries, validation, and tooling.
Provides a formal, flexible mechanism to encode spatial structure (graph, cellular,
vector, metric, datatype) that underpins Spatial Web reasoning.

Subclass Of
Usage Note
Rationale

18

Table 168—Properties Summary for hspace:Hyperspace

19
20
21
22
23
24
25
26
27
28
29
30
31
32
33

Predicate

JSON(-LD)
name

Description

Cardinality

rdf:type

@type

1..n

hspace:swid
hspace:
hasElementType
hspace:
hasArrowType
hspace:
hasPathType
hspace:
arrowProperty
hspace:
hasOperation

swid
hasElementType

Declares the resource as an instance of hspace:
Hyperspace.
Spatial Web Identifier conformant with W3C DID Core.
Type of elements (class or datatype) represented in the
Hyperspace.
Type of atomic one-step relations (“arrows”) between
elements.
Type(s) of composed paths recognised in the Hyperspace.
(Optional) RDF predicate used for atomic steps (direct
edges).
Declares supported operations or transformations for the
Hyperspace.

0..1

34

13.2.2.2.1. Property: rdf:type

35
36
37
38
39
40
41

hasArrowType
hasPathType
arrowProperty
hasOperation

Table 169—Property Definition: rdf:type
Property
IRI
JSON name
Requirement Level
Cardinality
Domain

rdf:type
http://www.w3.org/1999/02/22-rdf-syntax-ns#type
@type
Mandatory
1..n
hspace:Hyperspace

116

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

1
1
1
0..n

0..n

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 169—Property Definition: rdf:type (continued)

2
3

Range
Definition

4

13.2.2.2.2. Property: hasElementType

5

hspace:Hyperspace
Declares the resource as an instance of hspace:Hyperspace.

Table 170—Property Definition: hspace:hasElementType

6
7
8
9
10
11
12
13
14

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

15

13.2.2.2.3. Property: hasArrowType

16

hspace:hasElementType
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#hasElementType
hasElementType
Mandatory
1
hspace:Hyperspace
rdfs:Class or datatype IRI
Identifies the type of elements (points) comprising the Hyperspace.
Examples: geo:Geometry, hspace:Cell, xsd:string, geo:wktLiteral.

Table 171—Property Definition: hspace:hasArrowType

17
18
19
20
21
22
23
24
25
26
27

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

28

13.2.2.2.4. Property: hasPathType

29
30
31
32
33
34
35
36
37
38
39
40

hspace:hasArrowType
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#hasArrowType
hasArrowType
Mandatory
1
hspace:Hyperspace
owl:ObjectProperty IRI or rdfs:Class
Identifies the atomic one-step relation (“arrow”) connecting elements.
Use an object property IRI for direct edges (e.g., ex:connect). If using reified
edges, hasArrowType MAY point to the edge class (defined outside this
section).

Table 172—Property Definition: hspace:hasPathType
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

hspace:hasPathType
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#hasPathType
hasPathType
Optional
0..n
hspace:Hyperspace
rdfs:Class or datatype IRI
Identifies the type(s) of composed paths (finite compositions of arrows)
recognised in the Hyperspace.
Examples: hspace:Path, ex:Route, vector:LineString, geo:wktLiteral
(LINESTRING).

117

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

13.2.2.2.5. Property: arrowProperty

2

Table 173—Property Definition: hspace:arrowProperty

3
4
5
6
7
8
9
10
11
12

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

13

13.2.2.2.6. Property: hasOperation

hspace:arrowProperty
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#arrowProperty
arrowProperty
Optional
0..1
hspace:Hyperspace
owl:ObjectProperty IRI
Declares the RDF predicate used to encode atomic steps (arrows) as direct
edges.
Enables reachability via SPARQL property paths, e.g., ( ?arrow ).

Usage Note

14

Table 174—Property Definition: hspace:hasOperation

15
16
17
18
19
20
21
22
23

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

24

13.2.3. Element-Class Properties

25
26

These properties are used on element instances (when hspace:hasElementType is a class). They are not
properties of the hspace:Hyperspace resource itself.

27

13.2.3.1. Summary

28

hspace:hasOperation
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#hasOperation
hasOperation
Optional
0..n
hspace:Hyperspace
hspace:Operation
Declares supported operations (e.g., reachability, routing, subspace extraction,
metric evaluation).

Table 175—Properties Summary for Element-Class

29
30
31
32

Predicate

JSON(-LD)
name

Description

Cardinality

hspace:
elementValue

elementValue

Carries the element’s literal value on the element node
(when applicable).

0..1

33

13.2.3.1.1. Property: elementValue

34
35
36

Table 176—Property Definition: hspace:elementValue
Property
IRI

hspace:elementValue
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#elementValue

118

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 176—Property Definition: hspace:elementValue (continued)

2
3
4
5
6
7
8

JSON name
Requirement Level
Cardinality
Domain
Range
Definition

9

13.2.4. Path-Class Properties

10
11

These properties are used on path instances (i.e., resources of the class named by hspace:hasPathType when
that range is a class). They are not properties of the hspace:Hyperspace resource itself.

12

13.2.4.1. Summary

elementValue
Optional
0..1
Class named by hspace:hasElementType (when that range is a class)
rdfs:Literal (typed per profile, e.g., geo:wktLiteral, xsd:string)
Stores a literal value on an element node, enabling arrows between resources
while retaining the raw value.

13

Table 177—Properties Summary for Path-Class

14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31

Predicate

JSON(-LD)
name

Description

Cardinality

hspace:startsAt

startsAt

0..1

hspace:endsAt

endsAt

hspace:pathStep

pathStep

hspace:onPath

onPath

hspace:
startsAtValue
hspace:
endsAtValue
hspace:stepList

startsAtValue

Links a path to its start element node (resource-based
elements).
Links a path to its end element node (resource-based
elements).
Ordered steps of a path (elements/edges/step-nodes per
profile).
Membership assertion that an element node lies on the
path.
Start literal of the path (literal-based elements).

endsAtValue

End literal of the path (literal-based elements).

0..1

stepList

rdf:List of ordered literal elements (literal-based
elements).
Serialized path payload (e.g., LineString, JSON array/
polyline).

0..1

32

13.2.4.1.1. Property: startsAt

hspace:pathValue pathValue

33
34
35
36
37
38
39
40
41

0..1
0..1
0..1
0..1

0..1

Table 178—Property Definition: hspace:startsAt
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

hspace:startsAt
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#startsAt
startsAt
Optional
0..1
Class named by hspace:hasPathType (when that range is a class)
Element class named by hspace:hasElementType (when that range is a class)
Links a path resource to its start element node (resource-based elements).

119

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

13.2.4.1.2. Property: endsAt

2

Table 179—Property Definition: hspace:endsAt

3
4
5
6
7
8
9
10

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

11

13.2.4.1.3. Property: pathStep

12

hspace:endsAt
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#endsAt
endsAt
Optional
0..1
Class named by hspace:hasPathType (when that range is a class)
Element class named by hspace:hasElementType (when that range is a class)
Links a path resource to its end element node (resource-based elements).

Table 180—Property Definition: hspace:pathStep

13
14
15
16
17
18
19
20
21

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

22

13.2.4.1.4. Property: onPath

23

hspace:pathStep
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#pathStep
pathStep
Optional
0..1
Class named by hspace:hasPathType (when that range is a class)
owl:ObjectProperty IRI
Ordered property listing the steps of a path. Steps MAY reference elements,
edges, or step nodes per profile.

Table 181—Property Definition: hspace:onPath

24
25
26
27
28
29
30
31

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

32

13.2.4.1.5. Property: startsAtValue

33
34
35
36
37
38

hspace:onPath
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#onPath
onPath
Optional
0..1
Class named by hspace:hasPathType (when that range is a class)
Element class named by hspace:hasElementType (when that range is a class)
Indicates that an element node lies on this explicit path.

Table 182—Property Definition: hspace:startsAtValue
Property
IRI
JSON name
Requirement Level
Cardinality

hspace:startsAtValue
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#startsAtValue
startsAtValue
Optional
0..1

120

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 182—Property Definition: hspace:startsAtValue (continued)

2
3
4
5

Domain
Range

6

13.2.4.1.6. Property: endsAtValue

Class named by hspace:hasPathType (when that range is a class)
rdfs:Literal (typed with the datatype named by hspace:hasElementType when
it is a datatype)
Records the start literal of the path when elements are literals.

Definition

7

Table 183—Property Definition: hspace:endsAtValue

8
9
10
11
12
13
14
15
16

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range

17

13.2.4.1.7. Property: stepList

hspace:endsAtValue
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#endsAtValue
endsAtValue
Optional
0..1
Class named by hspace:hasPathType (when that range is a class)
rdfs:Literal (typed with the datatype named by hspace:hasElementType when
it is a datatype)
Records the end literal of the path when elements are literals.

Definition

18

Table 184—Property Definition: hspace:stepList

19
20
21
22
23
24
25
26
27

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

28

13.2.4.1.8. Property: pathValue

29
30
31
32
33
34
35
36
37
38

hspace:stepList
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#stepList
stepList
Optional
0..1
Class named by hspace:hasPathType (when that range is a class)
rdf:List
Points to an RDF Collection whose items are the ordered literal elements
constituting the path (used when elements are literals).

Table 185—Property Definition: hspace:pathValue
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

hspace:pathValue
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#pathValue
pathValue
Optional
0..1
Class named by hspace:hasPathType (when that range is a class)
rdfs:Literal
Serialized path payload for visualization or exchange (e.g., WKT/GeoJSON
LineString, JSON array/polyline).

121

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

13.2.5. Class: hspace:Path

2
3
4
5

The class hspace:Path represents a composed path: a finite composition of arrows in a given Hyperspace.
It provides an identifiable resource on which systems can attach metadata, validate step coherence, and
(optionally) serialize a concrete realization (e.g., a LineString or JSON sequence), without altering the core
arrow-based semantics.

6

13.2.5.1. Class Definition

7

Table 186—Class Definition for hspace:Path

8
9
10
11
12
13
14
15
16

RDF Class
Is Abstract
Definition

17

13.2.5.2. Properties Summary

hspace:Path
No
A first-class representation of a composed path (finite sequence of arrows) within a
Hyperspace.
hspace:Entity
Use when a path requires identity, metadata, validation, or serialization; otherwise,
implicit path composition via arrow mappings suffices.
Enables reproducible, governed, and interoperable exchange of paths (IDs, provenance,
metrics) while keeping navigation arrow-driven.

Subclass Of
Usage Note
Rationale

18

Table 187—Property Definitions for hspace:Path

19
20
21
22
23
24
25
26
27
28
29
30
31
32
33

Predicate

JSON(-LD)
name

Description

Cardinality

hspace:startsAt
hspace:endsAt
hspace:pathStep
hspace:onPath

startsAt
endsAt
pathStep
onPath

0..1
0..1
0..1
0..n

hspace:
startsAtValue
hspace:
endsAtValue
hspace:stepList

startsAtValue

Start element node (when elements are resources).
End element node (when elements are resources).
Ordered steps (elements, edges, or step nodes per profile).
Membership assertion that an element node lies on this
path.
Start literal (when elements are literals).

endsAtValue

End literal (when elements are literals).

0..1

stepList

rdf:List of ordered literal elements (when elements are
0..1
literals).
Serialized path payload (e.g., WKT/GeoJSON LineString, 0..1
JSON array/polyline).

34

13.2.5.2.1. Property: startsAt

hspace:pathValue pathValue

35
36
37
38
39
40
41

0..1

Table 188—Property Definition: hspace:startsAt
Property
IRI
JSON name
Requirement Level
Cardinality
Domain

hspace:startsAt
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#startsAt
startsAt
Optional (resource-element profiles)
0..1
hspace:Path (and subclasses)

122

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 188—Property Definition: hspace:startsAt (continued)

2
3
4
5

Range

6

13.2.5.2.2. Property: endsAt

owl:ObjectProperty IRI (targeting the element class named by hspace:
hasElementType)
Links a path to its start element node when elements are resources.
For literal-element profiles, use hspace:startsAtValue.

Definition
Usage Note

7

Table 189—Property Definition: hspace:endsAt

8
9
10
11
12
13
14
15
16
17

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range

18

13.2.5.2.3. Property: pathStep

hspace:endsAt
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#endsAt
endsAt
Optional (resource-element profiles)
0..1
hspace:Path (and subclasses)
owl:ObjectProperty IRI (targeting the element class named by hspace:
hasElementType)
Links a path to its end element node when elements are resources.
For literal-element profiles, use hspace:endsAtValue.

Definition
Usage Note

19

Table 190—Property Definition: hspace:pathStep

20
21
22
23
24
25
26
27
28
29
30

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

31

13.2.5.2.4. Property: onPath

Usage Note

32
33
34
35
36
37
38
39
40

hspace:pathStep
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#pathStep
pathStep
Optional
0..1
hspace:Path (and subclasses)
owl:ObjectProperty IRI
Ordered property listing the steps of a path. Steps MAY reference elements,
edges, or step nodes per profile.
Ordering MAY be expressed via RDF Collections (e.g., rdf:List) or sh:order
metadata on step nodes.

Table 191—Property Definition: hspace:onPath
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

hspace:onPath
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#onPath
onPath
Optional
0..n
hspace:Path (and subclasses)
owl:ObjectProperty IRI (targeting element nodes)
Indicates that an element node lies on this explicit path.

123

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

13.2.5.2.5. Property: startsAtValue

2

Table 192—Property Definition: hspace:startsAtValue

3
4
5
6
7
8
9
10

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

11

13.2.5.2.6. Property: endsAtValue

12

hspace:startsAtValue
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#startsAtValue
startsAtValue
Optional (literal-element profiles)
0..1
hspace:Path (and subclasses)
rdfs:Literal (typed with the Hyperspace’s hspace:hasElementType datatype)
Records the start literal of the path when elements are literals.

Table 193—Property Definition: hspace:endsAtValue

13
14
15
16
17
18
19
20

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

21

13.2.5.2.7. Property: stepList

22

hspace:endsAtValue
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#endsAtValue
endsAtValue
Optional (literal-element profiles)
0..1
hspace:Path (and subclasses)
rdfs:Literal (typed with the Hyperspace’s hspace:hasElementType datatype)
Records the end literal of the path when elements are literals.

Table 194—Property Definition: hspace:stepList

23
24
25
26
27
28
29
30
31
32
33

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

34

13.2.5.2.8. Property: pathValue

Usage Note

35
36
37
38

hspace:stepList
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#stepList
stepList
Optional (literal-element profiles)
0..1
hspace:Path (and subclasses)
rdf:List
Points to an RDF Collection whose items are the ordered literal elements that
constitute the path.
Each list item MUST be typed with the datatype named by hspace:
hasElementType when elements are literals.

Table 195—Property Definition: hspace:pathValue
Property
IRI
JSON name

hspace:pathValue
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#pathValue
pathValue

124

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 195—Property Definition: hspace:pathValue (continued)

2
3
4
5
6
7
8
9
10
11
12

Requirement Level
Cardinality
Domain
Range
Definition

13

13.2.6. Class: hspace:Operation

14
15
16
17

The class hspace:Operation declares a portable operation that can be applied to a given Hyperspace (e.g.,
reachability, shortest path, similarity routing, subspace formation). An Operation binds to the Hyperspace’s
declared mappings (element/arrow/path) so that different implementations can interoperate while using the
same inputs and producing comparable outputs.

18

13.2.6.1. Class Definition

Optional
0..1
hspace:Path (and subclasses)
rdfs:Literal
Serialized realization of the path for rendering or exchange (e.g., WKT/
GeoJSON LineString, JSON array/polyline).
Navigation semantics (reachability) are derived from arrow mappings, not
from this serialization.

Usage Note

NOTE— Conformance. A profile that names a class in hspace:hasPathType MAY use hspace:Path directly or a
subclass thereof (e.g., ex:Route, vector:LineString), applying the properties above as appropriate to the element
representation (resource-based or literal-based).

19

Table 196—Class Definition for hspace:Operation

20
21
22
23
24
25
26
27
28

RDF Class
Is Abstract
Definition

29

13.2.6.2. Properties Summary

Subclass Of
Usage Note
Rationale

30
31
32
33
34
35
36
37
38
39
40
41
42
43

hspace:Operation
No
A declarative, reusable operation over a Hyperspace that references the mappings it
consumes and the types it produces.
hspace:Entity
A Hyperspace links to its supported operations with hspace:hasOperation. An Operation
MAY be reused by multiple Hyperspaces if their mappings are compatible.
Separates what to compute from how the Hyperspace is encoded, enabling consistent
contracts for queries, analytics, validation, and services.

Table 197—Property Definitions for hspace:Operation
Predicate

JSON(-LD)
name

Description

Cardinality

rdf:type
@type
Declares the resource as an instance of hspace:Operation.
hspace:
usesArrowProperty Binds the operation to the atomic edge predicate it
usesArrowProperty
traverses (when arrows are direct triples).
hspace:
usesArrowClass
Binds the operation to the reified edge class it traverses
usesArrowClass
(when arrows are edge resources).
hspace:
usesAnnotationProperty
Declares which edge annotation properties (e.g.,
usesAnnotationProperty
weight, cost) the operation consumes.
hspace:
returnsPathClass Declares the path class produced (if the operation returns
returnsPathClass
explicit paths).
hspace:
returnsValueType Declares the datatype or class of the scalar/complex
returnsValueType
result (e.g., xsd:boolean, xsd:decimal, prov:Entity).

125

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

1..n
0..1
0..1
0..n
0..1
0..n

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 197—Property Definitions for hspace:Operation (continued)

2
3
4
5
6
7

Predicate

8

13.2.6.2.1. Property: rdf:type

hspace:
parameterShape
hspace:
implementation

9

JSON(-LD)
name
parameterShape
implementation

Description

Cardinality

SHACL shape describing the named parameters and
their constraints for invoking the operation.
IRI of an algorithm, function, or service (e.g., prov:
Plan, API endpoint) that realizes this operation.

0..1

Table 198—Property Definition: rdf:type

10
11
12
13
14
15
16
17

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

18

13.2.6.2.2. Property: usesArrowProperty

19

rdf:type
http://www.w3.org/1999/02/22-rdf-syntax-ns#type
@type
Mandatory
1..n
hspace:Operation
hspace:Operation
Declares the resource as an instance of hspace:Operation.

Table 199—Property Definition: hspace:usesArrowProperty

20
21
22
23
24
25
26
27
28
29
30
31

Property
IRI

32

13.2.6.2.3. Property: usesArrowClass

JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

33
34
35
36
37
38
39
40
41

0..n

hspace:usesArrowProperty
https://www.spatialwebfoundation.org/ns/hsml/
hyperspace#usesArrowProperty
usesArrowProperty
Optional
0..1
hspace:Operation
owl:ObjectProperty IRI
Binds the operation to the arrow predicate to traverse (e.g., ex:connect).
Use this when the Hyperspace uses direct RDF edges (hspace:arrowProperty).
Mutually exclusive with hspace:usesArrowClass in a single invocation
context.

Table 200—Property Definition: hspace:usesArrowClass
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

hspace:usesArrowClass
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#usesArrowClass
usesArrowClass
Optional
0..1
hspace:Operation
rdfs:Class
Binds the operation to the edge class to traverse (reified edges, e.g., ex:Edge).

126

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 200—Property Definition: hspace:usesArrowClass (continued)

2
3

Usage Note

4

13.2.6.2.4. Property: usesAnnotationProperty

5

Pair with endpoint properties defined in the profile (e.g., hspace:
arrowSource / hspace:arrowTarget or their literal variants at execution time).

Table 201—Property Definition: hspace:usesAnnotationProperty

6
7
8
9
10
11
12
13
14
15
16
17

Property
IRI

18

13.2.6.2.5. Property: returnsPathClass

JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

19

hspace:usesAnnotationProperty
https://www.spatialwebfoundation.org/ns/hsml/
hyperspace#usesAnnotationProperty
usesAnnotationProperty
Optional
0..n
hspace:Operation
rdf:Property IRI
Declares which edge annotations the operation reads (e.g., ex:weight, ex:
capacity, rdfs:label).
For shortest path, bind the weight property; for multi-criteria, list multiple
properties and constrain via hspace:parameterShape.

Table 202—Property Definition: hspace:returnsPathClass

20
21
22
23
24
25
26
27
28
29
30

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

31

13.2.6.2.6. Property: returnsValueType

Usage Note

32
33
34
35
36
37
38
39
40
41

hspace:returnsPathClass
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#returnsPathClass
returnsPathClass
Optional
0..1
hspace:Operation
rdfs:Class
Declares the path class produced by the operation when it returns explicit
paths (e.g., ex:Route, vector:LineString).
If omitted, the operation likely produces a scalar or set (see hspace:
returnsValueType).

Table 203—Property Definition: hspace:returnsValueType
Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

hspace:returnsValueType
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#returnsValueType
returnsValueType
Optional
0..n
hspace:Operation
rdfs:Class or datatype IRI
Declares the non-path result type(s) (e.g., xsd:boolean for reachability, xsd:
decimal for distance, prov:Entity for artifacts).

127

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

13.2.6.2.7. Property: parameterShape

2

Table 204—Property Definition: hspace:parameterShape

3
4
5
6
7
8
9
10
11
12

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition

13

13.2.6.2.8. Property: implementation

Usage Note

14

hspace:parameterShape
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#parameterShape
parameterShape
Optional
0..1
hspace:Operation
sh:NodeShape
SHACL shape describing required/optional parameters (e.g., ex:source, ex:
target, ex:k, ex:maxCost), their datatypes, and constraints.
Encourages portable invocation contracts across engines.

Table 205—Property Definition: hspace:implementation

15
16
17
18
19
20
21
22
23
24
25
26
27
28
29

Property
IRI
JSON name
Requirement Level
Cardinality
Domain
Range
Definition
Usage Note

30

13.2.6.3. Minimal Example (Informative)

31
32
33
34

@prefix hspace: <https://www.spatialwebfoundation.org/ns/hsml/
hyperspace#> .
@prefix ex:
<https://example.org/ns/> .
@prefix xsd:
<http://www.w3.org/2001/XMLSchema#> .

35
36
37
38
39
40
41

# Hyperspace (excerpt)
ex:RoadNet a hspace:Hyperspace ;
hspace:hasElementType ex:Intersection ;
hspace:hasArrowType
ex:connectsTo ;
hspace:arrowProperty ex:connectsTo ;
hspace:hasPathType
ex:Route ;
hspace:hasOperation
ex:ShortestPath .

hspace:implementation
https://www.spatialwebfoundation.org/ns/hsml/hyperspace#implementation
implementation
Optional
0..n
hspace:Operation
IRI (e.g., prov:Plan, code/package/service endpoint)
Identifies an algorithm, plan, or service that realizes the operation.
Use prov:wasAssociatedWith / prov:used alongside this property for full
provenance, if desired.

NOTE— Binding model. A Hyperspace links to operations via hspace:hasOperation. Each operation
declares how it binds to the Hyperspace’s mappings: - Direct edges → hspace:usesArrowProperty. Reified edges → hspace:usesArrowClass (and profile-known source/target predicates). - Weights/labels →
hspace:usesAnnotationProperty. Outputs are described by hspace:returnsPathClass and/or hspace:returnsValueType.
Parameters are validated by hspace:parameterShape.

128

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3
4
5
6
7

# Operation bound to the arrow predicate and weight annotation
ex:ShortestPath a hspace:Operation ;
hspace:usesArrowProperty ex:connectsTo ;
hspace:usesAnnotationProperty ex:travelTime ;
hspace:returnsPathClass ex:Route ;
hspace:returnsValueType xsd:decimal ;
# total cost
hspace:implementation <https://svc.example.org/ops/shortest-path> .

Figure 11

8
9

13.2.7. Class: hspace:HyperspaceOfHyperspace

10
11
12
13

hspace:HyperspaceOfHyperspace is a higher-order Hyperspace whose elements are themselves
Hyperspaces. It enables composition, federation, and holarchic organization of spaces (systems-of-systems),
allowing navigation and operations to traverse relationships among multiple constituent Hyperspaces without
collapsing their internal structure.

14

13.2.7.1. Class Definition

15

Table 206—Class Definition for hspace:HyperspaceOfHyperspace

16
17
18
19
20
21
22
23
24
25
26
27

RDF Class
Is Abstract
Definition

28

13.2.7.2. Specialization Constraints (Normative)

29

–

Element Type. hspace:hasElementType MUST be hspace:Hyperspace.

30
31
32
33

–

Arrow Type. hspace:hasArrowType MAY denote relations between Hyperspaces (e.g.,
interoperability, containment, dependency). The specific predicate (if using direct edges) is given by
hspace:arrowProperty; if using reified edges, profiles SHALL provide the edge class and endpoint
predicates.

34
35
36

–

Path Type. hspace:hasPathType MAY be declared to represent composed relations across multiple
Hyperspaces (e.g., federation traversal). Path instances (if used) employ the standard Path-class
properties (hspace:startsAt, hspace:endsAt, hspace:pathStep, etc.).

37
38
39

NOTE—This class reuses the same Hyperspace-level, Element-class, and Path-class property model defined for
hspace:Hyperspace. The only additional constraint is that elements are Hyperspaces. Consequently, any path over this
space is a chain of Hyperspaces, and any arrow relates one Hyperspace to another.

Subclass Of
Usage Note

Rationale

hspace:HyperspaceOfHyperspace
No
A Hyperspace whose element type is hspace:Hyperspace, supporting relations and
composed paths among Hyperspaces (e.g., containment, interoperability, federation).
hspace:Hyperspace
Use when modeling networks or hierarchies of Hyperspaces (e.g., regional grids
aggregated into a national grid; organizational spaces federated into a sector space).
Internal structures of member Hyperspaces remain intact and navigable via their own
declarations.
Provides a principled way to build holarchies and federations in the Spatial Web:
spaces as elements of larger spaces, with clear separation of concerns and reusable
navigation semantics.

129

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

13.2.7.3. Example: Holarchy (Hyperspace of Hyperspaces)

2
3

This example models a higher-order Hyperspace whose elements are themselves Hyperspaces (holons).
It preserves each member Hyperspace’s internal logic while expressing whole–part links across scales.

4
5

–

What is modeled. ex:Holarchy contains ex:RoomSpace, ex:BuildingSpace, ex:DistrictSpace, ex:
CitySpace—each a hspace:Hyperspace.

6
7
8

–

Arrow semantics. ex:containsHolon is the atomic arrow (one step) relating Hyperspace → Hyperspace
(Room → Building → District → City). Connectivity across levels is computed by arrow composition,
e.g., (ex:containsHolon)+.

9
10

–

Explicit path (optional). hspace:Path records a composed traversal (with identity and lightweight
metadata). It complements arrow-based navigation; arrows remain authoritative for reachability.

11
12
13

NOTE—Conformance reminders: - The enclosing space sets hspace:hasElementType = hspace:Hyperspace. - The arrow
mapping relates Hyperspace → Hyperspace (hspace:hasArrowType / hspace:arrowProperty). - If used, hspace:Path
endpoints target Hyperspace instances.

14
15
16
17

@prefix hspace: <https://www.spatialwebfoundation.org/ns/hsml/
hyperspace#> .
@prefix ex:
<https://example.org/ns/> .
@prefix xsd:
<http://www.w3.org/2001/XMLSchema#> .

18
19
20
21
22
23
24

# Enclosing higher-order hyperspace: elements are Hyperspaces (holons)
ex:Holarchy a hspace:HyperspaceOfHyperspace ;
hspace:hasElementType hspace:Hyperspace ;
hspace:hasArrowType
ex:containsHolon ;
# whole–part relation
among hyperspaces
hspace:arrowProperty ex:containsHolon ;
hspace:hasPathType
hspace:Path .

25
26
27
28
29

# Member hyperspaces at different scales (each is a whole/part)
ex:RoomSpace
a hspace:Hyperspace .
ex:BuildingSpace a hspace:Hyperspace .
ex:DistrictSpace a hspace:Hyperspace .
ex:CitySpace
a hspace:Hyperspace .

30
31
32
33

# Holarchic containment (arrows): Room ⟶ Building ⟶ District ⟶ City
ex:RoomSpace
ex:containsHolon ex:BuildingSpace .
ex:BuildingSpace ex:containsHolon ex:DistrictSpace .
ex:DistrictSpace ex:containsHolon ex:CitySpace .

34
35
36
37
38
39
40
41

# Optional explicit path: aggregation from Room to City through the
holarchy
ex:upwardAggregation a hspace:Path ;
hspace:startsAt ex:RoomSpace ;
hspace:endsAt
ex:CitySpace ;
hspace:pathStep ( ex:RoomSpace ex:BuildingSpace ex:DistrictSpace
ex:CitySpace ) ;
ex:levelCount "4"^^xsd:integer .

42

Figure 12
130

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

14. HSML TopologicalSpace SubModule

2

14.1. Introduction

3
4
5

The TopologicalSpace Module specializes the Hyperspace abstraction for structures defined by
neighborhoods, adjacency, and continuity, rather than numeric coordinates. It realizes the
TOPOLOGICAL SPACE concept referenced in IEEE P2874 (§ 6.2.1) and HSML Hyperspace design:

6
7
8

“A topological space is a set of elements together with a structure that specifies which subsets
are ‘open,’ thereby defining notions of adjacency, neighborhood, and continuity without
reference to metric distance.”

9
10
11

In HSML, a TopologicalSpace provides a declarative way to represent connectivity, adjacency, boundaries,
and regions. It is the natural home for geometries beyond points, including LineStrings, Polygons, and
Spheres, which are not valid vector elements but can be modeled in a topological sense.

12

Typical use cases include:

13

–

Geographic features — regions, boundaries, polygonal areas, networks of connected edges.

14

–

Computational grids — adjacency of cells in raster or tessellated models.

15

–

Continuity spaces — abstract topologies for states, neighborhoods, or coverage.

16
17
18

A TopologicalSpace inherits from hspace:Hyperspace and introduces adjacency and region semantics. It
does not assume distances (metric:Metric) unless combined with a MetricSpace; instead, it captures purely
topological relations.

19

14.2. Architecture and Design Rationale

20

14.2.1. Core Principle

21
22
23

TopologicalSpaces in HSML are relation-first: they define what is “next to” or “contained in what,” rather
than how far apart elements are. This makes them suitable for qualitative spatial reasoning and boundarydriven models.

24

14.2.2. Subclassing Strategy

25

–

topo:TopologicalSpace is a subclass of hspace:Hyperspace.

26

–

Optional specializations include:

27

–

topo:TopologicalMetricSpace — adds metric distance on top of adjacency.

28

–

topo:CellularSpace — specialization for discrete grids and tessellations.

29

14.2.3. Elements and Paths

30

–

Element Type — any spatial unit such as geo:Polygon, geo:LineString, or cell:Cell.

31

–

Path Type — adjacency relations such as topo:adjacentTo or topo:connectedTo.

131

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

–

Elements may represent continuous regions (polygons, spheres) or discrete cells.

2

–

Paths represent adjacency chains (sequences of touching elements, border walks).

3

14.2.4. Neighborhoods and Open Sets

4
5

Unlike VectorSpaces, which define neighborhoods via coordinates and metrics, TopologicalSpaces rely on
declared adjacency or open sets:

6

–

topo:hasNeighborhood links an element to its set of neighboring elements.

7
8

–

SHACL profiles may constrain neighborhood semantics (e.g., Moore vs. Von Neumann adjacency in
a grid).

9

14.2.5. Regions and Boundaries

10

TopologicalSpaces support grouping and edge semantics:

11

–

topo:Region — a contiguous set of adjacent elements treated as one area.

12

–

topo:Boundary — the separating edge or border between a region and its exterior.

13
14

These abstractions allow modeling polygon boundaries, country borders, adjacency of cellular clusters, and
more.

15

14.2.6. Generic Operations

16

TopologicalSpaces extend the universal Hyperspace algebra with qualitative operations:

17

–

Neighborhood query — return adjacent elements of a given element.

18

–

Adjacency test — check if two elements share a border or node.

19

–

Connectivity test — check if two elements belong to the same connected component.

20

–

Path composition — concatenate adjacency steps into longer paths.

21

–

Reachability — determine if a path exists between two elements.

22

–

Boundary extraction — identify the separating elements between regions.

23

–

Region closure / interior — derive closed vs. open sets.

24

–

Union / intersection of regions — form composite regions.

25

–

Subspace formation — restrict to a subset of elements with induced adjacency.

26
27

–

Quotienting by equivalence — merge elements under an equivalence relation (e.g., administrative
aggregation).

28

These operations are generic and apply across polygonal, line-based, cellular, and spherical topologies.

29

14.2.7. Separation of Concerns

30
31

–

Domain vs Hyperspace — a Domain provides identity; attaching a TopologicalSpace defines adjacency
and region semantics.

32

–

Topology vs Metric — adjacency is qualitative; distances are layered on top when required.

132

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

–

3

14.2.8. Examples of Spaces

4

TopologicalSpaces are not limited to geometry — they capture adjacency and connectivity in many domains:

5
6
7
8

Geometric Topologies - Polygonal Topology: elements are polygons; adjacency = “share an edge.” - Line
Network: elements are line segments; adjacency = “share a node.” - Spherical Topology: elements are regions
on a sphere; adjacency defined by great-circle boundaries. - Cellular/DGGS Topology: elements are discrete
cells; adjacency defined by tessellation rules.

9
10
11

Computational / Data Structures - Graph Topology: elements are graph nodes; adjacency defined by
edges. - Tree Topology: elements are tree nodes; adjacency = parent–child relations. - Cellular Automaton
Topology: elements are cells; adjacency defined by automaton rules (Moore, Von Neumann).

12
13
14
15
16

Abstract / Conceptual Topologies - State Space Topology: elements are states in a machine; adjacency
defined by transitions. - Semantic Neighborhood Topology: elements are SKOS concepts; adjacency via
broader/narrower/related links. - Linguistic Topology: elements are words; adjacency via co-occurrence in a
context window. - Process Topology: elements are workflow activities; adjacency via “precedes” or “depends
on” relations.

17
18
19

Scientific / Physical Topologies - Biological Cell Topology: elements are cells in tissue; adjacency via direct
contact. - Protein Folding Topology: elements are amino acids; adjacency via sequential bonds + folding
contacts. - Neural Network Topology: elements are neurons; adjacency via synaptic connections.

20
21
22
23

To summarize, the TopologicalSpace Module captures adjacency and neighborhood semantics without
relying on coordinates or metrics. It provides the structural foundation for representing Polygons,
LineStrings, Spheres, and beyond as elements, enabling qualitative reasoning, boundary logic, and
region-based navigation in HSML.

24

14.3. Metric Space Submodule

25
26
27
28

The Metric Space Submodule provides metric-aware, format-agnostic hooks that work with any element or
path encoding chosen via the core hspace: mappings. It adds distance/similarity semantics without imposing
a particular geometry, graph model, or storage format, and integrates cleanly with Vector, Graph, Cellular,
Concept, or custom domains.

29

Namespace. https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#

30

Prefix. metric:

31
32
33

–

Structural neutrality. Element and path types are still declared with hspace: (e.g.,
hspace:hasElementType, hspace:hasPathType). The metric module does not force vectors, geometries,
or specific classes.

34
35

–

Pluggable metrics. A Hyperspace MAY declare one or more metrics and optionally a default metric
for operations.

36
37

–

Literal or resource elements. Metrics can operate on resource elements (with an operand value carried
by a property) or directly on literal elements (e.g., embeddings, strings, colors).

38
39

–

Distance or similarity (“polarity”). A metric SHALL be explicitly tagged as distance or similarity;
operations can uniformly convert via an optional monotone transform.

40
41

–

Operations-ready. Metric declarations are consumable by hspace:Operation (e.g., kNN, range query,
clustering, path cost evaluation) without additional coupling.

Profiles — SHACL profiles constrain adjacency semantics (e.g., polygons must be closed, cells must
tessellate consistently).

133

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2

–

3

14.3.1. Normative Classes

Monoid path aggregation. Path costs are aggregated via a declared associative aggregator (e.g., sum,
max, product) with an identity element; engines MAY override.

4

Table 207—Class Summary for Metric Module

5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21

Class

Description

metric:MetricSpace

Specialization of hspace:Hyperspace indicating that distance/similarity semantics are
available via one or more metric:Metric declarations.
Declarative description of a distance/similarity over the element domain of a
Hyperspace, including operand extraction (metric:operandProperty / metric:onType),
polarity (metric:polarity), unit/scale (metric:unit / metric:scaleKind), and axiom kind
(metric:kind)
First-class resource for pairwise measurements (distance or similarity) computed under
a given metric:Metric—useful for caching, provenance, or exchange.
Declarative path aggregator with monoid semantics (associative op + identity). Includes
ready-to-use instances (sum, max, min, product, lexicographic).
Lightweight vocabulary tagging the axiom flavor: metric:Metric, metric:Pseudometric,
metric:Quasimetric, metric:Semimetric, metric:Dissimilarity.
Lightweight vocabulary for polarity: metric:Distance, metric:Similarity.

22

14.3.2. Class: metric:MetricSpace

23
24
25

A metric:MetricSpace is a specialization of hspace:Hyperspace that equips a domain with quantitative
semantics. While a Hyperspace already defines elements, paths, and their connectivity, a MetricSpace adds
the notion of distance or similarity functions.

26
27
28

This enables: * Quantitative reasoning – e.g., nearest neighbor search, clustering, radius queries. *
Comparative analysis – measuring similarity between embeddings, geometries, or categorical features. *
Path evaluation – computing shortest paths, least-cost routes, or similarity-based traversals.

29
30
31
32

By separating structural relationships (adjacency, connectivity) from metric semantics, HSML supports
portable and engine-independent computations across graphs, cellular grids, and vector spaces. In IEEE
P2874 terms, this corresponds to the requirement that a Hyperspace may declare one or more Metrics to
enable interoperable spatial and similarity-based operations.

33

14.3.2.1. Class Definition

metric:Metric

metric:Measure (Optional)
metric:Aggregator
(Vocabulary/Class)
metric:MetricKind
(Vocabulary)
metric:Polarity
(Vocabulary)
metric:ScaleKind
(Vocabulary)

34
35
36
37
38
39
40
41
42
43

Optional measurement scale hint: metric:Ratio, metric:Interval, metric:Ordinal, metric:
UnitInterval.

Table 208—Class Definition for metric:MetricSpace
RDF Class

metric:MetricSpace

Is Abstract
Definition

No
A hspace:Hyperspace that declares one or more metrics (distance or similarity)
applicable to its elements.
hspace:Hyperspace
Use when your domain supports metric-based operations. Element and path types
remain bound via hspace: mappings.
Separates structure (core hyperspace) from quantitative semantics (metrics), enabling
portable operations (kNN, radius search, path cost).

Subclass Of
Usage Note
Rationale

134

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 209—Properties Summary for metric:MetricSpace

2
3
4
5
6
7
8
9
10
11

Predicate
(anchor)

JSON name

Description

Range

Card.

Req.

metric:
hasMetric
metric:
defaultMetric

hasMetric

metric:Metric

0..*

Optional

metric:Metric

0..1

Optional

metric:
weightProperty
(Optional)

weightProperty

Declares a metric available in this
Hyperspace.
Identifies the default metric to
use when none is specified by an
operation.
Names a property that holds
precomputed edge/step weights
(when used).

rdf:Property
(IRI)

0..1

Optional

12

14.3.2.2. Properties (MetricSpace)

13

14.3.2.2.1. Property: hasMetric

14

defaultMetric

Table 210—Property Definition: metric:hasMetric

15
16
17
18
19

Property
IRI
Domain
Range
Definition

20

14.3.2.2.2. Property: defaultMetric

21

metric:hasMetric
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#hasMetric
hspace:Hyperspace (typically metric:MetricSpace)
metric:Metric
Declares a metric available for this Hyperspace.

Table 211—Property Definition: metric:defaultMetric

22
23
24
25
26
27

Property
IRI

28

14.3.2.2.3. Property: weightProperty (Optional)

Domain
Range
Definition

29
30
31
32
33
34
35
36
37
38

metric:defaultMetric
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/
metric#defaultMetric
hspace:Hyperspace
metric:Metric
Identifies the default metric to use in absence of an explicit metric selection.

Table 212—Property Definition: metric:weightProperty
Property
IRI
Domain
Range
Definition
Usage Note

metric:weightProperty
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/
metric#weightProperty
hspace:Hyperspace
rdf:Property (IRI)
Indicates a property on edges/steps that carries precomputed weights (e.g.,
travel time, cost) that operations MAY use instead of evaluating a metric.
A metric:Metric MAY override at the metric level via metric:
edgeWeightProperty.

135

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

14.3.3. Class: metric:Metric

2
3
4

Metrics are the backbone of quantitative reasoning in a Hyperspace. They declare how closeness, likeness,
or difference is measured between elements of a domain, enabling engines to evaluate k-nearest neighbor
queries, range filters, clustering, and other operations consistently across heterogeneous data types.

5
6
7
8

Unlike raw functions, a metric:Metric is a declarative description: it specifies the polarity (distance vs
similarity), expected operand type, optional units and scale, theoretical bounds, and a reference to the
computation plan. This separation of semantics from implementation allows a metric definition to be
portable across engines, reproducible across versions, and validatable via SHACL.

9

Key design principles:

10
11

–

Declarative, not imperative — the ontology does not encode formulas but points to plans or algorithms
while capturing semantic guarantees (e.g., symmetry, triangle inequality).

12
13

–

Polarity-aware — every metric must declare whether values are interpreted as distances (lower is
better) or similarities (higher is better), ensuring uniform ranking and threshold semantics.

14
15

–

Context-bound — a metric may be attached to a Hyperspace (via metric:hasMetric or metric:
defaultMetric) to make its applicability explicit.

16
17
18

–

Extensible — additional properties such as metric:unit, metric:scaleKind, metric:monotoneTransform,
and metric:aggregator provide optional but powerful hints for engines, user interfaces, and
interoperability.

19
20

By elevating metrics to first-class declarative entities, HSML enables predictable, portable, and
semantically rich measurement across the Spatial Web.

21

14.3.3.1. Mathematical Guarantees (The Four Axioms)

22
23
24
25
26

The boolean properties nonNegative, identityOfIndiscernibles, symmetric, and triangleInequality are more
than just metadata; they are formal mathematical guarantees. When all four are true, the function is a true
metric, which allows query engines and algorithms to make powerful assumptions and drastic optimizations.
Declaring these guarantees enables a system to validate data, select the most efficient algorithms, and ensure
logically consistent results.

27

14.3.3.1.1. Non-Negativity

28

Property: `metric:nonNegative`

29
30
31
32

Axiom: The distance between two points is never negative. d(x, y) \ge 0 .

Why it’s needed: This is a fundamental sanity check. It establishes a baseline where the minimum possible
distance is zero. Algorithms that find shortest paths, like Dijkstra’s, rely on this, as a negative distance would
imply that traversing a path could somehow “reduce” the total cost, creating nonsensical loops.

33
34

Example — Physical Distance: The distance between two cities is always a positive number of miles or
kilometers. The distance is 0 only if they are the same location.

35
36

When it’s false: A function measuring financial “distance” as cost - revenue. Traveling from A to B might cost
$50 in fuel but generate $80 in profit, yielding a “distance” of -$30. This is a gain/loss function, not a metric.

136

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

14.3.3.1.2. Identity of Indiscernibles

2

Property: `metric:identityOfIndiscernibles`

3
4
5
6

Axiom: The distance between two points is zero if and only if they are the same point. d(x, y) = 0 \iff x = y .
Why it’s needed: This axiom guarantees that every element is unique. It ensures that if two items are
indistinguishable (zero distance apart), they are identical. This is crucial for search, deduplication, and
clustering, as it prevents distinct items from being treated as the same.

7
8
9

Example — Hamming Distance: For strings of equal length, this is the number of positions at which the
characters are different. d("apple", "apply") is 1, but d("apple", "apple") is 0. The distance is only zero if the
strings are identical.

10
11

When it’s false (Pseudometric): A function measuring the distance between two people as 0 if they live in
the same city. Alice and Bob might have a distance of 0, but they are clearly not the same person.

12

14.3.3.1.3. Symmetry

13

Property: `metric:symmetric`

14
15
16
17

Axiom: The distance from x to y is the same as the distance from y to x. d(x, y) = d(y, x) .

Why it’s needed: Symmetry allows algorithms to assume reciprocity. This dramatically simplifies problems
in routing, graph analysis, and indexing. For example, a query engine only needs to compute or store a distance
matrix in one direction, cutting storage requirements nearly in half.

18
19

Example — Euclidean Distance: The straight-line distance between your home and the library is the same
as the distance from the library back to your home.

20
21

When it’s false (Quasimetric): Driving time in a city with one-way streets. The route from the office to the
gym might be 10 minutes, but the return trip could be 20 minutes due to different required paths.

22

14.3.3.1.4. Triangle Inequality

23

Property: `metric:triangleInequality`

24
25
26
27

Axiom: The direct path between two points is always the shortest. d(x, z) \le d(x, y) + d(y, z) .

Why it’s needed: This is the most powerful axiom for optimization. It guarantees that there are no
“wormholes” or unexpected shortcuts. Search algorithms (like A*) and indexing structures (like M-trees) rely
on this principle to prune massive portions of the search space.

28
29

Example — Geographic Distance: The direct flight distance from New York to Tokyo is never greater than
the distance of flying from New York to London and then from London to Tokyo.

30
31
32

When it’s false (Semimetric): Airline ticket pricing. A flight from New York to London might be $500, and
a flight from London to Tokyo might be $600. However, a direct flight from New York to Tokyo could cost
$1800, which is far greater than the sum of the two legs ($1100).

33

14.3.3.2. Class Definition

34
35
36

Table 213—Class Definition for metric:Metric
RDF Class

metric:Metric

Is Abstract

No

137

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3
4
5
6
7
8
9

Table 213—Class Definition for metric:Metric (continued)
RDF Class

metric:Metric

Definition

A reusable definition of a distance or similarity function over elements (or their operand
values) of a Hyperspace.
owl:Thing
Bind to a Hyperspace via metric:hasMetric / metric:defaultMetric. Operations (e.g.,
kNN) consume this declaration to evaluate measures.
Enables portable, implementation-independent metric evaluation across engines and
data encodings.

Subclass Of
Usage Note
Rationale

10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52

Table 214—Properties Summary for metric:Metric
Predicate
(anchor)

JSON name

metric:kind

kind

Description

Axiom flavor of the measure
(Metric, Pseudometric,
Quasimetric, Semimetric,
Dissimilarity).
metric:polarity polarity
Declares whether values are
distance (lower is better) or
similarity (higher is better).
metric:onType
onType
Declares the element type (class)
or literal datatype the metric
expects.
metric:
operandProperty Property from a resource element
operandProperty
to its operand value (e.g.,
embedding vector, WKT, color
triple).
metric:
valueType
Datatype of operand and/or
valueType
measure values used by the metric
(e.g., xsd:decimal, xsd:double, rdf:
JSON).
metric:unit
unit
Unit of the measure (e.g., a
QUDT/UCUM IRI).
metric:
scaleKind
Optional measurement scale
scaleKind
hint (Ratio, Interval, Ordinal,
UnitInterval).
metric:
rangeMin
Minimum attainable value (e.g.,
rangeMin
0).
metric:
rangeMax
Maximum attainable value (e.g., 1
rangeMax
for normalized similarity).
metric:function function
IRI of an algorithm/function/plan
that computes the measure (e.g.,
prov:Plan, code/service IRI).
metric:
functionVersion Version tag for the referenced
functionVersion
function/plan to ensure
reproducibility.
metric:
aggregator
Default path aggregation for stepaggregator
wise costs (e.g., metric:Sum,
metric:Max).
metric:
edgeWeightProperty
Edge/step property to read
edgeWeightProperty
precomputed weights for
this metric (overrides metric:
weightProperty on the space).

138

Range

Card.

Req.

metric:
MetricKind

1

Mandatory

metric:Polarity

1

Mandatory

rdfs:Class or
Datatype (IRI)

1

Mandatory

rdf:Property
(IRI)

0..1

Optional

rdfs:Datatype

0..1

Optional

IRI

0..1

Optional

metric:
ScaleKind

0..1

Optional

xsd:decimal

0..1

Optional

xsd:decimal

0..1

Optional

IRI

0..*

Optional

xsd:string

0..1

Optional

metric:
Aggregator

0..1

Optional

rdf:Property
(IRI)

0..1

Optional

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 214—Properties Summary for metric:Metric (continued)

2
3
4
5
6
7
8
9
10
11
12
13
14

Predicate
JSON name
Description
(anchor)
metric:
monotoneTransform
Monotone mapping (IRI) to
monotoneTransform
convert distance↔similarity or rescale (e.g., f(d)=1/(1+d), f(s)=1−s).
metric:
symmetric
Whether d(x,y)=d(y,x). Defaults
symmetric
TRUE for metrics.
metric:
identityOfIndiscernibles
Whether d(x,y)=0 ⇒ x=y. Defaults
identityOfIndiscernibles
TRUE for metrics.
metric:
triangleInequality Whether d(x,z) ≤ d(x,y)+d(y,z).
triangleInequality
Defaults TRUE for metrics.
metric:
nonNegative
Whether values are guaranteed ≥
nonNegative
0. Defaults TRUE.

15

14.3.3.3. Properties (Metric)

16

14.3.3.3.1. Property: kind

17

Card.

Req.

IRI

0..1

Optional

xsd:boolean

0..1

Optional

xsd:boolean

0..1

Optional

xsd:boolean

0..1

Optional

xsd:boolean

0..1

Optional

Table 215—Property Definition: metric:kind

18
19
20
21
22

Property
IRI
Domain
Range
Definition

23

14.3.3.3.2. Property: polarity

24

metric:kind
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#kind
metric:Metric
metric:MetricKind
Tags the axiom flavor (e.g., metric:Metric, metric:Pseudometric).

Table 216—Property Definition: metric:polarity

25
26
27
28
29
30

Property
IRI
Domain
Range
Definition

31

14.3.3.3.3. Property: onType

32
33
34
35
36
37
38

Range

metric:polarity
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#polarity
metric:Metric
metric:Polarity
Declares whether the metric yields distance (lower is better) or similarity
(higher is better).

Table 217—Property Definition: metric:onType
Property
IRI
Domain
Range
Definition

metric:onType
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#onType
metric:Metric
rdfs:Class or Datatype (IRI)
Declares the expected element class (resource elements) or literal datatype
(literal elements) over which the metric operates.

139

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

14.3.3.3.4. Property: operandProperty (Optional)

2

Table 218—Property Definition: metric:operandProperty

3
4
5
6
7
8
9
10
11

Property
IRI

12

14.3.3.3.5. Property: valueType (Optional)

Domain
Range
Definition
Usage Note

13

metric:operandProperty
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/
metric#operandProperty
metric:Metric
rdf:Property (IRI)
If elements are resources, names the property that yields the operand value
used by the metric (e.g., ex:embedding, geo:asWKT, vector:asArray).
Omit when elements are literals of the declared metric:onType; the literal
itself is the operand.

Table 219—Property Definition: metric:valueType

14
15
16
17
18
19

Property
IRI
Domain
Range
Definition

20

14.3.3.3.6. Property: unit (Optional)

21

metric:valueType
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#valueType
metric:Metric
rdfs:Datatype
Datatype of operands and/or distance/similarity values used by the metric (e.
g., xsd:decimal, xsd:double, rdf:JSON).

Table 220—Property Definition: metric:unit

22
23
24
25
26

Property
IRI
Domain
Range
Definition

27

14.3.3.3.7. Property: scaleKind (Optional)

28
29
30
31
32
33
34

metric:unit
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#unit
metric:Metric
IRI (e.g., QUDT/OM/UCUM)
Unit associated with the measure values (when applicable).

Table 221—Property Definition: metric:scaleKind
Property
IRI
Domain
Range
Definition

metric:scaleKind
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#scaleKind
metric:Metric
metric:ScaleKind
Optional hint about the measurement scale (e.g., Ratio for distances;
UnitInterval for normalized similarities).

140

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

14.3.3.3.8. Property: rangeMin (Optional)

2

Table 222—Property Definition: metric:rangeMin

3
4
5
6
7

Property
IRI
Domain
Range
Definition

8

14.3.3.3.9. Property: rangeMax (Optional)

9

metric:rangeMin
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#rangeMin
metric:Metric
xsd:decimal
Theoretical or enforced minimum of the measure domain.

Table 223—Property Definition: metric:rangeMax

10
11
12
13
14
15

Property
IRI
Domain
Range
Definition

16

14.3.3.3.10. Property: function (Optional)

17

metric:rangeMax
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#rangeMax
metric:Metric
xsd:decimal
Theoretical or enforced maximum of the measure domain (e.g., 1.0 for
normalized similarity).

Table 224—Property Definition: metric:function

18
19
20
21
22
23

Property
IRI
Domain
Range
Definition

24

14.3.3.3.11. Property: functionVersion (Optional)

25

metric:function
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#function
metric:Metric
IRI
Identifies an algorithm, plan, or service endpoint that evaluates the metric (e.
g., prov:Plan, API/operation IRI).

Table 225—Property Definition: metric:functionVersion

26
27
28
29
30
31

Property
IRI

32

14.3.3.3.12. Property: aggregator (Optional)

Domain
Range
Definition

33
34
35
36

metric:functionVersion
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/
metric#functionVersion
metric:Metric
xsd:string
Version string for the referenced function/plan (for reproducibility).

Table 226—Property Definition: metric:aggregator
Property
IRI
Domain

metric:aggregator
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#aggregator
metric:Metric

141

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 226—Property Definition: metric:aggregator (continued)

2
3
4

Range
Definition

5

14.3.3.3.13. Property: edgeWeightProperty (Optional)

6

metric:Aggregator
Default aggregator for composing step costs into a path cost (e.g., sum, max).
Engines MAY override at operation time.

Table 227—Property Definition: metric:edgeWeightProperty

7
8
9
10
11
12
13

Property
IRI

14

14.3.3.3.14. Property: monotoneTransform (Optional)

Domain
Range
Definition

15

metric:edgeWeightProperty
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/
metric#edgeWeightProperty
metric:Metric
rdf:Property (IRI)
Names a property on edges/steps that carries precomputed weights for this
metric (overrides space-level metric:weightProperty).

Table 228—Property Definition: metric:monotoneTransform

16
17
18
19
20
21
22
23
24

Property
IRI

25

14.3.3.3.15. Property: symmetric (Optional)

Domain
Range
Definition
Usage Note

26

metric:monotoneTransform
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/
metric#monotoneTransform
metric:Metric
IRI
Identifies a monotone mapping to invert polarity or re-scale results (e.g.,
distance→similarity via f(d)=1/(1+d); similarity→distance via f(s)=1−s)).
The target of this IRI MAY be a prov:Plan, code function, or math expression
resource.

Table 229—Property Definition: metric:symmetric

27
28
29
30
31

Property
IRI
Domain
Range
Definition

32

14.3.3.3.16. Property: identityOfIndiscernibles (Optional)

33
34
35
36
37
38

metric:symmetric
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#symmetric
metric:Metric
xsd:boolean
Indicates whether the measure is symmetric.

Table 230—Property Definition: metric:identityOfIndiscernibles
Property
IRI
Domain
Range

metric:identityOfIndiscernibles
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/
metric#identityOfIndiscernibles
metric:Metric
xsd:boolean

142

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 230—Property Definition: metric:identityOfIndiscernibles (continued)

2

Definition

3

14.3.3.3.17. Property: triangleInequality (Optional)

4

Indicates whether d(x,y)=0 implies x=y.

Table 231—Property Definition: metric:triangleInequality

5
6
7
8
9
10

Property
IRI

11

14.3.3.3.18. Property: nonNegative (Optional)

Domain
Range
Definition

12

metric:triangleInequality
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/
metric#triangleInequality
metric:Metric
xsd:boolean
Indicates whether the triangle inequality holds.

Table 232—Property Definition: metric:nonNegative

13
14
15
16
17
18
19

Property
IRI

20

14.3.4. Class: metric:Measure (Optional)

21
22
23
24
25
26

metric:Measure represents the computed outcome of applying a specific metric:Metric to an ordered pair
of elements: metric:from and metric:to. It is deliberately structure-neutral (works with vectors, geometries,
strings, graphs, etc.) and polarity-neutral (covers both distances and similarities). The how of measurement
(function, axioms, operands, units) lives in metric:Metric; the what (the numeric result and its context) lives
in metric:Measure. This separation keeps declarations portable and engine-independent while making results
easy to cache, audit, exchange, and reason over.

27

14.3.4.1. Why a first-class metric:Measure?

28
29

–

Caching & performance. Persist kNN/range results or expensive pairwise evaluations to avoid
recomputation across queries and sessions.

30
31
32

–

Audit & reproducibility. Record the value (metric:value), the metric used (metric:wrtMetric), and
optional unit (metric:unit); link to provenance (e.g., prov:wasGeneratedBy) and implementation version
(metric:functionVersion) for traceable, repeatable analytics.

33
34

–

Interchange & federation. Share precomputed measures between heterogeneous engines and domains
without leaking internal encodings or storage choices.

35
36

–

Governance & evidence. Attach quantitative evidence to decisions/contracts in policy evaluation
pipelines.

37
38

–

Evaluation & ML. Store gold standards or inferred pairs for model training, validation, active learning,
and drift monitoring.

Domain
Range
Definition

metric:nonNegative
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/
metric#nonNegative
metric:Metric
xsd:boolean
Indicates whether values are guaranteed to be non-negative (typical for
distances).

143

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

14.3.4.2. Usage semantics

2
3
4
5

–

Operands. metric:from and metric:to may be resources or literals. When elements are resources, the
metric can declare metric:operandProperty to extract the value it operates on (e.g., embeddings, WKT).
When elements are literals, the literal itself is the operand and metric:onType SHOULD be a datatype
IRI.

6
7
8
9

–

Polarity & transforms. Polarity is determined by the referenced metric (metric:polarity = metric:Distance
or metric:Similarity). Engines MAY normalize for ranking via metric:monotoneTransform (e.g.,
similarity→distance). Unless stated otherwise, the stored metric:value SHOULD be the native output
of the metric prior to any downstream normalization.*

10
11
12

–

Typing & units. Prefer a numeric datatype consistent with the metric’s metric:valueType (e.g.,
xsd:double, xsd:decimal). Provide metric:unit when the quantity is dimensional (e.g., meters, seconds)
and consider metric:scaleKind / metric:rangeMin / metric:rangeMax for UI and validation hints.

13
14
15

–

Identity & lifecycle. Ephemeral results can be blank nodes. Persisted results SHOULD mint stable
IRIs (e.g., a content hash over {metric, from, to, functionVersion, params} with a timestamp). Capture
provenance (prov:*) when reproducibility or explainability matters.

16
17
18
19

–

Paths & aggregation. metric:Measure is pairwise by design. Path-level outcomes can be represented
as additional metric:Measure instances whose endpoints denote the path start/end, with provenance
pointing to the path and its metric:Aggregator (e.g., metric:Sum, metric:Max). Engines MAY also
introduce a domain-specific path result class if needed.

20

14.3.4.3. Interoperability notes

21
22

–

Works uniformly with any Hyperspace that declares metrics (see metric:MetricSpace and
metric:hasMetric / metric:defaultMetric).

23
24

–

Compatible with operation planning and evaluation (e.g., kNN, radius search, clustering, shortest path)
without binding to a specific data model or algorithm.

25
26

–

Encourages consistent cross-system semantics through explicit references to functions
(metric:function), versions (metric:functionVersion), units (metric:unit), and axioms (metric:kind).

27

14.3.4.4. Class Definition

28
29
30
31
32
33
34
35

Table 233—Class Definition for metric:Measure
RDF Class

metric:Measure

Is Abstract
Definition

No
A first-class pairwise measure (distance or similarity) computed under a specific metric:
Metric.
hspace:Entity
Useful for caching, provenance, audit, or exchanging computed distances/similarities.
Use prov:wasGeneratedBy to link computation runs if desired.

Subclass Of
Usage Note

36
37
38
39
40

Table 234—Properties Summary for metric:Measure
Predicate
(anchor)

JSON name

Description

Range

Card.

Req.

metric:
usingMetric

usingMetric

Links the measurement to the
metric used.

metric:Metric

1

Mandatory

144

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 234—Properties Summary for metric:Measure (continued)

2
3
4
5
6
7
8
9
10
11
12
13
14

Predicate
(anchor)
metric:from

JSON name

Description

Range

from

First element (resource or literal).

metric:to

to

metric:value

value

rdfs:Resource or 1
rdfs:Literal
rdfs:Resource or 1
rdfs:Literal
rdfs:Literal
1

metric:unit
metric:
confidence

unit
confidence

Second element (resource or
literal).
Numeric value of the measure
(datatype SHOULD match the
metric’s metric:valueType when
provided).
Unit of the measure value (if any). IRI
Optional confidence in the
xsd:decimal
computed value, in [0,1].

15

14.3.4.5. Properties (Measure)

16

14.3.4.5.1. Property: usingMetric

17

0..1
0..1

Req.
Mandatory
Mandatory
Mandatory

Optional
Optional

Table 235—Property Definition: metric:usingMetric

18
19
20
21
22
23

Property
IRI

24

14.3.4.5.2. Property: from

metric:usingMetric
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/
metric#usingMetric
metric:Measure
metric:Metric
Associates the measurement with the metric definition used.

Domain
Range
Definition

25

Table 236—Property Definition: metric:from

26
27
28
29
30

Property
IRI
Domain
Range
Definition

31

14.3.4.5.3. Property: to

32
33
34
35
36
37

Card.

metric:from
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#from
metric:Measure
rdfs:Resource or rdfs:Literal
First element of the ordered pair.

Table 237—Property Definition: metric:to
Property
IRI
Domain
Range
Definition

metric:to
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#to
metric:Measure
rdfs:Resource or rdfs:Literal
Second element of the ordered pair.

145

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

14.3.4.5.4. Property: value

2

Table 238—Property Definition: metric:value

3
4
5
6
7

Property
IRI
Domain
Range
Definition

8

14.3.4.5.5. Property: unit (Optional)

metric:value
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#value
metric:Measure
rdfs:Literal (numeric)
Numeric value of the measurement.

9

Table 239—Property Definition: metric:unit

10
11
12
13
14

Property
IRI
Domain
Range
Definition

15

14.3.4.5.6. Property: confidence (Optional)

16

metric:unit
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#unit
metric:Measure
IRI
Unit for the reported value (when applicable).

Table 240—Property Definition: metric:confidence

17
18
19
20
21

Property
IRI
Domain
Range
Definition

22

14.3.5. Class: metric:Aggregator

23
24
25

A metric:Aggregator defines how step-level measures are combined into a path-level measure. In HSML
Hyperspaces (graphs, cellular spaces, vector paths), a path consists of multiple segments. To evaluate the
overall cost, distance, or similarity of a path, step measures must be aggregated.

26
27
28
29

The metric:Aggregator provides a declarative, machine-readable way to specify: * Operation (metric:op)
– associative binary operator (sum, max, product, lexicographic). * Identity (metric:identity) – neutral
element for the operation. * Commutativity (metric:commutative) – whether operands can be reordered. *
Parameters (metric:parameter) – structured bindings (e.g., p for Lp norms, weights for weighted sums).

30

This ensures interoperability, optimization, and validation across engines.

31

14.3.5.1. Class Definition

32
33
34
35

metric:confidence
https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#confidence
metric:Measure
xsd:decimal
Confidence in [0,1] for the computed value (if provided by the engine).

Table 241—Class Definition for metric:Aggregator
RDF Class

metric:Aggregator

Is Abstract
Definition

No
Declarative monoid for composing step measures into a path measure.

146

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 241—Class Definition for metric:Aggregator (continued)

2
3
4

RDF Class

metric:Aggregator

Subclass Of
Usage Note

hspace:Entity
Hyperspatial Engines may provide optimized implementations for standard aggregators.

5

14.3.5.2. Properties Summary (Aggregator)

6

Table 242—Property Summary for metric:Aggregator

7
8
9
10
11
12
13
14
15

Predicate

JSON name

Description

Range

Card.

Req.

metric:op

op

IRI

1

Mandatory

metric:identity

identity

rdfs:Literal

0..1

Optional

metric:
commutative
metric:
parameter

commutative

Operation IRI (associative binary
operator).
Identity element (neutral value for
the operation).
Whether the operation is
commutative.
One or more structured parameters
configuring the op.

xsd:boolean

0..1

Optional

metric:
Parameter

0..*

Optional

16

14.3.5.2.1. Property: op

17

parameter

Table 243—Property Definition: metric:op

18
19
20
21
22
23

IRI

https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#op

Domain
Range
Definition
Why it matters
Examples

metric:Aggregator
IRI
Identifies the associative binary operation used for aggregation.
Engines require the algebraic operation to compute path measures deterministically.
sw:sum, sw:max, sw:product, sw:lexicographic

24

14.3.5.2.2. Property: identity

25

Table 244—Property Definition: metric:identity

26
27
28
29
30
31

IRI

https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#identity

Domain
Range
Definition
Why it matters
Examples

metric:Aggregator
rdfs:Literal
Neutral element for the operation.
Enables valid evaluation of zero-length paths and ensures algebraic closure.
Sum → 0; Product → 1; Max → -INF

32

14.3.5.2.3. Property: commutative

33
34
35
36
37

Table 245—Property Definition: metric:commutative
IRI

https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#commutative

Domain
Range
Definition

metric:Aggregator
xsd:boolean
Indicates if operand order affects the result.

147

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

Table 245—Property Definition: metric:commutative (continued)

2
3
4

IRI

https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#commutative

Why it matters
Examples

Guides algorithmic optimization (parallelism, reordering).
Sum → true; Max → true; Lexicographic → false

5

14.3.5.2.4. Property: parameter

6

Table 246—Property Definition: metric:parameter

7
8
9
10
11
12

IRI

https://www.spatialwebfoundation.org/ns/hsml/hyperspace/metric#parameter

Domain
Range
Definition
Why it matters
Examples

metric:Aggregator
metric:Parameter
Associates the aggregator with one or more structured parameters.
Makes configuration machine-readable, disambiguating free-form literals.
Lp norm (p=2); Weighted sum (weights=[0.3,0.7])

13

14.3.6. Class: metric:Polarity

14
15
16
17
18
19

metric:Polarity captures the ordering semantics of measures produced by a metric:Metric. It tells engines
whether lower values are better (metric:Distance) or higher values are better (metric:Similarity). Polarity
is attached to a metric via metric:polarity and is intentionally decoupled from both metric axioms (see
metric:MetricKind) and the computation plan (see metric:function). This separation lets systems perform
uniform ranking, thresholding, pruning, and planning across heterogeneous metrics without knowing the
metric’s internal math.

20
21
22
23
24

Polarity also coordinates with optional scale hints and bounds declared on the metric (see metric:scaleKind,
metric:rangeMin, metric:rangeMax) so UIs and algorithms can choose consistent comparators, normalize
scores, and validate thresholds. When conversions are needed—such as consuming a similarity where
a distance is expected or vice-versa—engines may apply the declared monotone transform (see
metric:monotoneTransform) while preserving order.

25
26
27

Polarity is mandatory for metrics (enforced by SHACL), ensuring that operations like kNN, range queries,
and top-k selection behave predictably. Note that metric:Measure remains polarity-neutral: the interpretation
of a stored measurement is taken from its associated metric via metric:usingMetric.

28

14.3.6.1. Class Definition

29
30
31
32
33
34
35
36
37
38
39
40

Table 247—Class Definition for metric:Polarity
RDF Class

metric:Polarity

Is Abstract
Definition

No
Vocabulary class whose instances tag whether a measure behaves as a distance (loweris-better) or a similarity (higher-is-better).
owl:Thing
Used as the range of metric:polarity on metric:Metric to declare the intended
ordering of values and to guide ranking, thresholding, and conversion via metric:
monotoneTransform.
Separates numeric ordering semantics from metric axioms (see metric:MetricKind)
and from the computation plan (see metric:function), enabling uniform treatment of
distances and similarities.

Subclass Of
Usage Note

Rationale

148

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

14.3.6.2. Instances

2

Table 248—Instances for metric:Polarity

3
4
5
6
7
8
9

Individual

Description

metric:Distance

Polarity tag indicating distance semantics: lower values indicate greater closeness;
typical domains are ratio-scaled and non-negative. Often paired with aggregators such
as metric:Aggregator = metric:Sum.
Polarity tag indicating similarity semantics: higher values indicate greater likeness;
often normalized to metric:UnitInterval with optional bounds supplied via metric:
rangeMin / metric:rangeMax.

10

14.3.6.2.1. Individual: metric:Distance

metric:Similarity

11

Table 249—Instance Definition: metric:Distance

12
13
14
15

RDF Individual

metric:Distance

Type
Definition

metric:Polarity
Declares that measurements produced by a metric are interpreted as distances (lower is
better).

16

14.3.6.2.2. Individual: metric:Similarity

17

Table 250—Instance Definition: metric:Similarity

18
19
20
21

RDF Individual

metric:Similarity

Type
Definition

metric:Polarity
Declares that measurements produced by a metric are interpreted as similarities (higher
is better).

22

15. HSML VectorSpace SubModule

23

15.1. Introduction

24
25
26

The VectorSpace Module specializes the Hyperspace abstraction for linear spaces. It realizes the VECTOR
SPACE concept of IEEE P2874 (§ 6.2.x) as a Hyperspace whose elements admit linear combination over
a scalar field, with an abstract origin and composable arrows corresponding to linear displacements.

27
28
29
30

“A vector space is a set whose elements can be added and scaled, satisfying linearity axioms.
In HSML, a VectorSpace is a Hyperspace that also qualifies as a MetricSpace, exposing
linear and distance semantics without prescribing a particular element encoding or path
representation.”

31
32
33
34

This module is intentionally non-prescriptive about representation. It defines vector-space semantics and
mapping hooks while allowing deployments to bind coordinates, arrays, or geometries according to their
needs. Vector spaces are used across the Spatial Web for geometric coordinates, embeddings and feature
spaces, signal/field representations, and local linearizations of complex manifolds.

35

By design, a vector:VectorSpace:

149

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

–

Inherits all properties of hspace:Hyperspace (elements, arrows, paths, operations).

2

–

Inherits all properties of metric:MetricSpace (distance, polarity, axioms, metrics).

3

–

Adds linear structure hooks (scalar field, dimension, origin policy, CRS).

4

16. HSML Extensions and Profiles

5
6
7
8

HSML is designed for evolution and adaptation. While the Core Model provides a universal foundation, its
true power is realized through extensions that tailor the language for specific industries and applications. This
is accomplished by creating extensions and application profiles that add specialized concepts while preserving
core interoperability and holonic integrity.

9

16.1. Subclass from the Core Model

10
11

Extensions must build upon the established HSML core classes. This is the primary mechanism for ensuring
that new concepts are compliant, interoperable, and inherit foundational characteristics.

12
13
14

–

How to Model: New classes shall be defined using rdfs:subClassOf to inherit from a base HSML
class like hsml:Thing, hsml:Agent, or hsml:Activity. For example, a smartbuilding:Elevator would be
a subclass of hsml:Thing.

15
16

–

Reasoning: This ensures that every new entity is a valid holon that can be uniquely identified by a hsml:
swid, exist within a hsml:Domain, and participate in the governance framework.

17

16.2. Maximize Reuse of Existing Ontologies

18
19

To promote interoperability and avoid reinventing concepts, extensions should integrate with established,
domain-specific vocabularies wherever possible.

20
21
22

–

How to Model: Before creating new properties, developers should import and reuse terms from wellknown ontologies like SAREF, GeoSPARQL, or the W3C Organization Ontology. Properties like owl:
equivalentClass can be used to map the extension’s concepts to these external standards.

23
24

–

Reasoning: This aligns with P2874’s goal of creating a “holistic and coherent technical framework” by
leveraging existing work rather than creating isolated data silos.

25

16.3. Enforce Governance and Data Quality with SHACL

26
27

Extensions are not just data schemas; they are governable components of the Spatial Web. Therefore,
extensions must include formal constraints that define valid data structures and enforce rules.

28
29
30

–

How to Model: Every extension profile must be accompanied by a set of SHACL shapes (sh:
NodeShape, sh:PropertyShape). These shapes define rules such as mandatory properties (sh:minCount),
data types (sh:datatype), and value ranges.

31
32
33

–

Reasoning: This principle directly implements the P2874 requirements for “Governance by Design”
and “Compliance”. It allows domains to validate incoming data and ensure that all participants in the
ecosystem adhere to the same structural and business rules.

150

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1

16.4. Package Extensions as Profiles

2

To be manageable and reusable, extensions should be packaged as self-contained Application Profiles.

3

–

How to Model: A profile is a collection of files that includes:

4

–

The OWL ontology defining the new classes and properties.

5

–

The SHACL shapes defining the constraints.

6

–

Human-readable documentation.

7
8
9

–

Reasoning: This approach allows different industries (e.g., mobility, logistics, smart building,
healthcare) to develop and maintain their own extensions while ensuring their foundation remains
interoperable with the core HSML model and the broader Spatial Web.

151

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3

Annex A
(normative)
Compliance

152

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3

Annex B
(normative)
System Requirements

153

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3

Annex C
(informative)
Bibliography

4
5
6

Bibliographical references are resources that provide additional or helpful material but do not need to be
understood or used to implement this standard. Reference to these resources is made for informational use
only.

154

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

P2874.X/D1, May 2024
Draft Standard for Spatial Web Implementation Specification — HSML Implementation

1
2
3

Annex D
(informative)
SWF Authors

155

Copyright © 2024 IEEE. All rights reserved.
This is an unapproved IEEE Standards Draft, subject to change.

